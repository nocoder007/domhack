{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/components/widgets/InputTextWidget.js"],"names":["window","altrpHelpers","convertData","isEditor","parseOptionsFromSettings","parseParamsFromString","parseURLTemplate","replaceContentWithData","renderAssetIcon","getDataFromLocalStorage","globalDefaults","push","AltrpFieldContainer","styled","div","settings","content_label_position_type","InputTextWidget","props","timeInput","handleEnter","e","keyCode","preventDefault","inputs","Array","from","document","querySelectorAll","index","indexOf","target","undefined","focus","element","getSettings","create_allowed","create_label","create_url","createItem","debounceDispatch","_","debounce","value","dispatchFieldValueToStore","onFocus","focus_actions","actionsManager","default","callAllWidgetActions","getIdForAction","onBlur","editor","get","getData","userInput","formId","getFormId","fieldName","getFieldId","isObject","appStore","dispatch","changeFormFieldValue","change_actions","inputValue","create_data","select2_multiple","currentModel","getCurrentModel","data","url","setState","state","isDisabled","resource","Resource","route","post","res","success","newOption","label","options","unshift","selectStateManager","menuIsOpen","console","error","component","elementDecorator","onChange","bind","defaultValue","getContent","paramsForUpdate","altrpSelectRef","React","createRef","this","prevProps","prevState","getProperty","contentLoaded","currentDataStorage","content_options","model_for_options","isEqual","dynamic","formsStore","updateOptions","updateValue","content_calculation","altrpforms","prevContext","altrpdata","altrpmodel","altrpuser","currentUser","altrppagestate","altrpPageState","altrpresponses","altrpmeta","altrpMeta","context","currentDataStorageLoaded","changedField","altrpstorage","replace","eval","message","getId","path","formData","AltrpModel","isEmpty","JSON","stringify","getRoute","getQueried","filters","isArray","getAll","valueToDispatch","cloneDeep","change_change_end","change_change_end_delay","clearTimeout","setTimeout","optionsDynamicSetting","getDynamicSetting","sortBy","o","toString","content_readonly","label_icon","classLabel","styleLabel","getResponsiveSetting","marginBottom","label_style_spacing","size","unit","marginTop","marginRight","position","zIndex","content_label","className","style","content_required","assetType","autocomplete","content_autocomplete","isClearable","content_clearable","input","type","name","getName","readOnly","autoComplete","placeholder","content_placeholder","position_css_classes","onKeyDown","id","position_css_id","onClick","Component"],"mappings":"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","file":"761.editor.js","sourcesContent":["const {\n  convertData,\n  isEditor,\n  parseOptionsFromSettings,\n  parseParamsFromString,\n  parseURLTemplate,\n  replaceContentWithData,\n  renderAssetIcon,\n  getDataFromLocalStorage\n} = window.altrpHelpers;\nimport Resource from \"../../classes/Resource\";\nimport { changeFormFieldValue } from \"../../../../../front-app/src/js/store/forms-data-storage/actions\";\nimport AltrpModel from \"../../classes/AltrpModel\";\nimport AltrpInput from \"../altrp-input/AltrpInput\";\n\n(window.globalDefaults = window.globalDefaults || []).push(`\n.altrp-field-label_text-widget{\n    width: 100%;\n}\n.bp3-icon_text-widget img{\n  width: 16px;\n  height: 16px;\n  object-fit: contain;\n  pointer-events: none;\n}\n.bp3-icon_text-widget svg{\n  width: 16px;\n  height: 16px;\n  pointer-events: none;\n}\n.bp3-icon_right{\n    margin: 7px;\n}\n.altrp-field {\n  border-style: solid;\n  width: 100%;\n}\n.altrp-field-file{\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n}\n\n.altrp-label-icon svg,\n.altrp-label-icon img {\n  width: 20px;\n}\n.altrp-label-icon svg{\n  height: 20px;\n}\n.altrp-field-file__field{\n  display: none;\n}\n.altrp-field-file__placeholder{\n  display: none;\n}\n.altrp-field-file_empty .altrp-field-file__placeholder{\n  display: block;\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n  background-color: rgb(52,59,76);\n  color: #fff;\n}\n.input-clear-btn {\n  background: transparent;\n  padding: 0;\n  position: absolute;\n  bottom: calc(50% - 7px);\n  right: 15px;\n  display: none;\n}\n.input-clear-btn:hover {\n  font-weight: bold;\n}\n.altrp-field:hover + .input-clear-btn, .input-clear-btn:hover {\n  display: block;\n}\n.altrp-input-wrapper, .altrp-field-select2 {\n  position: relative;\n  flex-grow: 1;\n}\n.altrp-field-label--required::after {\n  content: \"*\";\n  color: red;\n  font-size: inherit;\n  padding-left: 10px;\n}\n.altrp-field-label {\n  font-size: 16px;\n  font-family: \"Open Sans\";\n  line-height: 1.5;\n  letter-spacing: 0;\n}\n.altrp-field-select2__single-value, .altrp-field {\n  font-size: 16px;\n  font-family: \"Open Sans\";\n  line-height: 1.5;\n  letter-spacing: 0;\n}\n.altrp-field-select2__control, .altrp-field {\n  text-align: left;\n  padding-top: 2px;\n  padding-right: 2px;\n  padding-bottom: 2px;\n  padding-left: 2px;\n  border-width: 1px;\n}\n.altrp-field-select2__control:hover{\n  border-width: 1px;\n}\n.altrp-field-container {\n  margin: 0;\n}\n.altrp-field::placeholder, .altrp-field-select2__placeholder {\n  font-size: 13px;\n  font-family: \"Open Sans\";\n  line-height: 1.5;\n  letter-spacing: 0;\n}\n.altrp-image-select {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n.altrp-image-select img {\n  flex-grow: 1;\n  object-fit: contain;\n}\n.altrp-field {\n  overflow: hidden;\n  cursor: pointer;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n.altrp-field.active {\n  border-color: lightcoral;\n}\n.altrp-field-label {\n  text-align: center;\n  display: block;\n}\n.altrp-pagination__select-size .altrp-field-select2__single-value {\n  font-size: 14px;\n}\n.altrp-pagination__select-size .altrp-field-select2__indicator-separator {\n  display: none;\n}\n.altrp-pagination__select-size .altrp-field-select2__indicator {\n  align-items: center;\n}\n.altrp-pagination__select-size .altrp-field-select2__control {\n  width: 100px;\n  min-height: 32px;\n  padding: 0;\n  border-radius: 0;\n  outline: none;\n  border-color: rgb(142,148,170);\n  -webkit-box-shadow: none;\n  -moz-box-shadow: none;\n  box-shadow: none;\n}\n.altrp-pagination__select-size .altrp-field-select2__control input {\n  border: none;\n}\n.altrp-field-select2 {\n  position: relative;\n  box-sizing: border-box;\n  pointer-events: none;\n}\n.altrp-field-select2__control {\n  webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  background-color: hsl(0,0%,100%);\n  border-color: hsl(0,0%,80%);\n  border-style: solid;\n  border-width: 1px;\n  cursor: default;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-wrap: wrap;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  -webkit-box-pack: justify;\n  -webkit-justify-content: space-between;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n  min-height: 38px;\n  outline: 0 !important;\n  position: relative;\n  -webkit-transition: all 100ms;\n  transition: all 100ms;\n  box-sizing: border-box;\n}\n.altrp-field-select2__value-container {\n  -webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  -webkit-flex-wrap: wrap;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  padding: 2px 8px;\n  -webkit-overflow-scrolling: touch;\n  position: relative;\n  overflow: hidden;\n  box-sizing: border-box;\n}\n.altrp-field-select2__single-value {\n  color: hsl(0,0%,20%);\n  margin-left: 2px;\n  margin-right: 2px;\n  max-width: calc(100% - 8px);\n  overflow: hidden;\n  position: absolute;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  top: 50%;\n  -webkit-transform: translateY(-50%);\n  -ms-transform: translateY(-50%);\n  transform: translateY(-50%);\n  box-sizing: border-box;\n}\n.altrp-field-select2__indicators {\n  -webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-align-self: stretch;\n  -ms-flex-item-align: stretch;\n  align-self: stretch;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-shrink: 0;\n  -ms-flex-negative: 0;\n  flex-shrink: 0;\n  box-sizing: border-box;\n}\n.altrp-field-select2__indicator-separator {\n  -webkit-align-self: stretch;\n  -ms-flex-item-align: stretch;\n  align-self: stretch;\n  background-color: hsl(0,0%,80%);\n  margin-bottom: 8px;\n  margin-top: 8px;\n  width: 1px;\n  box-sizing: border-box;\n}\n.altrp-field-select2__indicator {\n  color: hsl(0,0%,80%);\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  padding: 8px;\n  -webkit-transition: color 150ms;\n  transition: color 150ms;\n  box-sizing: border-box;\n  justify-content: center;\n  align-items: center;\n}\n.tba-placeholder {\n  display: flex;\n  justify-content: center;\n  font-size: 28px;\n  font-weight: bold;\n}\n.altrp-field-subgroup {\n  display: flex;\n  flex-wrap: wrap;\n}\n.altrp-field-option {\n  display: flex;\n  padding: 10px;\n}\n.altrp-field-option__label {\n  cursor: pointer;\n}\ntextarea.altrp-field {\n  display: block;\n}\n.altrp-table__filter-select .altrp-field-select2__placeholder {\n  white-space: nowrap;\n}\n.altrp-table__filter-select .altrp-field-select2__single-value {\n  font-size: 14px;\n}\n.altrp-table__filter-select .altrp-field-select2__indicator-separator {\n  display: none;\n}\n.altrp-table__filter-select .altrp-field-select2__indicator {\n  align-items: center;\n}\n.altrp-table__filter-select .altrp-field-select2__control {\n  width: 100%;\n  min-height: 19px;\n  padding: 0;\n  border-radius: 0;\n  outline: none;\n  border-color: rgb(142, 148, 170);\n  -webkit-box-shadow: none;\n  -moz-box-shadow: none;\n  box-shadow: none;\n}\n.altrp-table__filter-select .altrp-field-select2__control input {\n  border: none;\n}\n.altrp-table__filter-select .altrp-field-select2__value-container {\n  padding-top: 0;\n  padding-bottom: 0;\n  line-height: 13px;\n}\n.altrp-field-required {\n  color: red;\n  font-size: 18px;\n  padding-left: 10px;\n}\n.altrp-field-container-label {\n  display: flex;\n  flex-direction: row;\n}\n\n.altrp-field-label-container-left {\n  display: flex;\n  align-items: center;\n}\n\n.altrp-field-label-container {\n  display: inline-flex;\n  align-items: center;\n}\n.altrp-field-select2__indicator.altrp-field-select2__dropdown-indicator {\n  padding: 0 8px;\n  max-height: 14px;\n  overflow: hidden;\n}\n.altrp-field-select2 .altrp-field-select2__value-container {\n  padding: 0px 8px;\n}\n.altrp-field-select2 .css-b8ldur-Input {\n  padding-bottom: 0px;\n  padding-top: 0px;\n  margin: 0 2px;\n}\n.altrp-field-select2 .altrp-field-select2__control {\n  min-height: 14px;\n}\n`)\n\nconst AltrpFieldContainer = styled.div`\n  ${({ settings: { content_label_position_type } }) => {\n    switch (content_label_position_type) {\n      case \"left\": {\n        return \"display: flex\";\n      }\n      case \"right\": {\n        return \"display:flex;flex-direction:row-reverse;justify-content:flex-end;\";\n      }\n    }\n    return \"\";\n  }}\n`;\n\nclass InputTextWidget extends Component {\n  timeInput = null;\n\n  constructor(props) {\n    super(props);\n    props.element.component = this;\n    if (window.elementDecorator) {\n      window.elementDecorator(this);\n    }\n    this.onChange = this.onChange.bind(this);\n    this.debounceDispatch = this.debounceDispatch.bind(this);\n\n    this.defaultValue = this.getContent(\"content_default_value\") || \"\";\n    this.state = {\n      settings: { ...props.element.getSettings() },\n      value: this.defaultValue,\n      options: parseOptionsFromSettings(\n        props.element.getSettings(\"content_options\")\n      ),\n      paramsForUpdate: null\n    };\n    this.altrpSelectRef = React.createRef();\n    if (this.getContent(\"content_default_value\")) {\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\n    }\n  }\n\n  /**\n   * Чистит значение\n   */\n  clearValue() {\n    this.onChange(\"\");\n    this.dispatchFieldValueToStore(\"\", true);\n  }\n\n  /**\n   * Обработка нажатия клавиши\n   * @param {{}} e\n   */\n  handleEnter = e => {\n    if (e.keyCode === 13) {\n      e.preventDefault();\n      const inputs = Array.from(document.querySelectorAll(\"input,select\"));\n      const index = inputs.indexOf(e.target);\n      if (index === undefined) return;\n      inputs[index + 1] && inputs[index + 1].focus();\n      const {\n        create_allowed,\n        create_label,\n        create_url\n      } = this.props.element.getSettings();\n      if (create_allowed && create_label && create_url) {\n        this.createItem(e);\n      }\n    }\n  };\n\n  /**\n   * Загрузка виджета\n   * @param {{}} prevProps\n   * @param {{}} prevState\n   */\n  async _componentDidMount(prevProps, prevState) {\n    if (this.props.element.getSettings(\"content_options\")) {\n      let options = parseOptionsFromSettings(\n        this.props.element.getSettings(\"content_options\")\n      );\n\n      this.setState(state => ({ ...state, options }));\n    }\n\n    let value = this.state.value;\n\n    /**\n     * Если динамическое значение загрузилось,\n     * то используем this.getContent для получение этого динамического значения\n     * старые динамические данные\n     * */\n    if (\n      _.get(value, \"dynamic\") &&\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\n    ) {\n      value = this.getContent(\"content_default_value\");\n    }\n\n    /**\n     * Если модель обновилась при смене URL\n     */\n    if (\n      prevProps &&\n      !prevProps.currentModel.getProperty(\"altrpModelUpdated\") &&\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\n    ) {\n      value = this.getContent(\"content_default_value\");\n      this.setState(\n        state => ({ ...state, value, contentLoaded: true }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n      return;\n    }\n\n    if (\n      this.props.currentModel.getProperty(\"altrpModelUpdated\") &&\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\n      !this.state.contentLoaded\n    ) {\n      value = this.getContent(\"content_default_value\");\n      this.setState(\n        state => ({ ...state, value, contentLoaded: true }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n      return;\n    }\n\n    if (this.state.value !== value) {\n      this.setState(\n        state => ({ ...state, value }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n    }\n  }\n\n  /**\n   * Получить url для запросов\n   */\n  getRoute() {\n    let url = this.props.element.getSettings(\"model_for_options\");\n\n    if (url.indexOf(\"/\") === -1) {\n      return `/ajax/models/${url}_options`;\n    }\n    if (url.indexOf(\"{{\") !== -1) {\n      url = replaceContentWithData(url);\n    }\n    return url;\n  }\n\n  /**\n   * Обновление виджета\n   */\n  async _componentDidUpdate(prevProps, prevState) {\n    const { content_options, model_for_options } = this.state.settings;\n\n    if (\n      prevProps &&\n      !prevProps.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\")\n    ) {\n      let value = this.getContent(\n        \"content_default_value\",\n        this.props.element.getSettings(\"select2_multiple\")\n      );\n      this.setState(\n        state => ({ ...state, value, contentLoaded: true }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n    }\n\n    /**\n     * Если обновилась модель, то пробрасываем в стор новое значение (старый источник диамических данных)\n     */\n    if (\n      !_.isEqual(this.props.currentModel, prevProps.currentModel) &&\n      this.state.value &&\n      this.state.value.dynamic\n    ) {\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\n    }\n\n    /**\n     * Если обновилось хранилище данных формы, currentDataStorage или модель, то получаем новые опции c сервера\n     */\n    if (\n      this.props.formsStore !== prevProps.formsStore ||\n      this.props.currentModel !== prevProps.currentModel ||\n      this.props.currentDataStorage !== prevProps.currentDataStorage\n    ) {\n      this.updateOptions();\n    }\n    if (content_options && !model_for_options) {\n      let options = parseOptionsFromSettings(content_options);\n      if (!_.isEqual(options, this.state.options)) {\n        this.setState(state => ({ ...state, options }));\n      }\n    }\n    this.updateValue(prevProps);\n  }\n\n  /**\n   * Обновить значение если нужно\n   * @param {{}} prevProps\n   */\n  updateValue(prevProps) {\n\n    if (isEditor()) {\n      return;\n    }\n\n    let content_calculation = this.props.element.getSettings(\n      \"content_calculation\"\n    );\n    const altrpforms = this.props.formsStore;\n    const fieldName = this.props.element.getFieldId();\n    const formId = this.props.element.getFormId();\n\n    if (!content_calculation) {\n      /**\n       * Обновить значение, если formsStore изменилось из другого компонента\n       */\n      const path = `${formId}.${fieldName}`;\n      if (\n        this.props.formsStore !== prevProps.formsStore &&\n        _.get(altrpforms, path) !== this.state.value\n      ) {\n        this.setState(state => ({\n          ...state,\n          value: _.get(altrpforms, path)\n        }));\n      }\n      return;\n    }\n\n    const prevContext = {};\n    const altrpdata = this.props.currentDataStorage.getData();\n    const altrpmodel = this.props.currentModel.getData();\n    const altrpuser = this.props.currentUser.getData();\n    const altrppagestate = this.props.altrpPageState.getData();\n    const altrpresponses = this.props.altrpresponses.getData();\n    const altrpmeta = this.props.altrpMeta.getData();\n    const context = this.props.element.getCurrentModel().getData();\n\n    if (content_calculation.indexOf(\"altrpdata\") !== -1) {\n      context.altrpdata = altrpdata;\n      if (!altrpdata.currentDataStorageLoaded) {\n        prevContext.altrpdata = altrpdata;\n      } else {\n        prevContext.altrpdata = prevProps.currentDataStorage.getData();\n      }\n    }\n\n    if (content_calculation.indexOf(\"altrpforms\") !== -1) {\n      context.altrpforms = altrpforms;\n      /**\n       * Не производим вычисления, если изменилось текущее поле\n       */\n      if (`${formId}.${fieldName}` === altrpforms.changedField) {\n        prevContext.altrpforms = altrpforms;\n      } else {\n        prevContext.altrpforms = prevProps.formsStore;\n      }\n    }\n\n    if (content_calculation.indexOf(\"altrpmodel\") !== -1) {\n      context.altrpmodel = altrpmodel;\n      prevContext.altrpmodel = prevProps.currentModel.getData();\n    }\n\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\n      context.altrpuser = altrpuser;\n      prevContext.altrpuser = prevProps.currentUser.getData();\n    }\n\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\n      context.altrpuser = altrpuser;\n      prevContext.altrpuser = prevProps.currentUser.getData();\n    }\n\n    if (content_calculation.indexOf(\"altrppagestate\") !== -1) {\n      context.altrppagestate = altrppagestate;\n      prevContext.altrppagestate = prevProps.altrpPageState.getData();\n    }\n\n    if (content_calculation.indexOf(\"altrpmeta\") !== -1) {\n      context.altrpmeta = altrpmeta;\n      prevContext.altrpmeta = prevProps.altrpMeta.getData();\n    }\n\n    if (content_calculation.indexOf(\"altrpresponses\") !== -1) {\n      context.altrpresponses = altrpresponses;\n      prevContext.altrpresponses = prevProps.altrpresponses.getData();\n    }\n\n    if (content_calculation.indexOf(\"altrpstorage\") !== -1) {\n      context.altrpstorage = getDataFromLocalStorage(\"altrpstorage\", {});\n    }\n\n    if (\n      _.isEqual(prevProps.currentDataStorage, this.props.currentDataStorage) &&\n      _.isEqual(prevProps.currentUser, this.props.currentUser) &&\n      _.isEqual(prevProps.formsStore, this.props.formsStore) &&\n      _.isEqual(prevProps.altrpPageState, this.props.altrpPageState) &&\n      _.isEqual(prevProps.altrpMeta, this.props.altrpMeta) &&\n      _.isEqual(prevProps.altrpresponses, this.props.altrpresponses) &&\n      _.isEqual(prevProps.currentModel, this.props.currentModel)\n    ) {\n      return;\n    }\n\n    if (\n      !_.isEqual(prevProps.formsStore, this.props.formsStore) &&\n      `${formId}.${fieldName}` === altrpforms.changedField\n    ) {\n      return;\n    }\n\n    let value = \"\";\n\n    try {\n      content_calculation = content_calculation\n        .replace(/}}/g, \"')\")\n        .replace(/{{/g, \"_.get(context, '\");\n      value = eval(content_calculation);\n      if (value === this.state.value) {\n        return;\n      }\n      this.setState(\n        state => ({ ...state, value }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n    } catch (e) {\n      console.error(\n        \"Evaluate error in Input: '\" + e.message + \"'\",\n        this.props.element.getId()\n      );\n    }\n  }\n\n  /**\n   * Обновляет опции для селекта при обновлении данных, полей формы\n   */\n  async updateOptions() {\n    {\n      let formId = this.props.element.getFormId();\n      let paramsForUpdate = this.props.element.getSettings(\"params_for_update\");\n      let formData = _.get(this.props.formsStore, [formId], {});\n      paramsForUpdate = parseParamsFromString(\n        paramsForUpdate,\n        new AltrpModel(formData)\n      );\n      /**\n       * Сохраняем параметры запроса, и если надо обновляем опции\n       */\n      let options = [...this.state.options];\n\n      if (!_.isEqual(paramsForUpdate, this.state.paramsForUpdate)) {\n        if (!_.isEmpty(paramsForUpdate)) {\n          if (this.props.element.getSettings(\"params_as_filters\", false)) {\n            paramsForUpdate = JSON.stringify(paramsForUpdate);\n            options = await new Resource({\n              route: this.getRoute()\n            }).getQueried({ filters: paramsForUpdate });\n          } else {\n            options = await new Resource({ route: this.getRoute() }).getQueried(\n              paramsForUpdate\n            );\n          }\n          options = !_.isArray(options) ? options.data : options;\n          options = _.isArray(options) ? options : [];\n        } else if (this.state.paramsForUpdate) {\n          options = await new Resource({ route: this.getRoute() }).getAll();\n          options = !_.isArray(options) ? options.data : options;\n          options = _.isArray(options) ? options : [];\n        }\n\n        this.setState(state => ({\n          ...state,\n          paramsForUpdate,\n          options\n        }));\n      }\n    }\n  }\n\n  /**\n   * Изменение значения в виджете\n   * @param e\n   * @param  editor для получения изменений из CKEditor\n   */\n  onChange(e, editor = null) {\n    let value = \"\";\n    let valueToDispatch;\n\n    if (e && e.target) {\n      value = e.target.value;\n    }\n\n    if (e && e.value) {\n      value = e.value;\n    }\n\n    if (_.get(editor, \"getData\")) {\n      value = `<div class=\"ck ck-content\" style=\"width:100%\">${editor.getData()}</div>`;\n    }\n\n    if (_.isArray(e)) {\n      value = _.cloneDeep(e);\n    }\n\n    if (\n      this.props.element.getSettings(\"content_options_nullable\") &&\n      e &&\n      e.value === \"<null>\"\n    ) {\n      value = null;\n    }\n\n    this.setState(\n      state => ({\n        ...state,\n        value\n      }),\n      () => {\n        /**\n         * Обновляем хранилище только если не текстовое поле\n         */\n\n        const change_actions = this.props.element.getSettings(\"change_actions\");\n        const change_change_end = this.props.element.getSettings(\n          \"change_change_end\"\n        );\n        const change_change_end_delay = this.props.element.getSettings(\n          \"change_change_end_delay\"\n        );\n\n        if (change_actions && !change_change_end && !isEditor()) {\n          this.debounceDispatch(\n            valueToDispatch !== undefined ? valueToDispatch : value\n          );\n        }\n        if (change_actions && change_change_end && !isEditor()) {\n          this.timeInput && clearTimeout(this.timeInput);\n          this.timeInput = setTimeout(() => {\n            this.debounceDispatch(\n              valueToDispatch !== undefined ? valueToDispatch : value\n            );\n          }, change_change_end_delay);\n        }\n      }\n    );\n  }\n\n  debounceDispatch = _.debounce(\n    value => this.dispatchFieldValueToStore(value, true),\n    150\n  );\n\n  /**\n   * получить опции\n   */\n  getOptions() {\n    let options = [...this.state.options];\n    const optionsDynamicSetting = this.props.element.getDynamicSetting(\n      \"content_options\"\n    );\n\n    if (optionsDynamicSetting) {\n      options = convertData(optionsDynamicSetting, options);\n    }\n\n    if (!this.props.element.getSettings(\"sort_default\")) {\n      options = _.sortBy(options, o => o && (o.label ? o.label.toString() : o));\n    }\n\n    return options;\n  }\n\n  /**\n   * Для действие по фокусу\n   * @param e\n   * @return {Promise<void>}\n   */\n\n  onFocus = async e => {\n    const focus_actions = this.props.element.getSettings(\"focus_actions\");\n\n    if (focus_actions && !isEditor()) {\n      const actionsManager = (\n        await import(\n          /* webpackChunkName: 'ActionsManager' */\n          \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\n        )\n      ).default;\n      await actionsManager.callAllWidgetActions(\n        this.props.element.getIdForAction(),\n        \"focus\",\n        focus_actions,\n        this.props.element\n      );\n    }\n  };\n\n  /**\n   * Потеря фокуса для оптимизации\n   * @param  e\n   * @param  editor для получения изменений из CKEditor\n   */\n\n  onBlur = async (e, editor = null) => {\n    this.dispatchFieldValueToStore(e.target.value, true);\n\n    if (_.get(editor, \"getData\")) {\n      this.dispatchFieldValueToStore(editor.getData(), true);\n    }\n\n    if (this.props.element.getSettings(\"actions\", []) && !isEditor()) {\n      const actionsManager = (\n        await import(\n          /* webpackChunkName: 'ActionsManager' */\n          \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\n        )\n      ).default;\n      await actionsManager.callAllWidgetActions(\n        this.props.element.getIdForAction(),\n        \"blur\",\n        this.props.element.getSettings(\"actions\", []),\n        this.props.element\n      );\n    }\n  };\n\n  /**\n   * Передадим значение в хранилище формы\n   * @param {*} value\n   * @param {boolean} userInput true - имзенилось пользователем\n   */\n  dispatchFieldValueToStore = async (value, userInput = false) => {\n    let formId = this.props.element.getFormId();\n    let fieldName = this.props.element.getFieldId();\n\n    if (fieldName.indexOf(\"{{\") !== -1) {\n      fieldName = replaceContentWithData(fieldName);\n    }\n\n    if (_.isObject(this.props.appStore) && fieldName && formId) {\n      this.props.appStore.dispatch(\n        changeFormFieldValue(fieldName, value, formId, userInput)\n      );\n\n      if (userInput) {\n        const change_actions = this.props.element.getSettings(\"change_actions\");\n\n        if (change_actions && !isEditor()) {\n          const actionsManager = (\n            await import(\n              /* webpackChunkName: 'ActionsManager' */\n              \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\n            )\n          ).default;\n          await actionsManager.callAllWidgetActions(\n            this.props.element.getIdForAction(),\n            \"change\",\n            change_actions,\n            this.props.element\n          );\n        }\n      }\n    }\n  };\n\n  /**\n   * Обработка добавления опции по ajax\n   * @param {SyntheticKeyboardEvent} e\n   */\n  createItem = async e => {\n    const keyCode = e.keyCode;\n    const { value: inputValue } = e.target;\n\n    if (keyCode !== 13 || !inputValue) {\n      return;\n    }\n\n    const {\n      create_url,\n      create_label,\n      create_data,\n      select2_multiple\n    } = this.props.element.getSettings();\n\n    if (!create_label && !create_url) {\n      return;\n    }\n\n    const currentModel = this.props.element.getCurrentModel();\n    let data = parseParamsFromString(create_data, currentModel, true);\n    data[create_label] = inputValue;\n    let url = parseURLTemplate(create_url, currentModel.getData());\n    this.setState(state => ({ ...state, isDisabled: true }));\n\n    try {\n      const resource = new Resource({\n        route: url\n      });\n      let res = await resource.post(data);\n\n      if (res.success && _.get(res, \"data.id\")) {\n        let newOption = {\n          label: inputValue,\n          value: _.get(res, \"data.id\")\n        };\n\n        this.setState(\n          state => ({ ...state, isDisabled: false }),\n          () => {\n            let options = [...this.state.options];\n            options.unshift(newOption);\n            let value = this.state.value;\n            if (select2_multiple) {\n              value = value ? [...value] : [];\n              value.push(_.get(res, \"data.id\"));\n            } else {\n              value = _.get(res, \"data.id\");\n            }\n\n            this.setState(\n              state => ({ ...state, options, value }),\n              () => {\n                const selectStateManager = _.get(\n                  this,\n                  \"altrpSelectRef.current.selectRef.current\"\n                );\n\n                if (selectStateManager) {\n                  selectStateManager.setState({\n                    menuIsOpen: false,\n                    inputValue: \"\"\n                  });\n                }\n              }\n            );\n          }\n        );\n      }\n      this.setState(state => ({ ...state, isDisabled: false }));\n    } catch (error) {\n      console.error(error);\n      this.setState(state => ({ ...state, isDisabled: false }));\n    }\n  };\n\n  /**\n   * Взовращает имя для атрибута name\n   * @return {string}\n   */\n  getName() {\n    return `${this.props.element.getFormId()}[${this.props.element.getFieldId()}]`;\n  }\n\n  render() {\n    let label = null;\n    const settings = this.props.element.getSettings();\n    const {\n      content_readonly,\n      select2_multiple: isMultiple,\n      label_icon\n    } = settings;\n\n    let value = this.state.value;\n\n    if (\n      _.get(value, \"dynamic\") &&\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\n    ) {\n      value = this.getContent(\"content_default_value\");\n    }\n\n    /**\n     * Пока динамический контент загружается (Еесли это динамический контент),\n     * нужно вывести пустую строку\n     */\n\n    if (value && value.dynamic) {\n      value = \"\";\n    }\n\n    let classLabel = \"\";\n    let styleLabel = {};\n    const content_label_position_type = this.props.element.getResponsiveSetting(\n      \"content_label_position_type\"\n    );\n\n    switch (content_label_position_type) {\n      case \"top\":\n        styleLabel = {\n          marginBottom: this.state.settings.label_style_spacing\n            ? this.state.settings.label_style_spacing.size +\n            this.state.settings.label_style_spacing.unit\n            : 2 + \"px\"\n        };\n        classLabel = \"\";\n        break;\n      case \"bottom\":\n        styleLabel = {\n          marginTop: this.state.settings.label_style_spacing\n            ? this.state.settings.label_style_spacing.size +\n            this.state.settings.label_style_spacing.unit\n            : 2 + \"px\"\n        };\n        classLabel = \"\";\n        break;\n      case \"left\":\n        styleLabel = {\n          marginRight: this.state.settings.label_style_spacing\n            ? this.state.settings.label_style_spacing.size +\n            this.state.settings.label_style_spacing.unit\n            : 2 + \"px\"\n        };\n        classLabel = \"altrp-field-label-container-left\";\n        break;\n      case \"absolute\":\n        styleLabel = {\n          position: \"absolute\",\n          zIndex: 2\n        };\n        classLabel = \"\";\n        break;\n    }\n\n    if (this.state.settings.content_label) {\n      label = (\n        <div\n          className={\"altrp-field-label-container \" + classLabel}\n          style={styleLabel}\n        >\n          <label\n            className={`altrp-field-label ${this.state.settings.content_required\n              ? \"altrp-field-label--required\"\n              : \"\"\n              }`}\n          >\n            {this.state.settings.content_label}\n          </label>\n          {label_icon && label_icon.assetType && (\n            <span className=\"altrp-label-icon\">\n              {renderAssetIcon(label_icon)}\n            </span>\n          )}\n        </div>\n      );\n    } else {\n      label = null;\n    }\n\n    let autocomplete = \"off\";\n    if (this.state.settings.content_autocomplete) {\n      autocomplete = \"on\";\n    } else {\n      autocomplete = \"off\";\n    }\n\n    const isClearable = this.state.settings.content_clearable;\n\n    const input = (\n      <div className=\"altrp-input-wrapper\">\n        <AltrpInput\n          type=\"text\"\n          name={this.getName()}\n          value={value || \"\"}\n          element={this.props.element}\n          readOnly={content_readonly}\n          autoComplete={autocomplete}\n          placeholder={this.state.settings.content_placeholder}\n          className={\n            \"altrp-field \" + this.state.settings.position_css_classes\n          }\n          settings={this.props.element.getSettings()}\n          onKeyDown={this.handleEnter}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          id={this.state.settings.position_css_id}\n        />\n        {isClearable && (\n          <button\n            className=\"input-clear-btn\"\n            onClick={() => this.setState({ value: this.defaultValue })}\n          >\n            ✖\n          </button>\n        )}\n      </div>\n    );\n\n    return (\n      <AltrpFieldContainer\n        settings={settings}\n        className=\"altrp-field-container \"\n      >\n        {content_label_position_type === \"top\" ? label : \"\"}\n        {content_label_position_type === \"left\" ? label : \"\"}\n        {content_label_position_type === \"right\" ? label : \"\"}\n        {content_label_position_type === \"absolute\" ? label : \"\"}\n        {/* .altrp-field-label-container */}\n        {input}\n        {content_label_position_type === \"bottom\" ? label : \"\"}\n      </AltrpFieldContainer>\n    );\n  }\n}\n\nexport default InputTextWidget;\n"],"sourceRoot":""}