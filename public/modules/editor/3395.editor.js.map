{"version":3,"sources":["webpack:///./resources/modules/admin/src/components/dashboard/widgets/d3/Tooltip.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/d3/TooltipBar.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/d3/TooltipPie.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/d3/TooltipScatter.js"],"names":["Tooltip","props","state","enablebar","datum","enable","point","data","settings","keyIsDate","containerSettings","bind","prevProps","prevState","_","isEqual","this","setState","s","settenableings","padding","top","right","bottom","left","borderStyle","borderRadius","borderColor","borderWidth","backgroundColor","color","width","flexDirection","className","widgetID","style","undefined","tooltip","whiteSpace","display","alignItems","height","background","marginRight","xFormatted","x","y","map","item","index","React","Fragment","key","label","value","yFormatted","fontSize","boxShadow","PureComponent","TooltipBar","indexValue","customTooltip","TooltipPie","console","log","TooltipScatter","node","formattedX","formattedY"],"mappings":"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","file":"3395.editor.js","sourcesContent":["import { PureComponent } from \"react\";\n// import { Component } from \"react\";\n\n/**\n * Tooltip для Line и Scatter\n */\nclass Tooltip extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      enablebar: props.datum.enable,\n      enable: props.enable,\n      point: props.datum.point,\n      data: props.datum.point.data,\n      settings: props?.settings,\n      keyIsDate: props?.keyIsDate\n    };\n\n    this.containerSettings = this.containerSettings.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (!_.isEqual(prevProps.datum.point, this.props.datum.point)) {\n      this.setState(s => ({\n        ...s,\n        point: this.props.datum.point,\n        data: this.props.datum.point.data\n      }));\n    }\n    if (!_.isEqual(prevProps.settings, this.props.settings)) {\n      this.setState(s => ({\n        ...s,\n        settings: this.props?.settings\n      }));\n    }\n    if (!_.isEqual(prevProps.enable, this.props.enable)) {\n      this.setState(s => ({\n        ...s,\n        settenableings: this.props?.enable\n      }));\n    }\n  }\n\n  containerSettings() {\n    const settings = this.state?.settings || {};\n\n    const result = {\n      padding: `${settings?.padding?.top || 5}px ${settings?.padding?.right ||\n        5}px ${settings?.padding?.bottom || 5}px ${settings?.padding?.left ||\n        5}px`,\n      borderStyle: `${settings?.borderStyle || \"solid\"}`,\n      borderRadius: `${settings?.borderRadius || \"4px\"}`,\n      borderColor: `${settings?.borderColor || \"black\"}`,\n      borderWidth: `${settings?.borderWidth || \"1px\"}`,\n      backgroundColor: `${settings?.backgroundColor || \"red\"}`,\n      color: \"white\",\n      width: \"fit-content\",\n      flexDirection: \"column-reverse\"\n    };\n    return result;\n  }\n\n  render() {\n    if (this.state.enable) {\n      return (\n        <>\n          <div\n            className={`${this.props.widgetID} altrp-dashboard__tooltip--label-background altrp-dashboard__tooltip--width altrp-dashboard__tooltip--label-background-shadow altrp-dashboard__tooltip--border-type altrp-dashboard__tooltip--border-width altrp-dashboard__tooltip--border-color col-12`}\n            style={{ padding: \"5px 9px\" }}\n          >\n            <div>\n            {this.state.data?.tooltip === undefined &&\n              <div style={{\n                whiteSpace: \"pre\",\n                display: \"flex\",\n                alignItems: \"center\"\n              }}>\n                <span\n                  style={{\n                    display: \"block\",\n                    width: \"12px\",\n                    height: \"12px\",\n                    background: this.state.point.color,\n                    marginRight: \"7px\"\n                  }}\n                >\n                </span>\n                <div\n                  className={`${this.props.widgetID} altrp-dashboard__tooltip--font col px-0`}\n                >\n                  {this.props.keyIsDate\n                  ? this.state.data.xFormatted\n                  : this.state.data.x}\n                  :\n                  <strong\n                    className={`${this.props.widgetID} altrp-dashboard__tooltip--font col px-0`}\n                  >\n                    {this.state.data.y}\n                  </strong>\n                </div>\n              </div>\n              }\n              {this.state.data?.tooltip?.map((item, index) => {\n                return (\n                  <React.Fragment>\n                    <div\n                      style={{\n                        color: item?.color || \"#000000\"\n                      }}\n                      key={index}\n                    >\n                      {`${item?.label}:`}\n                      <strong>{item.value}</strong>\n                    </div>\n                  </React.Fragment>\n                );\n              })}\n            </div>\n          </div>\n        </>\n      );\n    }\n    //Дефолтный тултип\n    const { xFormatted, yFormatted } = this.state.data;\n    return (\n      <>\n        <div\n          style={{\n            background: \"white\",\n            color: \"inherit\",\n            fontSize: \"{{SIZE}}px\",\n            borderRadius: \"2px\",\n            boxShadow: \"rgba(0, 0, 0, 0.25) 0px 1px 2px\",\n            padding: \"5px 9px\"\n          }}\n        >\n          <div\n            style={{\n              whiteSpace: \"pre\",\n              display: \"flex\",\n              alignItems: \"center\"\n            }}\n          >\n            <span\n              style={{\n                display: \"block\",\n                width: \"12px\",\n                height: \"12px\",\n                background: this.state.point.color,\n                marginRight: \"7px\"\n              }}\n            ></span>\n            <span>\n              {xFormatted}: <strong>{yFormatted}</strong>\n            </span>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Tooltip;\n","import React, { PureComponent } from \"react\";\r\n\r\nclass TooltipBar extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      indexValue: props.datum?.indexValue,\r\n      value: props.datum?.value,\r\n      color: props.datum?.color,\r\n      enable: props?.enable,\r\n      settings: props?.settings\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (!_.isEqual(prevProps.enable, this.props.enable)) {\r\n      this.setState(s => ({\r\n        ...s,\r\n        enable: this.props?.enable\r\n      }));\r\n    }\r\n  }\r\n\r\n  customTooltip() {\r\n    return (\r\n      <>\r\n        <div\r\n          className={`${this.props.widgetID} altrp-dashboard__tooltip--font altrp-dashboard__tooltip--label-background altrp-dashboard__tooltip--width altrp-dashboard__tooltip--label-background-shadow altrp-dashboard__tooltip--border-type altrp-dashboard__tooltip--border-width altrp-dashboard__tooltip--border-color  col-12`}\r\n          style={{ padding: \"5px 9px\" }}\r\n        >\r\n          <div>\r\n            {this.props.datum?.data?.tooltip === undefined &&\r\n            <div style={\r\n              {\r\n                whiteSpace: \"pre\",\r\n                display: \"flex\",\r\n                alignItems: \"center\"\r\n              }\r\n            }>\r\n              <span\r\n                style={{\r\n                  display: \"block\",\r\n                  width: \"12px\",\r\n                  height: \"12px\",\r\n                  background: this.props.datum.color,\r\n                  marginRight: \"7px\"\r\n                }}\r\n              >  \r\n              </span>\r\n              <div className={`${this.props.widgetID} col px-0`}>\r\n                  {this.props.datum.data.key}:{\" \"}\r\n                  <strong\r\n                    className={`${this.props.widgetID} altrp-dashboard__tooltip--font col px-0`}\r\n                  >\r\n                    {this.props.datum.data.value}\r\n                  </strong>\r\n                </div>\r\n              </div>\r\n            }\r\n            {this.props.datum?.data?.tooltip?.map((item, index) => {\r\n              return (\r\n                <div\r\n                  style={{\r\n                    color: item?.color || \"#000000\"\r\n                  }}\r\n                  key={index}\r\n                >\r\n                  {`${item?.label}:`}\r\n                  <strong>{item.value}</strong>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (this.state.enable) {\r\n      return this.customTooltip();\r\n    }\r\n    return (\r\n      <>\r\n        <div\r\n          style={{\r\n            color: \"inherit\",\r\n            fontSize: \"{{SIZE}}px\",\r\n            borderRadius: \"2px\",   \r\n            padding: \"3px 9px\"\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              whiteSpace: \"pre\",\r\n              display: \"flex\",\r\n              alignItems: \"center\"\r\n            }}\r\n          >\r\n            <span\r\n              style={{\r\n                display: \"block\",\r\n                width: \"12px\",\r\n                height: \"12px\",\r\n                background: this.props.datum.color,\r\n                marginRight: \"7px\"\r\n              }}\r\n            ></span>\r\n            <span>\r\n              {this.props.datum.data.key}:{\" \"}\r\n              <strong>{this.props.datum.data.value}</strong>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TooltipBar;\r\n","import React, { PureComponent } from \"react\";\r\n\r\nclass TooltipPie extends PureComponent {\r\n  constructor(props) {\r\n    console.log(props.datum);\r\n    super(props);\r\n\r\n    this.state = {\r\n      indexValue: props.datum?.indexValue,\r\n      value: props.datum?.value,\r\n      color: props.datum?.color,\r\n      enable: props?.enable,\r\n      settings: props?.settings\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (!_.isEqual(prevProps.enable, this.props.enable)) {\r\n      this.setState(s => ({\r\n        ...s,\r\n        enable: this.props?.enable\r\n      }));\r\n    }\r\n  }\r\n\r\n  customTooltip() {\r\n    return (\r\n      <>\r\n        <div\r\n          className={`${this.props.widgetID} altrp-dashboard__tooltip--font altrp-dashboard__tooltip--label-background altrp-dashboard__tooltip--width altrp-dashboard__tooltip--label-background-shadow altrp-dashboard__tooltip--border-type altrp-dashboard__tooltip--border-width altrp-dashboard__tooltip--border-color col-12`}\r\n          style={{ padding: \"5px 9px\" }}\r\n        >\r\n          <div>\r\n            {this.props.datum?.datum?.data?.tooltip === undefined &&\r\n              <div style={\r\n              {\r\n                whiteSpace: \"pre\",\r\n                display: \"flex\",\r\n                alignItems: \"center\"\r\n              }\r\n            }>\r\n                <span\r\n                style={{\r\n                  display: \"block\",\r\n                  width: \"12px\",\r\n                  height: \"12px\",\r\n                  background: this.props.datum.datum.color,\r\n                  marginRight: \"7px\"\r\n                }}\r\n                ></span>\r\n                <div\r\n                  className={`${this.props.widgetID} altrp-dashboard__tooltip--font col px-0`}\r\n                >\r\n                  {this.props.datum.datum.label}:{\" \"}\r\n                  <strong\r\n                    className={`${this.props.widgetID} altrp-dashboard__tooltip--font col px-0`}\r\n                  >\r\n                    {this.props.datum.datum.value}\r\n                  </strong>\r\n                </div>\r\n              </div>\r\n            }\r\n            {this.props.datum?.datum?.data?.tooltip?.map((item, index) => {\r\n              return (\r\n                <div\r\n                  style={{\r\n                    color: item?.color || \"#000000\"\r\n                  }}\r\n                  key={index}\r\n                >\r\n                  {`${item?.label}:`}\r\n                  <strong>{item.value}</strong>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (this.state.enable) {\r\n      return this.customTooltip();\r\n    }\r\n    return (\r\n      <>\r\n        <div\r\n          style={{\r\n            background: \"white\",\r\n            color: \"inherit\",\r\n            fontSize: \"{{SIZE}}px\",\r\n            borderRadius: \"2px\",\r\n            boxShadow: \"rgba(0, 0, 0, 0.25) 0px 1px 2px\",\r\n            padding: \"5px 9px\"\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              whiteSpace: \"pre\",\r\n              display: \"flex\",\r\n              alignItems: \"center\"\r\n            }}\r\n          >\r\n            <span\r\n              style={{\r\n                display: \"block\",\r\n                width: \"12px\",\r\n                height: \"12px\",\r\n                background: this.props.datum.datum.color,\r\n                marginRight: \"7px\"\r\n              }}\r\n            ></span>\r\n            <span>\r\n              {this.props.datum.datum.label}:{\" \"}\r\n              <strong>{this.props.datum.datum.value}</strong>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TooltipPie;\r\n","import React, { PureComponent } from \"react\";\r\n\r\nclass TooltipScatter extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      indexValue: props.datum?.indexValue,\r\n      value: props.datum?.value,\r\n      color: props.datum?.color,\r\n      enable: props?.enable,\r\n      settings: props?.settings,\r\n      data: props.datum?.node?.data\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (!_.isEqual(prevProps.enable, this.props.enable)) {\r\n      this.setState(s => ({\r\n        ...s,\r\n        enable: this.props?.enable\r\n      }));\r\n    }\r\n  }\r\n\r\n  customTooltip() {\r\n    return (\r\n      <>\r\n        <div\r\n          className={`${this.props.widgetID} altrp-dashboard__tooltip--label-background altrp-dashboard__tooltip--width altrp-dashboard__tooltip--label-background-shadow altrp-dashboard__tooltip--border-type altrp-dashboard__tooltip--border-width altrp-dashboard__tooltip--border-color col-12`}\r\n          style={{ padding: \"5px 9px\" }}\r\n        >\r\n          <div>\r\n          {this.props.datum.node.data?.tooltip === undefined &&\r\n            <div\r\n              className={`${this.props.widgetID} altrp-dashboard__tooltip--font col px-0`}\r\n              style={{\r\n                whiteSpace: \"pre\",\r\n                display: \"flex\",\r\n                alignItems: \"center\"\r\n              }}\r\n            >\r\n              <span\r\n                style={{\r\n                  display: \"block\",\r\n                  width: \"12px\",\r\n                  height: \"12px\",\r\n                  background: this.props.datum.node.style.color,\r\n                  marginRight: \"7px\"\r\n                }}\r\n              ></span>\r\n              {this.props.datum.node.data.formattedX}:{\" \"}\r\n              <strong\r\n                className={`${this.props.widgetID} altrp-dashboard__tooltip--font col px-0`}\r\n              >\r\n                {this.props.datum.node.data.formattedY}\r\n              </strong>\r\n            </div>\r\n            }\r\n            {this.props.datum.node.data?.tooltip?.map((item, index) => {\r\n              return (\r\n                <div\r\n                  style={{\r\n                    color: item?.color || \"#000000\"\r\n                  }}\r\n                  key={index}\r\n                >\r\n                  {`${item?.label}:`}\r\n                  <strong>{item.value}</strong>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (this.state.enable) {\r\n      return this.customTooltip();\r\n    }\r\n    return (\r\n      <>\r\n        <div\r\n          style={{\r\n            background: \"white\",\r\n            color: \"inherit\",\r\n            fontSize: \"{{SIZE}}px\",\r\n            borderRadius: \"2px\",\r\n            boxShadow: \"rgba(0, 0, 0, 0.25) 0px 1px 2px\",\r\n            padding: \"5px 9px\"\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              whiteSpace: \"pre\",\r\n              display: \"flex\",\r\n              alignItems: \"center\"\r\n            }}\r\n          >\r\n            <span\r\n              style={{\r\n                display: \"block\",\r\n                width: \"12px\",\r\n                height: \"12px\",\r\n                background: this.props.datum.node.style.color,\r\n                marginRight: \"7px\"\r\n              }}\r\n            ></span>\r\n            <span>\r\n              {this.props.datum.node.data.formattedX}:{\" \"}\r\n              <strong>{this.props.datum.node.data.formattedY}</strong>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TooltipScatter;\r\n"],"sourceRoot":""}