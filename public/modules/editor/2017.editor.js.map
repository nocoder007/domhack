{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/components/widgets/InputWidget.js"],"names":["moment","window","altrpHelpers","globalDefaults","push","AltrpFieldContainer","styled","div","settings","content_label_position_type","InputWidget","props","timeInput","handleEnter","e","keyCode","preventDefault","inputs","Array","from","document","querySelectorAll","index","indexOf","target","undefined","focus","element","getSettings","create_allowed","create_label","create_url","createItem","debounceDispatch","_","debounce","value","dispatchFieldValueToStore","onFocus","focus_actions","isEditor","actionsManager","default","callAllWidgetActions","getIdForAction","onBlur","editor","state","content_type","get","getData","userInput","formId","getFormId","fieldName","getFieldId","replaceContentWithData","isObject","appStore","dispatch","changeFormFieldValue","change_actions","inputValue","create_data","select2_multiple","currentModel","getCurrentModel","data","parseParamsFromString","url","parseURLTemplate","setState","isDisabled","resource","Resource","route","post","res","success","newOption","label","options","unshift","selectStateManager","menuIsOpen","console","error","component","elementDecorator","onChange","bind","defaultValue","getContent","valueMustArray","isArray","parseOptionsFromSettings","paramsForUpdate","altrpSelectRef","React","createRef","this","optionsDynamicSetting","getDynamicSetting","convertData","map","prevProps","prevState","model_for_options","getRoute","getAll","getProperty","contentLoaded","currentDataStorage","content_options","isEqual","dynamic","formsStore","updateOptions","updateValue","content_calculation","altrpforms","prevContext","altrpdata","altrpmodel","altrpuser","currentUser","altrppagestate","altrpPageState","altrpresponses","altrpmeta","altrpMeta","context","currentDataStorageLoaded","changedField","altrpstorage","getDataFromLocalStorage","replace","eval","message","getId","path","formData","AltrpModel","isEmpty","JSON","stringify","getQueried","filters","valueToDispatch","getElementsByName","name","forEach","input","checked","_value","trueValue","falseValue","valueReplacement","cloneDeep","item","timestamp","isDate","Date","getTime","change_change_end","change_change_end_delay","clearTimeout","setTimeout","sortBy","o","toString","options_sorting","content_readonly","image_select_options","isMultiple","label_icon","classLabel","styleLabel","getResponsiveSetting","marginBottom","label_style_spacing","size","unit","marginTop","marginRight","position","zIndex","content_label","className","style","content_required","assetType","renderAssetIcon","autocomplete","content_autocomplete","getOptions","getName","onKeyDown","id","position_css_id","position_css_classes","content_options_nullable","sortOptions","option","key","renderSelect2","renderRepeatedInput","renderWysiwyg","readOnly","autoComplete","placeholder","content_placeholder","changeHandler","renderAcceptInput","isClearable","content_clearable","unix","isValid","format","log","type","onClick","Math","random","substr","formID","inputType","idx","altrpCompare","htmlFor","nulled_option_title","v","_v","valueItem","union","select2Props","classNamePrefix","ref","find","isOptionSelected","isNumber","isString","includes","isMulti","changeText","text","Component"],"mappings":"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","file":"2017.editor.js","sourcesContent":["import {\n  altrpCompare,\n  convertData,\n  isEditor,\n  parseOptionsFromSettings,\n  parseParamsFromString,\n  parseURLTemplate,\n  replaceContentWithData,\n  sortOptions,\n  renderAssetIcon,\n  valueReplacement,\n  getDataFromLocalStorage\n} from \"../../../../../front-app/src/js/helpers\";\nimport Resource from \"../../classes/Resource\";\nimport AltrpSelect from \"../../../../../admin/src/components/altrp-select/AltrpSelect\";\nimport { changeFormFieldValue } from \"../../../../../front-app/src/js/store/forms-data-storage/actions\";\nimport AltrpModel from \"../../classes/AltrpModel\";\nimport CKeditor from \"../ckeditor/CKeditor\";\nimport AltrpImageSelect from \"../altrp-image-select/AltrpImageSelect\";\nimport AltrpInput from \"../altrp-input/AltrpInput\";\nconst {moment} = window.altrpHelpers;\n\n(window.globalDefaults = window.globalDefaults || []).push(`\n.altrp-field {\n  border-style: solid;\n  width: 100%;\n}\n.altrp-field-file{\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n}\n\n.altrp-label-icon svg,\n.altrp-label-icon img {\n  width: 20px;\n}\n.altrp-label-icon svg{\n  height: 20px;\n}\n.altrp-field-file__field{\n  display: none;\n}\n.altrp-field-file__placeholder{\n  display: none;\n}\n.altrp-field-file_empty .altrp-field-file__placeholder{\n  display: block;\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n  background-color: rgb(52,59,76);\n  color: #fff;\n}\n.input-clear-btn {\n  background: transparent;\n  padding: 0;\n  position: absolute;\n  bottom: calc(50% - 7px);\n  right: 15px;\n  display: none;\n}\n.input-clear-btn:hover {\n  font-weight: bold;\n}\n.altrp-field:hover + .input-clear-btn, .input-clear-btn:hover {\n  display: block;\n}\n.altrp-input-wrapper, .altrp-field-select2 {\n  position: relative;\n  flex-grow: 1;\n}\n.altrp-field-label--required::after {\n  content: \"*\";\n  color: red;\n  font-size: inherit;\n  padding-left: 10px;\n}\n.altrp-field-label {\n  font-size: 16px;\n  font-family: \"Open Sans\";\n  line-height: 1.5;\n  letter-spacing: 0;\n}\n.altrp-field-select2__single-value, .altrp-field {\n  font-size: 16px;\n  font-family: \"Open Sans\";\n  line-height: 1.5;\n  letter-spacing: 0;\n}\n.altrp-field-select2__control, .altrp-field {\n  text-align: left;\n  padding-top: 2px;\n  padding-right: 2px;\n  padding-bottom: 2px;\n  padding-left: 2px;\n  border-width: 1px;\n}\n.altrp-field-select2__control:hover{\n  border-width: 1px;\n}\n.altrp-field-container {\n  margin: 0;\n}\n.altrp-field::placeholder, .altrp-field-select2__placeholder {\n  font-size: 13px;\n  font-family: \"Open Sans\";\n  line-height: 1.5;\n  letter-spacing: 0;\n}\n.altrp-image-select {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n.altrp-image-select img {\n  flex-grow: 1;\n  object-fit: contain;\n}\n.altrp-field {\n  overflow: hidden;\n  cursor: pointer;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n.altrp-field.active {\n  border-color: lightcoral;\n}\n.altrp-field-label {\n  text-align: center;\n  display: block;\n}\n.altrp-pagination__select-size .altrp-field-select2__single-value {\n  font-size: 14px;\n}\n.altrp-pagination__select-size .altrp-field-select2__indicator-separator {\n  display: none;\n}\n.altrp-pagination__select-size .altrp-field-select2__indicator {\n  align-items: center;\n}\n.altrp-pagination__select-size .altrp-field-select2__control {\n  width: 100px;\n  min-height: 32px;\n  padding: 0;\n  border-radius: 0;\n  outline: none;\n  border-color: rgb(142,148,170);\n  -webkit-box-shadow: none;\n  -moz-box-shadow: none;\n  box-shadow: none;\n}\n.altrp-pagination__select-size .altrp-field-select2__control input {\n  border: none;\n}\n.altrp-field-select2 {\n  position: relative;\n  box-sizing: border-box;\n  pointer-events: none;\n}\n.altrp-field-select2__control {\n  webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  background-color: hsl(0,0%,100%);\n  border-color: hsl(0,0%,80%);\n  border-style: solid;\n  border-width: 1px;\n  cursor: default;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-wrap: wrap;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  -webkit-box-pack: justify;\n  -webkit-justify-content: space-between;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n  min-height: 38px;\n  outline: 0 !important;\n  position: relative;\n  -webkit-transition: all 100ms;\n  transition: all 100ms;\n  box-sizing: border-box;\n}\n.altrp-field-select2__value-container {\n  -webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  -webkit-flex-wrap: wrap;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  padding: 2px 8px;\n  -webkit-overflow-scrolling: touch;\n  position: relative;\n  overflow: hidden;\n  box-sizing: border-box;\n}\n.altrp-field-select2__single-value {\n  color: hsl(0,0%,20%);\n  margin-left: 2px;\n  margin-right: 2px;\n  max-width: calc(100% - 8px);\n  overflow: hidden;\n  position: absolute;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  top: 50%;\n  -webkit-transform: translateY(-50%);\n  -ms-transform: translateY(-50%);\n  transform: translateY(-50%);\n  box-sizing: border-box;\n}\n.altrp-field-select2__indicators {\n  -webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-align-self: stretch;\n  -ms-flex-item-align: stretch;\n  align-self: stretch;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-shrink: 0;\n  -ms-flex-negative: 0;\n  flex-shrink: 0;\n  box-sizing: border-box;\n}\n.altrp-field-select2__indicator-separator {\n  -webkit-align-self: stretch;\n  -ms-flex-item-align: stretch;\n  align-self: stretch;\n  background-color: hsl(0,0%,80%);\n  margin-bottom: 8px;\n  margin-top: 8px;\n  width: 1px;\n  box-sizing: border-box;\n}\n.altrp-field-select2__indicator {\n  color: hsl(0,0%,80%);\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  padding: 8px;\n  -webkit-transition: color 150ms;\n  transition: color 150ms;\n  box-sizing: border-box;\n  justify-content: center;\n  align-items: center;\n}\n.tba-placeholder {\n  display: flex;\n  justify-content: center;\n  font-size: 28px;\n  font-weight: bold;\n}\n.altrp-field-subgroup {\n  display: flex;\n  flex-wrap: wrap;\n}\n.altrp-field-option {\n  display: flex;\n  padding: 10px;\n}\n.altrp-field-option__label {\n  cursor: pointer;\n}\ntextarea.altrp-field {\n  display: block;\n}\n.altrp-table__filter-select .altrp-field-select2__placeholder {\n  white-space: nowrap;\n}\n.altrp-table__filter-select .altrp-field-select2__single-value {\n  font-size: 14px;\n}\n.altrp-table__filter-select .altrp-field-select2__indicator-separator {\n  display: none;\n}\n.altrp-table__filter-select .altrp-field-select2__indicator {\n  align-items: center;\n}\n.altrp-table__filter-select .altrp-field-select2__control {\n  width: 100%;\n  min-height: 19px;\n  padding: 0;\n  border-radius: 0;\n  outline: none;\n  border-color: rgb(142, 148, 170);\n  -webkit-box-shadow: none;\n  -moz-box-shadow: none;\n  box-shadow: none;\n}\n.altrp-table__filter-select .altrp-field-select2__control input {\n  border: none;\n}\n.altrp-table__filter-select .altrp-field-select2__value-container {\n  padding-top: 0;\n  padding-bottom: 0;\n  line-height: 13px;\n}\n.altrp-field-required {\n  color: red;\n  font-size: 18px;\n  padding-left: 10px;\n}\n.altrp-field-container-label {\n  display: flex;\n  flex-direction: row;\n}\n\n.altrp-field-label-container-left {\n  display: flex;\n  align-items: center;\n}\n\n.altrp-field-label-container {\n  display: inline-flex;\n  align-items: center;\n}\n.altrp-field-select2__indicator.altrp-field-select2__dropdown-indicator {\n  padding: 0 8px;\n  max-height: 14px;\n  overflow: hidden;\n}\n.altrp-field-select2 .altrp-field-select2__value-container {\n  padding: 0px 8px;\n}\n.altrp-field-select2 .css-b8ldur-Input {\n  padding-bottom: 0px;\n  padding-top: 0px;\n  margin: 0 2px;\n}\n.altrp-field-select2 .altrp-field-select2__control {\n  min-height: 14px;\n}\n`)\n\nconst AltrpFieldContainer = styled.div`\n  ${({ settings: { content_label_position_type } }) => {\n    switch (content_label_position_type) {\n      case \"left\": {\n        return \"display: flex\";\n      }\n      case \"right\": {\n        return \"display:flex;flex-direction:row-reverse;justify-content:flex-end;\";\n      }\n    }\n    return \"\";\n  }}\n`;\n\nclass InputWidget extends Component {\n  timeInput = null;\n\n  constructor(props) {\n    super(props);\n    props.element.component = this;\n    if (window.elementDecorator) {\n      window.elementDecorator(this);\n    }\n    this.onChange = this.onChange.bind(this);\n    this.debounceDispatch = this.debounceDispatch.bind(this);\n\n    this.defaultValue =\n      this.getContent(\"content_default_value\") ||\n      (this.valueMustArray() ? [] : \"\");\n    if (this.valueMustArray() && !_.isArray(this.defaultValue)) {\n      this.defaultValue = [];\n    }\n    this.state = {\n      settings: { ...props.element.getSettings() },\n      value: this.defaultValue,\n      options: parseOptionsFromSettings(\n        props.element.getSettings(\"content_options\")\n      ),\n      paramsForUpdate: null\n    };\n    this.altrpSelectRef = React.createRef();\n    if (this.getContent(\"content_default_value\")) {\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\n    }\n  }\n\n  /**\n   * В некоторых случаях значение поля должно быть массивом\n   * @return {boolean}\n   */\n  valueMustArray() {\n    if (\n      [\"file\", \"image_select\", \"checkbox\"].indexOf(\n        this.props.element.getSettings(\"content_type\")\n      ) !== -1\n    ) {\n      return true;\n    }\n    if (\n      this.props.element.getSettings(\"content_type\") === \"select2\" &&\n      this.props.element.getSettings(\"select2_multiple\")\n    ) {\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Чистит значение\n   */\n  clearValue() {\n    let value = \"\";\n    if (\n      this.props.element.getSettings(\"content_type\") === \"checkbox\" ||\n      ([\"select2\", \"image_select\"].indexOf(\n        this.props.element.getSettings(\"content_type\")\n      ) >= 0 &&\n        this.props.element.getSettings(\"select2_multiple\"))\n    ) {\n      value = [];\n    }\n    this.onChange(value);\n    this.dispatchFieldValueToStore(value, true);\n  }\n  /**\n   * Метод устанавливает все опции как выбранные\n   */\n  selectAll() {\n    const optionsDynamicSetting = this.props.element.getDynamicSetting(\n      \"content_options\"\n    );\n    if (this.props.element.getSettings(\"content_type\") === \"checkbox\") {\n      let options = [...this.state.options];\n\n      if (optionsDynamicSetting) {\n        options = convertData(optionsDynamicSetting, options);\n      }\n      options = options.map(({ value }) => value);\n      this.onChange(options);\n    }\n    if (\n      [\"select2\", \"image_select\"].indexOf(\n        this.props.element.getSettings(\"content_type\")\n      ) >= 0 &&\n      this.props.element.getSettings(\"select2_multiple\")\n    ) {\n      let options = [...this.state.options];\n      if (!_.isArray(options)) {\n        options = [];\n      } else {\n        if (optionsDynamicSetting) {\n          options = convertData(optionsDynamicSetting, options);\n        }\n      }\n      this.onChange(options);\n    }\n  }\n  /**\n   * Обработка нажатия клавиши\n   * @param {{}} e\n   */\n  handleEnter = e => {\n    if (e.keyCode === 13) {\n      e.preventDefault();\n      const inputs = Array.from(document.querySelectorAll(\"input,select\"));\n      const index = inputs.indexOf(e.target);\n      if (index === undefined) return;\n      inputs[index + 1] && inputs[index + 1].focus();\n      const {\n        create_allowed,\n        create_label,\n        create_url\n      } = this.props.element.getSettings();\n      if (create_allowed && create_label && create_url) {\n        this.createItem(e);\n      }\n    }\n  };\n\n  /**\n   * Загрузка виджета\n   * @param {{}} prevProps\n   * @param {{}} prevState\n   */\n  async _componentDidMount(prevProps, prevState) {\n    if (this.props.element.getSettings(\"content_options\")) {\n      let options = parseOptionsFromSettings(\n        this.props.element.getSettings(\"content_options\")\n      );\n\n      this.setState(state => ({ ...state, options }));\n    } else if (\n      [\"select\", \"select2\"].indexOf(this.state.settings.content_type) >= 0 &&\n      this.state.settings.model_for_options\n    ) {\n      let options = await new Resource({ route: this.getRoute() }).getAll();\n      options = !_.isArray(options) ? options.data : options;\n      options = _.isArray(options) ? options : [];\n      this.setState(state => ({ ...state, options }));\n    }\n    let value = this.state.value;\n    /**\n     * Если динамическое значение загрузилось,\n     * то используем this.getContent для получение этого динамического значения\n     * старые динамические данные\n     * */\n    if (\n      _.get(value, \"dynamic\") &&\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\n    ) {\n      value = this.getContent(\"content_default_value\");\n    }\n    // if (!_.isObject(value)) {\n    //   value = this.getContent('content_default_value');\n    // }\n    /**\n     * Если модель обновилась при смене URL\n     */\n    if (\n      prevProps &&\n      !prevProps.currentModel.getProperty(\"altrpModelUpdated\") &&\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\n    ) {\n      value = this.getContent(\"content_default_value\");\n      this.setState(\n        state => ({ ...state, value, contentLoaded: true }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n      return;\n    }\n    if (\n      this.props.currentModel.getProperty(\"altrpModelUpdated\") &&\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\n      !this.state.contentLoaded\n    ) {\n      value = this.getContent(\"content_default_value\");\n      this.setState(\n        state => ({ ...state, value, contentLoaded: true }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n      return;\n    }\n    if (this.state.value !== value) {\n      this.setState(\n        state => ({ ...state, value }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n    }\n  }\n\n  /**\n   * Получить url для запросов\n   */\n  getRoute() {\n    let url = this.props.element.getSettings(\"model_for_options\");\n\n    if (url.indexOf(\"/\") === -1) {\n      return `/ajax/models/${url}_options`;\n    }\n    if (url.indexOf(\"{{\") !== -1) {\n      url = replaceContentWithData(url);\n    }\n    return url;\n  }\n  /**\n   * Обновление виджета\n   */\n  async _componentDidUpdate(prevProps, prevState) {\n    const { content_options, model_for_options } = this.state.settings;\n    if (\n      prevProps &&\n      !prevProps.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\")\n    ) {\n      let value = this.getContent(\n        \"content_default_value\",\n        this.props.element.getSettings(\"select2_multiple\")\n      );\n      this.setState(\n        state => ({ ...state, value, contentLoaded: true }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n    }\n    if (\n      this.props.element.getSettings(\"content_type\") === \"select\" &&\n      this.props.element.getSettings(\"model_for_options\")\n    ) {\n      if (\n        !(\n          this.state.settings.model_for_options ===\n          prevProps.element.getSettings(\"model_for_options\")\n        )\n      ) {\n        let model_for_options = prevProps.element.getSettings(\n          \"model_for_options\"\n        );\n        let options = await new Resource({ route: this.getRoute() }).getAll();\n        options = !_.isArray(options) ? options.data : options;\n        options = _.isArray(options) ? options : [];\n        this.setState(state => ({ ...state, options, model_for_options }));\n      }\n    }\n    /**\n     * Если обновилась модель, то пробрасываем в стор новое значение (старый источник диамических данных)\n     */\n    if (\n      !_.isEqual(this.props.currentModel, prevProps.currentModel) &&\n      this.state.value &&\n      this.state.value.dynamic\n    ) {\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\n    }\n\n    /**\n     * Если обновилось хранилище данных формы, currentDataStorage или модель, то получаем новые опции c сервера\n     */\n    if (\n      this.props.formsStore !== prevProps.formsStore ||\n      this.props.currentModel !== prevProps.currentModel ||\n      this.props.currentDataStorage !== prevProps.currentDataStorage\n    ) {\n      this.updateOptions();\n    }\n    if (content_options && !model_for_options) {\n      let options = parseOptionsFromSettings(content_options);\n      if (!_.isEqual(options, this.state.options)) {\n        this.setState(state => ({ ...state, options }));\n      }\n    }\n    this.updateValue(prevProps);\n  }\n\n  /**\n   * Обновить значение если нужно\n   * @param {{}} prevProps\n   */\n  updateValue(prevProps) {\n    if (isEditor()) {\n      return;\n    }\n    let content_calculation = this.props.element.getSettings(\n      \"content_calculation\"\n    );\n    const altrpforms = this.props.formsStore;\n    const fieldName = this.props.element.getFieldId();\n    const formId = this.props.element.getFormId();\n    if (!content_calculation) {\n      /**\n       * Обновить значение, если formsStore изменилось из другого компонента\n       */\n      const path = `${formId}.${fieldName}`;\n      if (\n        this.props.formsStore !== prevProps.formsStore &&\n        _.get(altrpforms, path) !== this.state.value\n      ) {\n        this.setState(state => ({\n          ...state,\n          value: _.get(altrpforms, path)\n        }));\n      }\n      return;\n    }\n\n    const prevContext = {};\n\n    const altrpdata = this.props.currentDataStorage.getData();\n    const altrpmodel = this.props.currentModel.getData();\n    const altrpuser = this.props.currentUser.getData();\n    const altrppagestate = this.props.altrpPageState.getData();\n    const altrpresponses = this.props.altrpresponses.getData();\n    const altrpmeta = this.props.altrpMeta.getData();\n    const context = this.props.element.getCurrentModel().getData();\n    if (content_calculation.indexOf(\"altrpdata\") !== -1) {\n      context.altrpdata = altrpdata;\n      if (!altrpdata.currentDataStorageLoaded) {\n        prevContext.altrpdata = altrpdata;\n      } else {\n        prevContext.altrpdata = prevProps.currentDataStorage.getData();\n      }\n    }\n    if (content_calculation.indexOf(\"altrpforms\") !== -1) {\n      context.altrpforms = altrpforms;\n      /**\n       * Не производим вычисления, если изменилось текущее поле\n       */\n      if (`${formId}.${fieldName}` === altrpforms.changedField) {\n        prevContext.altrpforms = altrpforms;\n      } else {\n        prevContext.altrpforms = prevProps.formsStore;\n      }\n    }\n    if (content_calculation.indexOf(\"altrpmodel\") !== -1) {\n      context.altrpmodel = altrpmodel;\n      prevContext.altrpmodel = prevProps.currentModel.getData();\n    }\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\n      context.altrpuser = altrpuser;\n      prevContext.altrpuser = prevProps.currentUser.getData();\n    }\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\n      context.altrpuser = altrpuser;\n      prevContext.altrpuser = prevProps.currentUser.getData();\n    }\n    if (content_calculation.indexOf(\"altrppagestate\") !== -1) {\n      context.altrppagestate = altrppagestate;\n      prevContext.altrppagestate = prevProps.altrpPageState.getData();\n    }\n    if (content_calculation.indexOf(\"altrpmeta\") !== -1) {\n      context.altrpmeta = altrpmeta;\n      prevContext.altrpmeta = prevProps.altrpMeta.getData();\n    }\n    if (content_calculation.indexOf(\"altrpresponses\") !== -1) {\n      context.altrpresponses = altrpresponses;\n      prevContext.altrpresponses = prevProps.altrpresponses.getData();\n    }\n\n    if (content_calculation.indexOf(\"altrpstorage\") !== -1) {\n      context.altrpstorage = getDataFromLocalStorage(\"altrpstorage\", {});\n    }\n\n    // if(_.isEqual(prevContext, context)){\n    //   return;\n    // }\n\n    if (\n      _.isEqual(prevProps.currentDataStorage, this.props.currentDataStorage) &&\n      _.isEqual(prevProps.currentUser, this.props.currentUser) &&\n      _.isEqual(prevProps.formsStore, this.props.formsStore) &&\n      _.isEqual(prevProps.altrpPageState, this.props.altrpPageState) &&\n      _.isEqual(prevProps.altrpMeta, this.props.altrpMeta) &&\n      _.isEqual(prevProps.altrpresponses, this.props.altrpresponses) &&\n      _.isEqual(prevProps.currentModel, this.props.currentModel)\n    ) {\n      return;\n    }\n    if (\n      !_.isEqual(prevProps.formsStore, this.props.formsStore) &&\n      `${formId}.${fieldName}` === altrpforms.changedField\n    ) {\n      return;\n    }\n    let value = \"\";\n    try {\n      content_calculation = content_calculation\n        .replace(/}}/g, \"')\")\n        .replace(/{{/g, \"_.get(context, '\");\n      value = eval(content_calculation);\n      if (value === this.state.value) {\n        return;\n      }\n      this.setState(\n        state => ({ ...state, value }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n    } catch (e) {\n      console.error(\n        \"Evaluate error in Input: '\" + e.message + \"'\",\n        this.props.element.getId()\n      );\n    }\n  }\n\n  /**\n   * Обновляет опции для селекта при обновлении данных, полей формы\n   */\n  async updateOptions() {\n    {\n      let formId = this.props.element.getFormId();\n      let paramsForUpdate = this.props.element.getSettings(\"params_for_update\");\n      let formData = _.get(this.props.formsStore, [formId], {});\n      paramsForUpdate = parseParamsFromString(\n        paramsForUpdate,\n        new AltrpModel(formData)\n      );\n      /**\n       * Сохраняем параметры запроса, и если надо обновляем опции\n       */\n      let options = [...this.state.options];\n      if (!_.isEqual(paramsForUpdate, this.state.paramsForUpdate)) {\n        if (!_.isEmpty(paramsForUpdate)) {\n          if (this.props.element.getSettings(\"params_as_filters\", false)) {\n            paramsForUpdate = JSON.stringify(paramsForUpdate);\n            options = await new Resource({\n              route: this.getRoute()\n            }).getQueried({ filters: paramsForUpdate });\n          } else {\n            options = await new Resource({ route: this.getRoute() }).getQueried(\n              paramsForUpdate\n            );\n          }\n          options = !_.isArray(options) ? options.data : options;\n          options = _.isArray(options) ? options : [];\n        } else if (this.state.paramsForUpdate) {\n          options = await new Resource({ route: this.getRoute() }).getAll();\n          options = !_.isArray(options) ? options.data : options;\n          options = _.isArray(options) ? options : [];\n        }\n        // console.log(options);\n        // console.log(this.state.value);\n        this.setState(state => ({\n          ...state,\n          paramsForUpdate,\n          options\n        }));\n      }\n    }\n  }\n\n  /**\n   * Изменение значения в виджете\n   * @param e\n   * @param  editor для получения изменений из CKEditor\n   */\n  onChange(e, editor = null) {\n    let value = \"\";\n    let valueToDispatch;\n    const settings = this.props.element.getSettings();\n    if (e && e.target) {\n      if (this.props.element.getSettings(\"content_type\") === \"checkbox\") {\n        let inputs = document.getElementsByName(e.target.name);\n        value = [];\n        inputs.forEach(input => {\n          if (input.checked) {\n            value.push(input.value);\n          }\n        });\n      } else if (settings.content_type === \"accept\") {\n        let _value = e.target.checked;\n        let trueValue =\n          this.props.element.getSettings(\"accept_checked\") || true;\n        let falseValue =\n          this.props.element.getSettings(\"accept_unchecked\") || false;\n        falseValue = valueReplacement(falseValue);\n        trueValue = valueReplacement(trueValue);\n        valueToDispatch = _value ? trueValue : falseValue;\n      } else {\n        value = e.target.value;\n      }\n    }\n\n    if (e && e.value) {\n      value = e.value;\n    }\n    if (_.get(editor, \"getData\")) {\n      value = `<div class=\"ck ck-content\" style=\"width:100%\">${editor.getData()}</div>`;\n    }\n    if (_.isArray(e)) {\n      value = _.cloneDeep(e);\n    }\n    if (this.props.element.getSettings(\"content_type\") === \"select2\") {\n      if (this.props.element.getSettings(\"select2_multiple\", false) && !e) {\n        value = [];\n      }\n      if (this.props.element.getSettings(\"select2_multiple\", false)) {\n        value = value.map(item => item.value);\n      }\n    }\n    if (\n      this.props.element.getSettings(\"content_options_nullable\") &&\n      e &&\n      e.value === \"<null>\"\n    ) {\n      value = null;\n    }\n\n    let timestamp = this.props.element.getSettings(\"content_timestamp\");\n    let isDate = this.state.settings.content_type === \"date\";\n\n    if (isDate && timestamp && value != \"\") {\n      value = new Date(value).getTime(); // timestamp\n    }\n    this.setState(\n      state => ({\n        ...state,\n        value\n      }),\n      () => {\n        /**\n         * Обновляем хранилище только если не текстовое поле\n         */\n\n        const change_actions = this.props.element.getSettings(\"change_actions\");\n        const change_change_end = this.props.element.getSettings(\n          \"change_change_end\"\n        );\n        const change_change_end_delay = this.props.element.getSettings(\n          \"change_change_end_delay\"\n        );\n\n        if (\n          [\"text\", \"email\", \"phone\", \"tel\", \"number\", \"password\"].indexOf(\n            this.state.settings.content_type\n          ) === -1\n        ) {\n          this.dispatchFieldValueToStore(\n            valueToDispatch !== undefined ? valueToDispatch : value,\n            true\n          );\n        }\n        if (change_actions && !change_change_end && !isEditor()) {\n          this.debounceDispatch(\n            valueToDispatch !== undefined ? valueToDispatch : value\n          );\n        }\n        if (change_actions && change_change_end && !isEditor()) {\n          this.timeInput && clearTimeout(this.timeInput);\n          this.timeInput = setTimeout(() => {\n            this.debounceDispatch(\n              valueToDispatch !== undefined ? valueToDispatch : value\n            );\n          }, change_change_end_delay);\n        }\n      }\n    );\n  }\n\n  debounceDispatch = _.debounce(\n    value => this.dispatchFieldValueToStore(value, true),\n    150\n  );\n\n  // inputKeyBetween = setTimeout(\n  //   value => this.dispatchFieldValueToStore(value, true),\n  //   this.props.element.getSettings(\"change_change_end_delay\")\n  // );\n  /**\n   * получить опции\n   */\n  getOptions() {\n    let options = [...this.state.options];\n    const optionsDynamicSetting = this.props.element.getDynamicSetting(\n      \"content_options\"\n    );\n    if (optionsDynamicSetting) {\n      options = convertData(optionsDynamicSetting, options);\n    }\n    if (!this.props.element.getSettings(\"sort_default\")) {\n      options = _.sortBy(options, o => o && (o.label ? o.label.toString() : o));\n    }\n    return options;\n  }\n\n  /**\n   * Для действие по фокусу\n   * @param e\n   * @return {Promise<void>}\n   */\n\n  onFocus = async e => {\n    const focus_actions = this.props.element.getSettings(\"focus_actions\");\n\n    if (focus_actions && !isEditor()) {\n      const actionsManager = (\n        await import(\n          /* webpackChunkName: 'ActionsManager' */\n          \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\n        )\n      ).default;\n      await actionsManager.callAllWidgetActions(\n        this.props.element.getIdForAction(),\n        \"focus\",\n        focus_actions,\n        this.props.element\n      );\n    }\n  };\n  /**\n   * Потеря фокуса для оптимизации\n   * @param  e\n   * @param  editor для получения изменений из CKEditor\n   */\n  onBlur = async (e, editor = null) => {\n    if (\n      [\"text\", \"email\", \"phone\", \"tel\", \"number\", \"password\"].indexOf(\n        this.state.settings.content_type\n      ) !== -1\n    ) {\n      this.dispatchFieldValueToStore(e.target.value, true);\n    }\n    if (_.get(editor, \"getData\")) {\n      this.dispatchFieldValueToStore(editor.getData(), true);\n    }\n    if (this.props.element.getSettings(\"actions\", []) && !isEditor()) {\n      const actionsManager = (\n        await import(\n          /* webpackChunkName: 'ActionsManager' */\n          \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\n        )\n      ).default;\n      await actionsManager.callAllWidgetActions(\n        this.props.element.getIdForAction(),\n        \"blur\",\n        this.props.element.getSettings(\"actions\", []),\n        this.props.element\n      );\n    }\n  };\n  /**\n   * Передадим значение в хранилище формы\n   * @param {*} value\n   * @param {boolean} userInput true - имзенилось пользователем\n   */\n  dispatchFieldValueToStore = async (value, userInput = false) => {\n    let formId = this.props.element.getFormId();\n    let fieldName = this.props.element.getFieldId();\n    if (fieldName.indexOf(\"{{\") !== -1) {\n      fieldName = replaceContentWithData(fieldName);\n    }\n    if (_.isObject(this.props.appStore) && fieldName && formId) {\n      this.props.appStore.dispatch(\n        changeFormFieldValue(fieldName, value, formId, userInput)\n      );\n      if (userInput) {\n        const change_actions = this.props.element.getSettings(\"change_actions\");\n\n        if (change_actions && !isEditor()) {\n          const actionsManager = (\n            await import(\n              /* webpackChunkName: 'ActionsManager' */\n              \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\n            )\n          ).default;\n          await actionsManager.callAllWidgetActions(\n            this.props.element.getIdForAction(),\n            \"change\",\n            change_actions,\n            this.props.element\n          );\n        }\n      }\n    }\n  };\n\n  /**\n   * Обработка добавления опции по ajax\n   * @param {SyntheticKeyboardEvent} e\n   */\n  createItem = async e => {\n    const keyCode = e.keyCode;\n    const { value: inputValue } = e.target;\n    if (keyCode !== 13 || !inputValue) {\n      return;\n    }\n    const {\n      create_url,\n      create_label,\n      create_data,\n      select2_multiple\n    } = this.props.element.getSettings();\n    if (!create_label && !create_url) {\n      return;\n    }\n    const currentModel = this.props.element.getCurrentModel();\n    let data = parseParamsFromString(create_data, currentModel, true);\n    data[create_label] = inputValue;\n    let url = parseURLTemplate(create_url, currentModel.getData());\n    this.setState(state => ({ ...state, isDisabled: true }));\n    try {\n      const resource = new Resource({\n        route: url\n      });\n      let res = await resource.post(data);\n      if (res.success && _.get(res, \"data.id\")) {\n        let newOption = {\n          label: inputValue,\n          value: _.get(res, \"data.id\")\n        };\n        this.setState(\n          state => ({ ...state, isDisabled: false }),\n          () => {\n            let options = [...this.state.options];\n            options.unshift(newOption);\n            let value = this.state.value;\n            if (select2_multiple) {\n              value = value ? [...value] : [];\n              value.push(_.get(res, \"data.id\"));\n            } else {\n              value = _.get(res, \"data.id\");\n            }\n            this.setState(\n              state => ({ ...state, options, value }),\n              () => {\n                const selectStateManager = _.get(\n                  this,\n                  \"altrpSelectRef.current.selectRef.current\"\n                );\n                if (selectStateManager) {\n                  selectStateManager.setState({\n                    menuIsOpen: false,\n                    inputValue: \"\"\n                  });\n                }\n              }\n            );\n          }\n        );\n      }\n      this.setState(state => ({ ...state, isDisabled: false }));\n    } catch (error) {\n      console.error(error);\n      this.setState(state => ({ ...state, isDisabled: false }));\n    }\n  };\n  // shouldComponentUpdate(nextProps) {\n    // console.log(nextProps);\n\n    // console.log(nextProps.ElementWrapper=== this.props.ElementWrapper);\n    // console.log(nextProps.altrpMeta=== this.props.altrpMeta);\n    // console.log(nextProps.altrpPageState=== this.props.altrpPageState);\n    // console.log(nextProps.altrpresponses=== this.props.altrpresponses);\n    // console.log(nextProps.appStore=== this.props.appStore);\n    // console.log(nextProps.baseRender=== this.props.baseRender);\n    // console.log(nextProps.children=== this.props.children);\n    // console.log(nextProps.currentDataStorage=== this.props.currentDataStorage);\n    // console.log(nextProps.currentModel=== this.props.currentModel);\n    // console.log(nextProps.currentScreen=== this.props.currentScreen);\n    // console.log(nextProps.currentUser=== this.props.currentUser);\n    // console.log(nextProps.element=== this.props.element);\n    // console.log(nextProps.elementDisplay=== this.props.elementDisplay);\n    // console.log(nextProps.formsStore=== this.props.formsStore);\n    // console.log(nextProps.match=== this.props.match);\n    // console.log(nextProps.match);\n    // console.log(nextProps.rootElement=== this.props.rootElement);\n    // console.log(nextProps.rootElement);\n    // console.log(nextProps.updateToken=== this.props.updateToken);\n  //   return true;\n  // }\n  /**\n   * Взовращает имя для атрибута name\n   * @return {string}\n   */\n  getName() {\n    return `${this.props.element.getFormId()}[${this.props.element.getFieldId()}]`;\n  }\n\n  render() {\n    let label = null;\n    const settings = this.props.element.getSettings();\n    const {\n      options_sorting,\n      content_readonly,\n      image_select_options,\n      select2_multiple: isMultiple,\n      label_icon\n    } = settings;\n\n    let value = this.state.value;\n\n    if (\n      _.get(value, \"dynamic\") &&\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\n    ) {\n      value = this.getContent(\"content_default_value\");\n    }\n    /**\n     * Пока динамический контент загружается (Еесли это динамический контент),\n     * нужно вывести пустую строку\n     */\n    if (value && value.dynamic) {\n      value = \"\";\n    }\n    let classLabel = \"\";\n    let styleLabel = {};\n    const content_label_position_type = this.props.element.getResponsiveSetting(\n      \"content_label_position_type\"\n    );\n    switch (content_label_position_type) {\n      case \"top\":\n        styleLabel = {\n          marginBottom: this.state.settings.label_style_spacing\n            ? this.state.settings.label_style_spacing.size +\n              this.state.settings.label_style_spacing.unit\n            : 2 + \"px\"\n        };\n        classLabel = \"\";\n        break;\n      case \"bottom\":\n        styleLabel = {\n          marginTop: this.state.settings.label_style_spacing\n            ? this.state.settings.label_style_spacing.size +\n              this.state.settings.label_style_spacing.unit\n            : 2 + \"px\"\n        };\n        classLabel = \"\";\n        break;\n      case \"left\":\n        styleLabel = {\n          marginRight: this.state.settings.label_style_spacing\n            ? this.state.settings.label_style_spacing.size +\n              this.state.settings.label_style_spacing.unit\n            : 2 + \"px\"\n        };\n        classLabel = \"altrp-field-label-container-left\";\n        // this.label.current.classList.add(\"hello\")\n\n        break;\n      case \"absolute\":\n        styleLabel = {\n          position: \"absolute\",\n          zIndex: 2\n        };\n        classLabel = \"\";\n        break;\n    }\n\n    if (this.state.settings.content_label) {\n      label = (\n        <div\n          className={\"altrp-field-label-container \" + classLabel}\n          style={styleLabel}\n        >\n          <label\n            className={`altrp-field-label ${\n              this.state.settings.content_required\n                ? \"altrp-field-label--required\"\n                : \"\"\n            }`}\n          >\n            {this.state.settings.content_label}\n          </label>\n          {label_icon && label_icon.assetType && (\n            <span className=\"altrp-label-icon\">\n              {renderAssetIcon(label_icon)}\n            </span>\n          )}\n        </div>\n      );\n    } else {\n      label = null;\n    }\n\n    let autocomplete = \"off\";\n    if (this.state.settings.content_autocomplete) {\n      autocomplete = \"on\";\n    } else {\n      autocomplete = \"off\";\n    }\n\n    let input = null;\n    switch (this.state.settings.content_type) {\n      case \"select\":\n        {\n          let options = this.getOptions();\n          input = (\n            <select\n              value={value || \"\"}\n              onFocus={this.onFocus}\n              name={this.getName()}\n              onChange={this.onChange}\n              onBlur={this.onBlur}\n              onKeyDown={this.handleEnter}\n              id={this.state.settings.position_css_id}\n              className={\n                \"altrp-field \" + this.state.settings.position_css_classes\n              }\n            >\n              {this.state.settings.content_options_nullable ? (\n                <option value=\"\" />\n              ) : (\n                \"\"\n              )}\n\n              {(options_sorting\n                ? sortOptions(options, options_sorting)\n                : options\n              ).map(option => (\n                <option value={option.value} key={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n          );\n        }\n        break;\n      case \"select2\":\n        {\n          input = this.renderSelect2();\n        }\n        break;\n      case \"radio\":\n      case \"checkbox\":\n        {\n          input = this.renderRepeatedInput();\n        }\n        break;\n      case \"wysiwyg\":\n        {\n          input = this.renderWysiwyg();\n        }\n        break;\n      case \"textarea\":\n        input = (\n          <textarea\n            value={value || \"\"}\n            readOnly={content_readonly}\n            autoComplete={autocomplete}\n            placeholder={this.state.settings.content_placeholder}\n            className={\n              \"altrp-field \" + this.state.settings.position_css_classes\n            }\n            onChange={this.onChange}\n            onBlur={this.onBlur}\n            id={this.state.settings.position_css_id}\n          />\n        );\n        break;\n      case \"image_select\":\n        input = (\n          <AltrpImageSelect\n            options={image_select_options}\n            value={this.state.value}\n            changeHandler={value => this.setState({ value })}\n            isMultiple={isMultiple}\n          />\n        );\n        break;\n      case \"accept\":\n        input = this.renderAcceptInput();\n        break;\n      default: {\n        const isClearable = this.state.settings.content_clearable;\n        const isDate = this.state.settings.content_type === \"date\";\n        const timestamp = this.props.element.getSettings(\"content_timestamp\");\n        if (isDate && timestamp) {\n          const isValid = moment.unix(value).isValid();\n          if (isValid) {\n            try {\n              value = moment.unix(value / 1000).format(\"YYYY-MM-DD\");\n            } catch (error) {\n              console.log(error);\n            }\n          }\n        }\n        input = (\n          <div className=\"altrp-input-wrapper\">\n            <AltrpInput\n              type={this.state.settings.content_type}\n              name={this.getName()}\n              value={value || \"\"}\n              element={this.props.element}\n              readOnly={content_readonly}\n              autoComplete={autocomplete}\n              placeholder={this.state.settings.content_placeholder}\n              className={\n                \"altrp-field \" + this.state.settings.position_css_classes\n              }\n              settings={this.props.element.getSettings()}\n              onKeyDown={this.handleEnter}\n              onChange={this.onChange}\n              onBlur={this.onBlur}\n              onFocus={this.onFocus}\n              id={this.state.settings.position_css_id}\n            />\n            {isClearable && (\n              <button\n                className=\"input-clear-btn\"\n                onClick={() => this.setState({ value: this.defaultValue })}\n              >\n                ✖\n              </button>\n            )}\n          </div>\n        );\n      }\n    }\n    return (\n      <AltrpFieldContainer\n        settings={settings}\n        className={\n          this.state.settings.content_type !== \"image_select\"\n            ? \"altrp-field-container \"\n            : \"\" + classLabel\n        }\n      >\n        {content_label_position_type === \"top\" ? label : \"\"}\n        {content_label_position_type === \"left\" ? label : \"\"}\n        {content_label_position_type === \"right\" ? label : \"\"}\n        {content_label_position_type === \"absolute\" ? label : \"\"}\n        {/* .altrp-field-label-container */}\n        {input}\n        {content_label_position_type === \"bottom\" ? label : \"\"}\n      </AltrpFieldContainer>\n    );\n  }\n  /**\n   * Выводит input type=accept\n   */\n  renderAcceptInput() {\n    const settings = this.props.element.getSettings();\n    let value = this.state.value;\n    let trueValue = this.props.element.getSettings(\"accept_checked\") || true;\n    let falseValue =\n      this.props.element.getSettings(\"accept_unchecked\") || false;\n    if (value === trueValue) {\n      value = true;\n    } else if (value === falseValue) {\n      value = false;\n    }\n    return (\n      <div className={`altrp-field-option ${value ? \"active\" : \"\"}`}>\n        <span className=\"altrp-field-option-span\">\n          <input\n            type=\"checkbox\"\n            name={`${this.props.element.getFormId()}[${this.props.element.getFieldId()}]`}\n            className={`altrp-field-option__input ${value ? \"active\" : \"\"}`}\n            onChange={this.onChange}\n            checked={!!value}\n            id={`${this.props.element.getFormId()}[${this.props.element.getFieldId()}]`}\n          />\n        </span>\n      </div>\n    );\n  }\n  /**\n   * Выводит input type=checkbox|radio\n   */\n  renderRepeatedInput() {\n    const { options = [] } = this.state;\n    let { value = \"\" } = this.state;\n    const fieldName =\n      this.props.element.getFieldId() ||\n      Math.random()\n        .toString(36)\n        .substr(2, 9);\n    const formID =\n      this.props.element.getFormId() ||\n      Math.random()\n        .toString(36)\n        .substr(2, 9);\n    const inputType = this.props.element.getSettings(\"content_type\", \"radio\");\n    return (\n      <div className=\"altrp-field-subgroup\">\n        {options.map((option, idx) => {\n          let checked = false;\n          /**\n           * Если значение или опция число, то приведем к числу перед сравнением\n           */\n          if (inputType === \"radio\") {\n            checked = altrpCompare(value, option.value, \"==\");\n          } else {\n            value = _.isArray(value) ? value : value ? [value] : [];\n            checked = altrpCompare(option.value, value, \"in\");\n          }\n          return (\n            <div\n              className={`altrp-field-option ${checked ? \"active\" : \"\"}`}\n              key={`${fieldName}-${idx}`}\n            >\n              <span className=\"altrp-field-option-span\">\n                <input\n                  type={inputType}\n                  value={option.value}\n                  name={`${formID}-${fieldName}`}\n                  className={`altrp-field-option__input ${\n                    checked ? \"active\" : \"\"\n                  }`}\n                  onChange={this.onChange}\n                  checked={checked}\n                  id={`${formID}-${fieldName}-${idx}`}\n                />\n              </span>\n              <label\n                htmlFor={`${formID}-${fieldName}-${idx}`}\n                className=\"altrp-field-option__label\"\n              >\n                {option.label}\n              </label>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  /**\n   * Выводит инпут-select2, используя компонент AltrpSelect\n   */\n  renderSelect2() {\n    const {\n      content_options_nullable,\n      nulled_option_title,\n      content_placeholder\n    } = this.props.element.getSettings();\n\n    let options = this.getOptions();\n    let value = this.state.value;\n    if (\n      _.get(value, \"dynamic\") &&\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\n    ) {\n      value = this.getContent(\"content_default_value\", true);\n    }\n    /**\n     * Пока динамический контент загружается, нужно вывести пустую строку\n     */\n    if (value && value.dynamic) {\n      value = \"\";\n    }\n    if (!this.props.element.getSettings(\"select2_multiple\", false)) {\n      options.forEach(option => {\n        if (!option) {\n          return;\n        }\n        if (option.value === value) {\n          value = { ...option };\n        }\n        if (_.isArray(option.options)) {\n          option.options.forEach(option => {\n            if (option.value == value) {\n              value = { ...option };\n            }\n          });\n        }\n      });\n    } else {\n      /**\n       * Если включен мультиселект\n       */\n      value = value ? (_.isArray(value) ? value : [value]) : [];\n      value = value.map(v => {\n        let _v = v;\n        options.forEach(option => {\n          if (option.value && option.value.toString() === _v.toString()) {\n            _v = { ...option };\n          }\n          if (_.isArray(option.options)) {\n            option.options.forEach(option => {\n              if (option.value && option.value.toString() === _v.toString()) {\n                _v = { ...option };\n              }\n            });\n          }\n        });\n        return _v;\n      });\n      /**\n       * Добавим опцию, если для какого-то значения ее нет\n       */\n      value.forEach(valueItem => {\n        if (!_.isObject(valueItem)) {\n          options.push({\n            value: valueItem,\n            label: valueItem\n          });\n        }\n      });\n    }\n    /**\n     * Сортируем опции\n     * @type {Array|*}\n     */\n    if (\n      content_options_nullable &&\n      (this.props.element.getSettings(\"content_type\") !== \"select2\" ||\n        this.props.element.getSettings(\"select2_multiple\") !== true)\n    ) {\n      options = _.union(\n        [{ label: nulled_option_title, value: \"<null>\" }],\n        options\n      );\n    }\n    const select2Props = {\n      className: \"altrp-field-select2\",\n      onFocus: this.onFocus,\n      element: this.props.element,\n      classNamePrefix: this.props.element.getId() + \" altrp-field-select2\",\n      options,\n      name: this.props.element.getFieldId(),\n      ref: this.altrpSelectRef,\n      settings: this.props.element.getSettings(),\n      onChange: this.onChange,\n      onBlur: this.onBlur,\n      value: value || _.find(options, o => o && o.value == this.state.value),\n      isOptionSelected: option => {\n        if (_.isNumber(this.state.value) || _.isString(this.state.value)) {\n          return this.state.value == option.value;\n        }\n        return this.state.value && this.state.value.includes(option.value);\n      },\n      placeholder: content_placeholder,\n      isMulti: this.props.element.getSettings(\"select2_multiple\", false),\n      onKeyDown: this.handleEnter\n      // menuIsOpen: true,\n    };\n    return (\n      <div className=\"altrp-input-wrapper\">\n        <AltrpSelect {...select2Props} />\n      </div>\n    );\n  }\n\n  renderWysiwyg() {\n    return (\n      <CKeditor\n        onChange={this.onChange}\n        onBlur={this.onBlur}\n        changeText={this.dispatchFieldValueToStore}\n        text={this.getContent(\"content_default_value\")}\n        name={this.getName()}\n        readOnly={this.getContent(\"read_only\")}\n      />\n    );\n  }\n}\n\nexport default InputWidget;\n"],"sourceRoot":""}