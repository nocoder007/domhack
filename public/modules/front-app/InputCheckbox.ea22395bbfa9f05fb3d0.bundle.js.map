{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/editor/src/js/components/widgets/InputCheckboxWidget.js"],"names":["AltrpModel","data","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","value","getData","set","unset","window","altrpHelpers","altrpCompare","convertData","isEditor","parseOptionsFromSettings","parseParamsFromString","parseURLTemplate","replaceContentWithData","renderAssetIcon","getDataFromLocalStorage","Checkbox","altrpLibs","Blueprint","globalDefaults","push","AltrpFieldContainer","styled","div","settings","content_label_position_type","InputCheckboxWidget","props","timeInput","handleEnter","e","keyCode","preventDefault","inputs","Array","from","document","querySelectorAll","index","indexOf","target","undefined","focus","element","getSettings","create_allowed","create_label","create_url","createItem","debounceDispatch","_","debounce","dispatchFieldValueToStore","onFocus","focus_actions","actionsManager","default","callAllWidgetActions","getIdForAction","onBlur","editor","userInput","formId","getFormId","fieldName","getFieldId","isObject","appStore","dispatch","changeFormFieldValue","change_actions","inputValue","create_data","select2_multiple","currentModel","getCurrentModel","url","setState","state","isDisabled","resource","Resource","route","post","res","success","newOption","label","options","unshift","selectStateManager","menuIsOpen","console","error","component","elementDecorator","onChange","bind","getContent","valueMustArray","isArray","paramsForUpdate","altrpSelectRef","React","createRef","optionsDynamicSetting","getDynamicSetting","map","prevProps","prevState","getProperty","contentLoaded","currentDataStorage","content_options","model_for_options","isEqual","dynamic","formsStore","updateOptions","updateValue","content_calculation","altrpforms","prevContext","altrpdata","altrpmodel","altrpuser","currentUser","altrppagestate","altrpPageState","altrpresponses","altrpmeta","altrpMeta","context","currentDataStorageLoaded","changedField","altrpstorage","replace","eval","message","getId","path","formData","JSON","stringify","getRoute","getQueried","filters","getAll","getElementsByName","forEach","input","checked","log","sortBy","o","toString","label_icon","classLabel","styleLabel","getResponsiveSetting","marginBottom","label_style_spacing","size","unit","marginTop","marginRight","position","zIndex","content_label","className","style","content_required","assetType","content_autocomplete","renderRepeatedInput","Math","random","substr","formID","option","idx","key","inline","id","htmlFor","Component"],"mappings":"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","file":"InputCheckbox.ea22395bbfa9f05fb3d0.bundle.js","sourcesContent":["/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","const {\n  altrpCompare,\n  convertData,\n  isEditor,\n  parseOptionsFromSettings,\n  parseParamsFromString,\n  parseURLTemplate,\n  replaceContentWithData,\n  renderAssetIcon,\n  getDataFromLocalStorage\n} = window.altrpHelpers;\nimport Resource from \"../../classes/Resource\";\nimport { changeFormFieldValue } from \"../../../../../front-app/src/js/store/forms-data-storage/actions\";\nimport AltrpModel from \"../../classes/AltrpModel\";\nconst Checkbox = window.altrpLibs.Blueprint.Checkbox;\n\n(window.globalDefaults = window.globalDefaults || []).push(`\n  .altrp-field-option-span {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .altrp-field-radio .bp3-control-indicator.bp3-control-indicator {\n    background-image: none;\n  }\n\n  .altrp-field-container .altrp-field-checkbox.altrp-field-checkbox {\n    margin: 0\n  }\n\n  .altrp-field-container .altrp-field-checkbox .bp3-control-indicator {\n    background-image: none;\n  }\n\n  .altrp-field-container .altrp-field-checkbox .bp3-control-indicator:before {\n    position: absolute;\n    left: 0;\n    top: 0;\n  }\n\n.altrp-field {\n  border-style: solid;\n  width: 100%;\n}\n.altrp-field-file{\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n}\n\n.altrp-label-icon svg,\n.altrp-label-icon img {\n  width: 20px;\n}\n.altrp-label-icon svg{\n  height: 20px;\n}\n.altrp-field-file__field{\n  display: none;\n}\n.altrp-field-file__placeholder{\n  display: none;\n}\n.altrp-field-file_empty .altrp-field-file__placeholder{\n  display: block;\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n  background-color: rgb(52,59,76);\n  color: #fff;\n}\n.input-clear-btn {\n  background: transparent;\n  padding: 0;\n  position: absolute;\n  bottom: calc(50% - 7px);\n  right: 15px;\n  display: none;\n}\n.input-clear-btn:hover {\n  font-weight: bold;\n}\n.altrp-field:hover + .input-clear-btn, .input-clear-btn:hover {\n  display: block;\n}\n.altrp-input-wrapper, .altrp-field-select2 {\n  position: relative;\n  flex-grow: 1;\n}\n.altrp-field-label--required::after {\n  content: \"*\";\n  color: red;\n  font-size: inherit;\n  padding-left: 10px;\n}\n.altrp-field-label {\n  font-size: 16px;\n  font-family: \"Open Sans\";\n  line-height: 1.5;\n  letter-spacing: 0;\n}\n.altrp-field-select2__single-value, .altrp-field {\n  font-size: 16px;\n  font-family: \"Open Sans\";\n  line-height: 1.5;\n  letter-spacing: 0;\n}\n.altrp-field-select2__control, .altrp-field {\n  text-align: left;\n  padding-top: 2px;\n  padding-right: 2px;\n  padding-bottom: 2px;\n  padding-left: 2px;\n  border-width: 1px;\n}\n.altrp-field-select2__control:hover{\n  border-width: 1px;\n}\n.altrp-field-container {\n  margin: 0;\n}\n.altrp-field::placeholder, .altrp-field-select2__placeholder {\n  font-size: 13px;\n  font-family: \"Open Sans\";\n  line-height: 1.5;\n  letter-spacing: 0;\n}\n.altrp-image-select {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n.altrp-image-select img {\n  flex-grow: 1;\n  object-fit: contain;\n}\n.altrp-field {\n  overflow: hidden;\n  cursor: pointer;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n.altrp-field.active {\n  border-color: lightcoral;\n}\n.altrp-field-label {\n  text-align: center;\n  display: block;\n}\n.altrp-pagination__select-size .altrp-field-select2__single-value {\n  font-size: 14px;\n}\n.altrp-pagination__select-size .altrp-field-select2__indicator-separator {\n  display: none;\n}\n.altrp-pagination__select-size .altrp-field-select2__indicator {\n  align-items: center;\n}\n.altrp-pagination__select-size .altrp-field-select2__control {\n  width: 100px;\n  min-height: 32px;\n  padding: 0;\n  border-radius: 0;\n  outline: none;\n  border-color: rgb(142,148,170);\n  -webkit-box-shadow: none;\n  -moz-box-shadow: none;\n  box-shadow: none;\n}\n.altrp-pagination__select-size .altrp-field-select2__control input {\n  border: none;\n}\n.altrp-field-select2 {\n  position: relative;\n  box-sizing: border-box;\n  pointer-events: none;\n}\n.altrp-field-select2__control {\n  webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  background-color: hsl(0,0%,100%);\n  border-color: hsl(0,0%,80%);\n  border-style: solid;\n  border-width: 1px;\n  cursor: default;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-wrap: wrap;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  -webkit-box-pack: justify;\n  -webkit-justify-content: space-between;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n  min-height: 38px;\n  outline: 0 !important;\n  position: relative;\n  -webkit-transition: all 100ms;\n  transition: all 100ms;\n  box-sizing: border-box;\n}\n.altrp-field-select2__value-container {\n  -webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  -webkit-flex-wrap: wrap;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  padding: 2px 8px;\n  -webkit-overflow-scrolling: touch;\n  position: relative;\n  overflow: hidden;\n  box-sizing: border-box;\n}\n.altrp-field-select2__single-value {\n  color: hsl(0,0%,20%);\n  margin-left: 2px;\n  margin-right: 2px;\n  max-width: calc(100% - 8px);\n  overflow: hidden;\n  position: absolute;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  top: 50%;\n  -webkit-transform: translateY(-50%);\n  -ms-transform: translateY(-50%);\n  transform: translateY(-50%);\n  box-sizing: border-box;\n}\n.altrp-field-select2__indicators {\n  -webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-align-self: stretch;\n  -ms-flex-item-align: stretch;\n  align-self: stretch;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-shrink: 0;\n  -ms-flex-negative: 0;\n  flex-shrink: 0;\n  box-sizing: border-box;\n}\n.altrp-field-select2__indicator-separator {\n  -webkit-align-self: stretch;\n  -ms-flex-item-align: stretch;\n  align-self: stretch;\n  background-color: hsl(0,0%,80%);\n  margin-bottom: 8px;\n  margin-top: 8px;\n  width: 1px;\n  box-sizing: border-box;\n}\n.altrp-field-select2__indicator {\n  color: hsl(0,0%,80%);\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  padding: 8px;\n  -webkit-transition: color 150ms;\n  transition: color 150ms;\n  box-sizing: border-box;\n  justify-content: center;\n  align-items: center;\n}\n.tba-placeholder {\n  display: flex;\n  justify-content: center;\n  font-size: 28px;\n  font-weight: bold;\n}\n.altrp-field-subgroup {\n  display: flex;\n  flex-wrap: wrap;\n}\n.altrp-field-option {\n  display: flex;\n  padding: 10px;\n}\n.altrp-field-option__label {\n  cursor: pointer;\n}\ntextarea.altrp-field {\n  display: block;\n}\n.altrp-table__filter-select .altrp-field-select2__placeholder {\n  white-space: nowrap;\n}\n.altrp-table__filter-select .altrp-field-select2__single-value {\n  font-size: 14px;\n}\n.altrp-table__filter-select .altrp-field-select2__indicator-separator {\n  display: none;\n}\n.altrp-table__filter-select .altrp-field-select2__indicator {\n  align-items: center;\n}\n.altrp-table__filter-select .altrp-field-select2__control {\n  width: 100%;\n  min-height: 19px;\n  padding: 0;\n  border-radius: 0;\n  outline: none;\n  border-color: rgb(142, 148, 170);\n  -webkit-box-shadow: none;\n  -moz-box-shadow: none;\n  box-shadow: none;\n}\n.altrp-table__filter-select .altrp-field-select2__control input {\n  border: none;\n}\n.altrp-table__filter-select .altrp-field-select2__value-container {\n  padding-top: 0;\n  padding-bottom: 0;\n  line-height: 13px;\n}\n.altrp-field-required {\n  color: red;\n  font-size: 18px;\n  padding-left: 10px;\n}\n.altrp-field-container-label {\n  display: flex;\n  flex-direction: row;\n}\n\n.altrp-field-label-container-left {\n  display: flex;\n  align-items: center;\n}\n\n.altrp-field-label-container {\n  display: inline-flex;\n  align-items: center;\n}\n.altrp-field-select2__indicator.altrp-field-select2__dropdown-indicator {\n  padding: 0 8px;\n  max-height: 14px;\n  overflow: hidden;\n}\n.altrp-field-select2 .altrp-field-select2__value-container {\n  padding: 0px 8px;\n}\n.altrp-field-select2 .css-b8ldur-Input {\n  padding-bottom: 0px;\n  padding-top: 0px;\n  margin: 0 2px;\n}\n.altrp-field-select2 .altrp-field-select2__control {\n  min-height: 14px;\n}\n`)\nconst AltrpFieldContainer = styled.div`\n  ${({ settings: { content_label_position_type } }) => {\n    switch (content_label_position_type) {\n      case \"left\": {\n        return \"display: flex\";\n      }\n      case \"right\": {\n        return \"display:flex;flex-direction:row-reverse;justify-content:flex-end;\";\n      }\n    }\n    return \"\";\n  }}\n`;\n\nclass InputCheckboxWidget extends Component {\n  timeInput = null;\n\n  constructor(props) {\n    super(props);\n    props.element.component = this;\n    if (window.elementDecorator) {\n      window.elementDecorator(this);\n    }\n    this.onChange = this.onChange.bind(this);\n    this.debounceDispatch = this.debounceDispatch.bind(this);\n\n    this.defaultValue =\n      this.getContent(\"content_default_value\") ||\n      (this.valueMustArray() ? [] : \"\");\n    if (this.valueMustArray() && !_.isArray(this.defaultValue)) {\n      this.defaultValue = [];\n    }\n    this.state = {\n      settings: { ...props.element.getSettings() },\n      value: this.defaultValue,\n      options: parseOptionsFromSettings(\n        props.element.getSettings(\"content_options\")\n      ),\n      paramsForUpdate: null\n    };\n    this.altrpSelectRef = React.createRef();\n    if (this.getContent(\"content_default_value\")) {\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\n    }\n  }\n\n  /**\n   * В некоторых случаях значение поля должно быть массивом\n   * @return {boolean}\n   */\n  valueMustArray() {\n    return true;\n  }\n  /**\n   * Чистит значение\n   */\n  clearValue() {\n    let value = [];\n    this.onChange(value);\n    this.dispatchFieldValueToStore(value, true);\n  }\n  /**\n   * Метод устанавливает все опции как выбранные\n   */\n  selectAll() {\n    const optionsDynamicSetting = this.props.element.getDynamicSetting(\n      \"content_options\"\n    );\n    let options = [...this.state.options];\n\n    if (optionsDynamicSetting) {\n      options = convertData(optionsDynamicSetting, options);\n    }\n    options = options.map(({ value }) => value);\n    this.onChange(options);\n  }\n  /**\n   * Обработка нажатия клавиши\n   * @param {{}} e\n   */\n  handleEnter = e => {\n    if (e.keyCode === 13) {\n      e.preventDefault();\n      const inputs = Array.from(document.querySelectorAll(\"input,select\"));\n      const index = inputs.indexOf(e.target);\n      if (index === undefined) return;\n      inputs[index + 1] && inputs[index + 1].focus();\n      const {\n        create_allowed,\n        create_label,\n        create_url\n      } = this.props.element.getSettings();\n      if (create_allowed && create_label && create_url) {\n        this.createItem(e);\n      }\n    }\n  };\n\n  /**\n   * Загрузка виджета\n   * @param {{}} prevProps\n   * @param {{}} prevState\n   */\n  async _componentDidMount(prevProps, prevState) {\n    if (this.props.element.getSettings(\"content_options\")) {\n      let options = parseOptionsFromSettings(\n        this.props.element.getSettings(\"content_options\")\n      );\n\n      this.setState(state => ({ ...state, options }));\n    }\n    let value = this.state.value;\n    /**\n     * Если динамическое значение загрузилось,\n     * то используем this.getContent для получение этого динамического значения\n     * старые динамические данные\n     * */\n    if (\n      _.get(value, \"dynamic\") &&\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\n    ) {\n      value = this.getContent(\"content_default_value\");\n    }\n\n    /**\n     * Если модель обновилась при смене URL\n     */\n    if (\n      prevProps &&\n      !prevProps.currentModel.getProperty(\"altrpModelUpdated\") &&\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\n    ) {\n      value = this.getContent(\"content_default_value\");\n      this.setState(\n        state => ({ ...state, value, contentLoaded: true }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n      return;\n    }\n    if (\n      this.props.currentModel.getProperty(\"altrpModelUpdated\") &&\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\n      !this.state.contentLoaded\n    ) {\n      value = this.getContent(\"content_default_value\");\n      this.setState(\n        state => ({ ...state, value, contentLoaded: true }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n      return;\n    }\n    if (this.state.value !== value) {\n      this.setState(\n        state => ({ ...state, value }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n    }\n  }\n\n  /**\n   * Получить url для запросов\n   */\n  getRoute() {\n    let url = this.props.element.getSettings(\"model_for_options\");\n\n    if (url.indexOf(\"/\") === -1) {\n      return `/ajax/models/${url}_options`;\n    }\n    if (url.indexOf(\"{{\") !== -1) {\n      url = replaceContentWithData(url);\n    }\n    return url;\n  }\n  /**\n   * Обновление виджета\n   */\n  async _componentDidUpdate(prevProps, prevState) {\n    const { content_options, model_for_options } = this.state.settings;\n    if (\n      prevProps &&\n      !prevProps.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\")\n    ) {\n      let value = this.getContent(\n        \"content_default_value\",\n        this.props.element.getSettings(\"select2_multiple\")\n      );\n      this.setState(\n        state => ({ ...state, value, contentLoaded: true }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n    }\n\n    /**\n     * Если обновилась модель, то пробрасываем в стор новое значение (старый источник диамических данных)\n     */\n    if (\n      !_.isEqual(this.props.currentModel, prevProps.currentModel) &&\n      this.state.value &&\n      this.state.value.dynamic\n    ) {\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\n    }\n\n    /**\n     * Если обновилось хранилище данных формы, currentDataStorage или модель, то получаем новые опции c сервера\n     */\n    if (\n      this.props.formsStore !== prevProps.formsStore ||\n      this.props.currentModel !== prevProps.currentModel ||\n      this.props.currentDataStorage !== prevProps.currentDataStorage\n    ) {\n      this.updateOptions();\n    }\n    if (content_options && !model_for_options) {\n      let options = parseOptionsFromSettings(content_options);\n      if (!_.isEqual(options, this.state.options)) {\n        this.setState(state => ({ ...state, options }));\n      }\n    }\n    this.updateValue(prevProps);\n  }\n\n  /**\n   * Обновить значение если нужно\n   * @param {{}} prevProps\n   */\n  updateValue(prevProps) {\n    if (isEditor()) {\n      return;\n    }\n    let content_calculation = this.props.element.getSettings(\n      \"content_calculation\"\n    );\n    const altrpforms = this.props.formsStore;\n    const fieldName = this.props.element.getFieldId();\n    const formId = this.props.element.getFormId();\n    if (!content_calculation) {\n      /**\n       * Обновить значение, если formsStore изменилось из другого компонента\n       */\n      const path = `${formId}.${fieldName}`;\n      if (\n        this.props.formsStore !== prevProps.formsStore &&\n        _.get(altrpforms, path) !== this.state.value\n      ) {\n        this.setState(state => ({\n          ...state,\n          value: _.get(altrpforms, path)\n        }));\n      }\n      return;\n    }\n\n    const prevContext = {};\n\n    const altrpdata = this.props.currentDataStorage.getData();\n    const altrpmodel = this.props.currentModel.getData();\n    const altrpuser = this.props.currentUser.getData();\n    const altrppagestate = this.props.altrpPageState.getData();\n    const altrpresponses = this.props.altrpresponses.getData();\n    const altrpmeta = this.props.altrpMeta.getData();\n    const context = this.props.element.getCurrentModel().getData();\n    if (content_calculation.indexOf(\"altrpdata\") !== -1) {\n      context.altrpdata = altrpdata;\n      if (!altrpdata.currentDataStorageLoaded) {\n        prevContext.altrpdata = altrpdata;\n      } else {\n        prevContext.altrpdata = prevProps.currentDataStorage.getData();\n      }\n    }\n    if (content_calculation.indexOf(\"altrpforms\") !== -1) {\n      context.altrpforms = altrpforms;\n      /**\n       * Не производим вычисления, если изменилось текущее поле\n       */\n      if (`${formId}.${fieldName}` === altrpforms.changedField) {\n        prevContext.altrpforms = altrpforms;\n      } else {\n        prevContext.altrpforms = prevProps.formsStore;\n      }\n    }\n    if (content_calculation.indexOf(\"altrpmodel\") !== -1) {\n      context.altrpmodel = altrpmodel;\n      prevContext.altrpmodel = prevProps.currentModel.getData();\n    }\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\n      context.altrpuser = altrpuser;\n      prevContext.altrpuser = prevProps.currentUser.getData();\n    }\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\n      context.altrpuser = altrpuser;\n      prevContext.altrpuser = prevProps.currentUser.getData();\n    }\n    if (content_calculation.indexOf(\"altrppagestate\") !== -1) {\n      context.altrppagestate = altrppagestate;\n      prevContext.altrppagestate = prevProps.altrpPageState.getData();\n    }\n    if (content_calculation.indexOf(\"altrpmeta\") !== -1) {\n      context.altrpmeta = altrpmeta;\n      prevContext.altrpmeta = prevProps.altrpMeta.getData();\n    }\n    if (content_calculation.indexOf(\"altrpresponses\") !== -1) {\n      context.altrpresponses = altrpresponses;\n      prevContext.altrpresponses = prevProps.altrpresponses.getData();\n    }\n\n    if (content_calculation.indexOf(\"altrpstorage\") !== -1) {\n      context.altrpstorage = getDataFromLocalStorage(\"altrpstorage\", {});\n    }\n\n    if (\n      _.isEqual(prevProps.currentDataStorage, this.props.currentDataStorage) &&\n      _.isEqual(prevProps.currentUser, this.props.currentUser) &&\n      _.isEqual(prevProps.formsStore, this.props.formsStore) &&\n      _.isEqual(prevProps.altrpPageState, this.props.altrpPageState) &&\n      _.isEqual(prevProps.altrpMeta, this.props.altrpMeta) &&\n      _.isEqual(prevProps.altrpresponses, this.props.altrpresponses) &&\n      _.isEqual(prevProps.currentModel, this.props.currentModel)\n    ) {\n      return;\n    }\n    if (\n      !_.isEqual(prevProps.formsStore, this.props.formsStore) &&\n      `${formId}.${fieldName}` === altrpforms.changedField\n    ) {\n      return;\n    }\n    let value = \"\";\n    try {\n      content_calculation = content_calculation\n        .replace(/}}/g, \"')\")\n        .replace(/{{/g, \"_.get(context, '\");\n      value = eval(content_calculation);\n      if (value === this.state.value) {\n        return;\n      }\n      this.setState(\n        state => ({ ...state, value }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n    } catch (e) {\n      console.error(\n        \"Evaluate error in Input: '\" + e.message + \"'\",\n        this.props.element.getId()\n      );\n    }\n  }\n\n  /**\n   * Обновляет опции для селекта при обновлении данных, полей формы\n   */\n  async updateOptions() {\n    {\n      let formId = this.props.element.getFormId();\n      let paramsForUpdate = this.props.element.getSettings(\"params_for_update\");\n      let formData = _.get(this.props.formsStore, [formId], {});\n      paramsForUpdate = parseParamsFromString(\n        paramsForUpdate,\n        new AltrpModel(formData)\n      );\n      /**\n       * Сохраняем параметры запроса, и если надо обновляем опции\n       */\n      let options = [...this.state.options];\n      if (!_.isEqual(paramsForUpdate, this.state.paramsForUpdate)) {\n        if (!_.isEmpty(paramsForUpdate)) {\n          if (this.props.element.getSettings(\"params_as_filters\", false)) {\n            paramsForUpdate = JSON.stringify(paramsForUpdate);\n            options = await new Resource({\n              route: this.getRoute()\n            }).getQueried({ filters: paramsForUpdate });\n          } else {\n            options = await new Resource({ route: this.getRoute() }).getQueried(\n              paramsForUpdate\n            );\n          }\n          options = !_.isArray(options) ? options.data : options;\n          options = _.isArray(options) ? options : [];\n        } else if (this.state.paramsForUpdate) {\n          options = await new Resource({ route: this.getRoute() }).getAll();\n          options = !_.isArray(options) ? options.data : options;\n          options = _.isArray(options) ? options : [];\n        }\n\n        this.setState(state => ({\n          ...state,\n          paramsForUpdate,\n          options\n        }));\n      }\n    }\n  }\n\n  /**\n   * Изменение значения в виджете\n   * @param e\n   */\n  onChange(e) {\n    let value = \"\";\n    let valueToDispatch;\n    if (e && e.target) {\n      let inputs = document.getElementsByName(e.target.name);\n      value = [];\n      inputs.forEach(input => {\n        if (input.checked) {\n          value.push(input.value);\n        }\n      });\n    }\n\n    if (_.isArray(e)) {\n      value = _.cloneDeep(e);\n    }\n    console.log(value);\n    this.setState(\n      state => ({\n        ...state,\n        value\n      }),\n      () => {\n        this.dispatchFieldValueToStore(\n          valueToDispatch !== undefined ? valueToDispatch : value,\n          true\n        );\n      }\n    );\n  }\n\n  debounceDispatch = _.debounce(\n    value => this.dispatchFieldValueToStore(value, true),\n    150\n  );\n\n  /**\n   * получить опции\n   */\n  getOptions() {\n    let options = [...this.state.options];\n    const optionsDynamicSetting = this.props.element.getDynamicSetting(\n      \"content_options\"\n    );\n    if (optionsDynamicSetting) {\n      options = convertData(optionsDynamicSetting, options);\n    }\n    if (!this.props.element.getSettings(\"sort_default\")) {\n      options = _.sortBy(options, o => o && (o.label ? o.label.toString() : o));\n    }\n    return options;\n  }\n\n  /**\n   * Для действие по фокусу\n   * @param e\n   * @return {Promise<void>}\n   */\n\n  onFocus = async e => {\n    const focus_actions = this.props.element.getSettings(\"focus_actions\");\n\n    if (focus_actions && !isEditor()) {\n      const actionsManager = (\n        await import(\n          /* webpackChunkName: 'ActionsManager' */\n          \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\n          )\n      ).default;\n      await actionsManager.callAllWidgetActions(\n        this.props.element.getIdForAction(),\n        \"focus\",\n        focus_actions,\n        this.props.element\n      );\n    }\n  };\n  /**\n   * Потеря фокуса для оптимизации\n   * @param  e\n   * @param  editor для получения изменений из CKEditor\n   */\n  onBlur = async (e, editor = null) => {\n    if (_.get(editor, \"getData\")) {\n      this.dispatchFieldValueToStore(editor.getData(), true);\n    }\n    if (this.props.element.getSettings(\"actions\", []) && !isEditor()) {\n      const actionsManager = (\n        await import(\n          /* webpackChunkName: 'ActionsManager' */\n          \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\n          )\n      ).default;\n      await actionsManager.callAllWidgetActions(\n        this.props.element.getIdForAction(),\n        \"blur\",\n        this.props.element.getSettings(\"actions\", []),\n        this.props.element\n      );\n    }\n  };\n  /**\n   * Передадим значение в хранилище формы\n   * @param {*} value\n   * @param {boolean} userInput true - имзенилось пользователем\n   */\n  dispatchFieldValueToStore = async (value, userInput = false) => {\n    let formId = this.props.element.getFormId();\n    let fieldName = this.props.element.getFieldId();\n    if (fieldName.indexOf(\"{{\") !== -1) {\n      fieldName = replaceContentWithData(fieldName);\n    }\n    if (_.isObject(this.props.appStore) && fieldName && formId) {\n      this.props.appStore.dispatch(\n        changeFormFieldValue(fieldName, value, formId, userInput)\n      );\n      if (userInput) {\n        const change_actions = this.props.element.getSettings(\"change_actions\");\n        if (change_actions && !isEditor()) {\n          const actionsManager = (\n            await import(\n              /* webpackChunkName: 'ActionsManager' */\n              \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\n              )\n          ).default;\n          await actionsManager.callAllWidgetActions(\n            this.props.element.getIdForAction(),\n            \"change\",\n            change_actions,\n            this.props.element\n          );\n        }\n      }\n    }\n  };\n\n  /**\n   * Обработка добавления опции по ajax\n   * @param {SyntheticKeyboardEvent} e\n   */\n  createItem = async e => {\n    const keyCode = e.keyCode;\n    const { value: inputValue } = e.target;\n    if (keyCode !== 13 || !inputValue) {\n      return;\n    }\n    const {\n      create_url,\n      create_label,\n      create_data,\n      select2_multiple\n    } = this.props.element.getSettings();\n    if (!create_label && !create_url) {\n      return;\n    }\n    const currentModel = this.props.element.getCurrentModel();\n    let data = parseParamsFromString(create_data, currentModel, true);\n    data[create_label] = inputValue;\n    let url = parseURLTemplate(create_url, currentModel.getData());\n    this.setState(state => ({ ...state, isDisabled: true }));\n    try {\n      const resource = new Resource({\n        route: url\n      });\n      let res = await resource.post(data);\n      if (res.success && _.get(res, \"data.id\")) {\n        let newOption = {\n          label: inputValue,\n          value: _.get(res, \"data.id\")\n        };\n        this.setState(\n          state => ({ ...state, isDisabled: false }),\n          () => {\n            let options = [...this.state.options];\n            options.unshift(newOption);\n            let value = this.state.value;\n            if (select2_multiple) {\n              value = value ? [...value] : [];\n              value.push(_.get(res, \"data.id\"));\n            } else {\n              value = _.get(res, \"data.id\");\n            }\n            this.setState(\n              state => ({ ...state, options, value }),\n              () => {\n                const selectStateManager = _.get(\n                  this,\n                  \"altrpSelectRef.current.selectRef.current\"\n                );\n                if (selectStateManager) {\n                  selectStateManager.setState({\n                    menuIsOpen: false,\n                    inputValue: \"\"\n                  });\n                }\n              }\n            );\n          }\n        );\n      }\n      this.setState(state => ({ ...state, isDisabled: false }));\n    } catch (error) {\n      console.error(error);\n      this.setState(state => ({ ...state, isDisabled: false }));\n    }\n  };\n\n  /**\n   * Взовращает имя для атрибута name\n   * @return {string}\n   */\n  getName() {\n    return `${this.props.element.getFormId()}[${this.props.element.getFieldId()}]`;\n  }\n\n  render() {\n    let label = null;\n    const settings = this.props.element.getSettings();\n    const {\n      select2_multiple: isMultiple,\n      label_icon\n    } = settings;\n\n    let value = this.state.value;\n\n    if (\n      _.get(value, \"dynamic\") &&\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\n    ) {\n      value = this.getContent(\"content_default_value\");\n    }\n    /**\n     * Пока динамический контент загружается (Еесли это динамический контент),\n     * нужно вывести пустую строку\n     */\n    if (value && value.dynamic) {\n      value = \"\";\n    }\n    let classLabel = \"\";\n    let styleLabel = {};\n    const content_label_position_type = this.props.element.getResponsiveSetting(\n      \"content_label_position_type\"\n    );\n    switch (content_label_position_type) {\n      case \"top\":\n        styleLabel = {\n          marginBottom: this.state.settings.label_style_spacing\n            ? this.state.settings.label_style_spacing.size +\n            this.state.settings.label_style_spacing.unit\n            : 2 + \"px\"\n        };\n        classLabel = \"\";\n        break;\n      case \"bottom\":\n        styleLabel = {\n          marginTop: this.state.settings.label_style_spacing\n            ? this.state.settings.label_style_spacing.size +\n            this.state.settings.label_style_spacing.unit\n            : 2 + \"px\"\n        };\n        classLabel = \"\";\n        break;\n      case \"left\":\n        styleLabel = {\n          marginRight: this.state.settings.label_style_spacing\n            ? this.state.settings.label_style_spacing.size +\n            this.state.settings.label_style_spacing.unit\n            : 2 + \"px\"\n        };\n        classLabel = \"altrp-field-label-container-left\";\n\n        break;\n      case \"absolute\":\n        styleLabel = {\n          position: \"absolute\",\n          zIndex: 2\n        };\n        classLabel = \"\";\n        break;\n    }\n\n    if (this.state.settings.content_label) {\n      label = (\n        <div\n          className={\"altrp-field-label-container \" + classLabel}\n          style={styleLabel}\n        >\n          <label\n            className={`altrp-field-label ${this.state.settings.content_required\n              ? \"altrp-field-label--required\"\n              : \"\"\n            }`}\n          >\n            {this.state.settings.content_label}\n          </label>\n          {label_icon && label_icon.assetType && (\n            <span className=\"altrp-label-icon\">\n              {renderAssetIcon(label_icon)}\n            </span>\n          )}\n        </div>\n      );\n    } else {\n      label = null;\n    }\n\n    let autocomplete = \"off\";\n    if (this.state.settings.content_autocomplete) {\n      autocomplete = \"on\";\n    } else {\n      autocomplete = \"off\";\n    }\n\n    let input = null;\n\n    input = this.renderRepeatedInput();\n\n    return (\n      <AltrpFieldContainer\n        settings={settings}\n        className={\"altrp-field-container \"}\n      >\n        {content_label_position_type === \"top\" ? label : \"\"}\n        {content_label_position_type === \"left\" ? label : \"\"}\n        {content_label_position_type === \"right\" ? label : \"\"}\n        {content_label_position_type === \"absolute\" ? label : \"\"}\n        {/* .altrp-field-label-container */}\n        {input}\n        {content_label_position_type === \"bottom\" ? label : \"\"}\n      </AltrpFieldContainer>\n    );\n  }\n\n  /**\n   * Выводит input type=checkbox|radio\n   */\n  renderRepeatedInput() {\n    const { options = [] } = this.state;\n    let { value = \"\" } = this.state;\n    const fieldName =\n      this.props.element.getFieldId() ||\n      Math.random()\n        .toString(36)\n        .substr(2, 9);\n    const formID =\n      this.props.element.getFormId() ||\n      Math.random()\n        .toString(36)\n        .substr(2, 9);\n\n    return (\n      <div className=\"altrp-field-subgroup\">\n        {options.map((option, idx) => {\n          let checked = false;\n          /**\n           * Если значение или опция число, то приведем к числу перед сравнением\n           */\n          value = _.isArray(value) ? value : value ? [value] : [];\n          checked = altrpCompare(option.value, value, \"in\");\n\n          return (\n            <div\n              className={`altrp-field-option ${checked ? \"active\" : \"\"}`}\n              key={`${fieldName}-${idx}`}\n            >\n              <span className=\"altrp-field-option-span\">\n                <Checkbox\n                  inline\n                  name={`${formID}-${fieldName}`}\n                  id={`${formID}-${fieldName}-${idx}`}\n                  onChange={this.onChange}\n                  value={option.value}\n                  className={`altrp-field-checkbox${checked ? \" active\" : \"\"}`}\n                  checked={checked}\n                />\n                {/*<input*/}\n                {/*  type=\"checkbox\"*/}\n                {/*  value={option.value}*/}\n                {/*  name={`${formID}-${fieldName}`}*/}\n                {/*  className={`altrp-field-option__input ${checked ? \"active\" : \"\"*/}\n                {/*    }`}*/}\n                {/*  onChange={this.onChange}*/}\n                {/*  checked={checked}*/}\n                {/*  id={`${formID}-${fieldName}-${idx}`}*/}\n                {/*/>*/}\n              </span>\n              <label\n                htmlFor={`${formID}-${fieldName}-${idx}`}\n                className=\"altrp-field-option__label\"\n              >\n                {option.label}\n              </label>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default InputCheckboxWidget;\n"],"sourceRoot":""}