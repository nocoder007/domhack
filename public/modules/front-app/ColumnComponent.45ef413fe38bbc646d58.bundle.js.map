{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/editor/src/js/components/ColumnComponent.js"],"names":["AltrpModel","data","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","value","getData","set","unset","window","globalDefaults","push","ColumnComponent","props","onClick","e","isEditor","columnLink","element","getSettings","redirect","getCurrentModel","state","children","settings","component","elementDecorator","baseRender","render","columnCount","_","background_image","background_image_hover","getResponsiveSetting","ElementWrapper","SectionElementWrapper","className","position_style_css_classes","url","isActive","columnIsLink","layout_html_tag","React","createElement","id","position_style_css_id","map","widget","key","getIdForAction","rootElement","componentClass","Component"],"mappings":"2OAYMA,E,WACJ,aAAuB,IAAXC,EAAW,uDAAJ,IAAI,eACrBC,KAAKD,KAAOE,IAAUF,G,sCAQxB,WAAsB,IAAdG,IAAc,yDACpB,OAAGA,EACMD,IAAUD,KAAKD,MAEjBC,KAAKD,O,qBAMd,WACE,OAAOI,IAAQH,KAAKD,Q,yBAQtB,SAAYK,GAAyB,IAAnBC,EAAmB,uDAAJ,GAC/B,OAAOC,IAAIN,KAAKD,KAAMK,EAAMC,K,yBAQ9B,SAAYD,GACV,OAAOG,IAAIP,KAAKD,KAAMK,K,yBAQxB,SAAYA,GAAkB,IAAZI,EAAY,uDAAJ,GAIxB,OAHGA,aAAiBV,IAClBU,EAAQA,EAAMC,SAAQ,IAEjBC,IAAIV,KAAKD,KAAMK,EAAMI,K,2BAO9B,SAAcJ,GACZ,OAAOO,IAAMX,KAAKD,KAAMK,O,KAG5BQ,OAAOd,WAAaA,EACpB,O,0HCzECc,OAAOC,eAAiBD,OAAOC,gBAAkB,IAAIC,KAArD,4H,IASKC,E,wcACJ,WAAYC,GAAO,6BACjB,cAAMA,IAmBRC,QAAU,SAACC,GACT,KAAIC,gBAAJ,CAGA,IAAMC,EAAa,EAAKJ,MAAMK,QAAQC,YAAY,cAClDC,cAASH,EAAYF,EAAG,EAAKF,MAAMK,QAAQG,kBAAkBf,aAvB7D,EAAKgB,MAAQ,CACXC,SAAUV,EAAMU,UAAY,GAC5BC,SAAUX,EAAMK,QAAQC,eAE1BN,EAAMK,QAAQO,WAAd,UACIhB,OAAOiB,kBACTjB,OAAOiB,kBAAP,WAEEb,EAAMc,aACR,EAAKC,OAASf,EAAMc,YAAN,YAEhB,EAAKE,YAAc,EAbF,E,2CAgCnB,WACE,QAAUC,EAAE3B,IAAIN,KAAM,0C,oBAGxB,WAAS,WACDkC,EAAmBlC,KAAKgB,MAAMK,QAAQC,YAAY,mBAAoB,IACtEa,EAAyBnC,KAAKgB,MAAMK,QAAQe,qBAChD,mBACA,SACA,IAEEC,EAAiBzB,OAAO0B,uBAAyBtC,KAAKgB,MAAMqB,gBAAkBzB,OAAOyB,eACrFE,EAAY,uCAAyCvC,KAAKyB,MAAME,SAASa,4BAA8B,KAAON,WAAkBO,KAAON,WAAwBM,IAAM,0BAA4B,IAClMzC,KAAK0C,aACNH,GAAa,WAEXvC,KAAK2C,iBACPJ,GAAa,kBAGf,IAAMK,EAAkB5C,KAAKgB,MAAMK,QAAQC,YAAY,oBAAsB,MAG7E,OAAOuB,MAAMC,cAAcF,EACzB,CACEL,YACAQ,GAAI/C,KAAKyB,MAAME,SAASqB,uBAAyB,GACjD/B,QAASjB,KAAKiB,QACdU,SAAU3B,KAAKgB,MAAMK,QAAQC,eAE/BtB,KAAKyB,MAAMC,SAASuB,KAClB,SAAAC,GAAM,OAAI,oBAACb,EAAD,CAAgBc,IAAKD,EAAOE,iBACpCC,YAAa,EAAKrC,MAAMqC,YACxBvB,WAAY,EAAKd,MAAMc,WACvBO,eAAgBA,EAChBT,UAAWsB,EAAOI,eAClBjC,QAAS6B,Y,GArEWK,WA2E9B","file":"ColumnComponent.45ef413fe38bbc646d58.bundle.js","sourcesContent":["/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","import { isEditor, redirect } from \"../../../../front-app/src/js/helpers\";\n\n(window.globalDefaults = window.globalDefaults || []).push(`\n  .altrp-column {\n    display: flex;\n    flex-wrap: wrap;\n    padding: 10px;\n    align-content: flex-start;\n  }\n`);\n\nclass ColumnComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      children: props.children || [],\n      settings: props.element.getSettings()\n    };\n    props.element.component = this;\n    if (window.elementDecorator) {\n      window.elementDecorator(this);\n    }\n    if (props.baseRender) {\n      this.render = props.baseRender(this);\n    }\n    this.columnCount = 0\n  }\n\n  /**\n   * Обрабатываем клик по секции\n   * @param e\n   */\n  onClick = (e) => {\n    if (isEditor()) {\n      return;\n    }\n    const columnLink = this.props.element.getSettings('link_link');\n    redirect(columnLink, e, this.props.element.getCurrentModel().getData());\n  };\n\n  /**\n   * Курсор для ссылки\n   * @return {boolean}\n   */\n  columnIsLink() {\n    return ! !_.get(this, 'props.element.settings.link_link.url');\n  }\n\n  render() {\n    const background_image = this.props.element.getSettings('background_image', {});\n    const background_image_hover = this.props.element.getResponsiveSetting(\n      \"background_image\",\n      \":hover\",\n      {},\n    );\n    let ElementWrapper = window.SectionElementWrapper || this.props.ElementWrapper || window.ElementWrapper;\n    let className = \"altrp-column altrp-column-priority \" + (this.state.settings.position_style_css_classes || \"\") + (background_image?.url || background_image_hover?.url ? ' altrp-background-image' : '');\n    if(this.isActive()){\n      className += ' active';\n    }\n    if (this.columnIsLink()) {\n      className += ' altrp-pointer';\n    }\n\n    const layout_html_tag = this.props.element.getSettings('layout_html_tag') || 'div';\n\n\n    return React.createElement(layout_html_tag,\n      {\n        className,\n        id: this.state.settings.position_style_css_id || \"\",\n        onClick: this.onClick,\n        settings: this.props.element.getSettings()\n      },\n      this.state.children.map(\n        widget => <ElementWrapper key={widget.getIdForAction()}\n          rootElement={this.props.rootElement}\n          baseRender={this.props.baseRender}\n          ElementWrapper={ElementWrapper}\n          component={widget.componentClass}\n          element={widget} />\n      )\n    );\n  }\n}\n\nexport default ColumnComponent\n"],"sourceRoot":""}