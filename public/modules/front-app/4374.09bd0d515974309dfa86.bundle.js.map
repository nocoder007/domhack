{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/Query.js","webpack:///./resources/modules/editor/src/js/classes/AltrpModelUpdater.js","webpack:///./resources/modules/editor/src/js/classes/modules/ModelsManager.js","webpack:///./resources/modules/editor/src/js/components/altrp-query-component/altrp-query-component.js"],"names":["Query","data","component","this","modelName","dataSource","type","dataSourceName","value","pageSize","paginationType","orderingField","order","route","sql_name","context","_","cloneDeep","props","currentModel","setProperty","currentDataStorage","getData","setDefaultParams","parseParamsFromString","defaultParams","Resource","modelData","isArray","params","modelUpdater","console","log","modelManager","model_name","getModelId","getResource","getQueried","getParams","lastQuery","res","hasMore","assign","getDefaultParams","page","has","counterStart","parseInt","modelId","error","subscribers","resource","updating","callback","push","callSubscribers","updateData","get","forEach","subscriber","isFunction","updateModelData","filter","_s","extend","modelsStorage","altrpModel","AltrpModelUpdater","model","subscribeToUpdates","unsubscribe","updateWithData","_status","_error","_latestData","_data","useQuerySettings","forceFetchOnMount","refetchOnWindowFocus","children","query","settings","updateToken","defaultSortSettings","tables_columns","column","column_is_default_sorted","order_by","accessor","useState","setPage","sortSetting","setSortSettings","filterSetting","setFilterSettings","fetchModels","useCallback","key","groupBy","choose_datasource","queryData","filterSettingJSON","JSON","stringify","altrpUdateToken","length","filters","usePaginatedQuery","status","resolvedData","latestData","useEffect","queryCache","useQuery","isObject","isEmpty","React","setAltrpIndex","finalData","childrenProps","map","child"],"mappings":"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","file":"4374.09bd0d515974309dfa86.bundle.js","sourcesContent":["import Resource from \"./Resource\";\r\nimport modelManager from \"../../../../editor/src/js/classes/modules/ModelsManager\";\r\nimport {parseParamsFromString} from \"../../../../front-app/src/js/helpers\";\r\n\r\nclass Query {\r\n\r\n  constructor(data, component){\r\n    this.component = component;\r\n    this.modelName = data.modelName || '';\r\n    this.dataSource = data.dataSource;\r\n    if(data.dataSource && data.dataSource.type === 'model_query'){\r\n      this.dataSourceName = data.dataSource.value || '';\r\n    }\r\n    this.pageSize = data.pageSize || 10;\r\n    this.paginationType = data.paginationType || 'pages';\r\n    this.orderingField = data.orderingField || 'name';\r\n    this.order = data.order || 'ASC';\r\n    this.route = `/ajax/models/${this.modelName || (data.dataSource ? data.dataSource.value : '')}`;\r\n    if(data.dataSource && data.dataSource.type === 'sql_datasource'){\r\n      this.route = data.dataSource.value;\r\n      this.dataSourceName = data.dataSource.sql_name || '';\r\n    }\r\n    /**\r\n     * @member {AltrpModel} context\r\n     */\r\n    let context = _.cloneDeep(component.props.currentModel);\r\n    context.setProperty('altrpdata', component.props.currentDataStorage.getData());\r\n    this.setDefaultParams(parseParamsFromString(data.defaultParams, context));\r\n  }\r\n  /**\r\n   *\r\n   * @return {Resource}\r\n   */\r\n  getResource(){\r\n    return new Resource({route: this.route});\r\n  }\r\n\r\n\r\n  /**\r\n   * Поулчить данные с модели, которая хранится в компоненте\r\n   * @param {{}} modelData\r\n   * @return {array}\r\n   */\r\n  getFromModel(modelData){\r\n    if(! modelData){\r\n      return [];\r\n    }\r\n    if(_.isArray(modelData[this.dataSource.value])){\r\n      return [...modelData[this.dataSource.value]];\r\n    } else {\r\n      return [{...modelData[this.dataSource.value]}]\r\n    }\r\n  }\r\n  /**\r\n   * Делает запрос с параметрами\r\n   * @param params\r\n   * @return {Promise}\r\n   */\r\n  async getQueried(params){\r\n    if(this.dataSource && (this.dataSource.type === 'has_many_relation')){\r\n      if(!this.modelUpdater){\r\n        this.modelUpdater = modelManager.subscribeToModelUpdates(this.dataSource.model_name, this.component.getModelId(), this.component);\r\n      } else {\r\n        console.log(this.modelUpdater);\r\n      }\r\n    } else {\r\n      this.lastQuery = (await this.getResource().getQueried(this.getParams(params)));\r\n      let res;\r\n      if(_.isArray(this.lastQuery)){\r\n        res = [...this.lastQuery];\r\n      } else if(_.isArray(this.lastQuery.data)){\r\n        res = this.lastQuery.data;\r\n      }\r\n      res.hasMore = this.lastQuery.hasMore;\r\n      return res;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Проверка есть ли еще\r\n   */\r\n  hasMore(){\r\n    if(! this.lastQuery){\r\n      return false;\r\n    }\r\n    return this.lastQuery.hasMore;\r\n  }\r\n\r\n  /**\r\n   * Задать параметры по умолчанию\r\n   * @params {{}} defaultParams\r\n   */\r\n  setDefaultParams(defaultParams = {}){\r\n    this.defaultParams = defaultParams;\r\n  }\r\n\r\n  /**\r\n   * Вернуть значения по умолчанию\r\n   * @return {{}}\r\n   */\r\n  getDefaultParams(){\r\n    this.defaultParams = this.defaultParams || {};\r\n    this.defaultParams.pageSize = this.pageSize;\r\n    return this.defaultParams;\r\n  }\r\n\r\n  /**\r\n   * Сливает параметры с параметрами по умолчанию\r\n   * @param {object} params\r\n   * @return {object}\r\n   */\r\n  getParams(params) {\r\n    params = {..._.assign(_.cloneDeep(this.getDefaultParams()), params)};\r\n    params.page = params.page || 1;\r\n    if(_.has(params, 'pageSize') && (params.pageSize <= 0)){\r\n      delete params.pageSize;\r\n      delete params.page;\r\n    }\r\n    return params;\r\n  }\r\n\r\n  /**\r\n   * Получить стартовое значение для счетчика, если нужно показать номер по порядку в таблице\r\n   * @param {int} page\r\n   */\r\n  getCounterStart(page){\r\n    let counterStart = 1;\r\n    if(this.pageSize < 1){\r\n      return counterStart;\r\n    }\r\n    page = parseInt(page) || 1;\r\n    counterStart = this.pageSize * (page - 1) + 1;\r\n    return counterStart;\r\n  }\r\n}\r\n\r\nexport default Query","/**\r\n * @class AltrpModelUpdater\r\n */\r\nimport Resource from \"./Resource\";\r\n\r\nclass AltrpModelUpdater {\r\n  /**\r\n   *\r\n   * @param {string} modelName\r\n   * @param {int} modelId\r\n   */\r\n  constructor(modelName, modelId){\r\n    this.modelName = modelName;\r\n    if(! modelId){\r\n      console.error('ид модели не указан!');\r\n    }\r\n    this.modelId = modelId;\r\n    this.data = null;\r\n    this.subscribers = [];\r\n    this.resource = new Resource({route: `/ajax/models/${this.modelName}`});\r\n    this.updating = false;\r\n  }\r\n\r\n  /**\r\n   * Подписывает функцию на обновления\r\n   * @param {function} callback\r\n   */\r\n  subscribeToUpdates(callback){\r\n    this.subscribers.push(callback);\r\n    if(this.updating){\r\n      return;\r\n    }\r\n    if(this.data) {\r\n      this.callSubscribers();\r\n    }\r\n    this.updateData();\r\n    // } else {\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * Обновляет модель с сервера\r\n   */\r\n  async updateData(){\r\n    this.updating = true;\r\n    this.data = await this.resource.get(this.modelId);\r\n    this.updating = false;\r\n    this.callSubscribers();\r\n  }\r\n\r\n  /**\r\n   * Передать данные всем подписчикам\r\n   */\r\n  callSubscribers(){\r\n    this.subscribers.forEach(subscriber=>{\r\n      if(_.isFunction(subscriber.updateModelData)){\r\n        subscriber.updateModelData(this.getData());\r\n      }\r\n      if(_.isFunction(subscriber)){\r\n        subscriber(this.getData());\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Отписаться (отписываемся перед удалением компонента)\r\n   * @param callback\r\n   */\r\n  unsubscribe(subscriber){\r\n    this.subscribers = this.subscribers.filter(_s=>(_s !== subscriber))\r\n  }\r\n  //\r\n  // unsubscribe(callback){\r\n  //   this.subscribers = _.remove(this.subscribers, (idx, item)=>{\r\n  //     console.log(item);\r\n  //     return callback === item;\r\n  //   })\r\n  // }\r\n\r\n  /**\r\n   * Получить данные модели\r\n   * @return {object | null}\r\n   */\r\n  getData(){\r\n    return this.data;\r\n  }\r\n  /**\r\n   * Обновить модель данными\r\n   * @param {{}} data\r\n   * @return void\r\n   */\r\n  updateWithData(data){\r\n    this.data = _.extend( this.data,{...data});\r\n    this.callSubscribers();\r\n  }\r\n}\r\n\r\n\r\nexport default AltrpModelUpdater","import AltrpModelUpdater from \"../AltrpModelUpdater\";\r\n\r\nclass ModelsManager {\r\n  constructor(){\r\n    this.modelsStorage = {};\r\n\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  updateModel(modelName, modelId){\r\n    if(! this.modelsStorage[`${modelName}::${modelId}`]) {\r\n      this.modelsStorage[`${modelName}::${modelId}`].updateData();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {AltrpModelUpdater} altrpModel\r\n   */\r\n  addModel(altrpModel){\r\n\r\n  }\r\n\r\n  /**\r\n   * @param {string} modelName\r\n   * @param {int} modelId\r\n   * @return {AltrpModelUpdater}\r\n   */\r\n  getModel(modelName, modelId){\r\n\r\n  }\r\n\r\n  /**\r\n   * Подписывается на изменения модели\r\n   * @param {string} modelName\r\n   * @param {int} modelId\r\n   * @param {function} callback\r\n   * @return {AltrpModelUpdater | null}\r\n   */\r\n  subscribeToModelUpdates(modelName, modelId, callback){\r\n    if(! modelId){\r\n      return null;\r\n    }\r\n    /**\r\n     * model\r\n     * @type {AltrpModelUpdater}\r\n     */\r\n    let model;\r\n    if(! this.modelsStorage[`${modelName}::${modelId}`]){\r\n      this.modelsStorage[`${modelName}::${modelId}`] = new AltrpModelUpdater(modelName, modelId);\r\n    }\r\n    model = this.modelsStorage[`${modelName}::${modelId}`];\r\n    model.subscribeToUpdates(callback);\r\n    return model;\r\n  }\r\n  /**\r\n   * удаляем подписчика\r\n   * @param {string} modelName\r\n   * @param {int} modelId\r\n   * @param {function} callback\r\n   * @return {AltrpModelUpdater | null}\r\n   */\r\n  unsubscribe(modelName, modelId, callback){\r\n    if(! modelId){\r\n      return null;\r\n    }\r\n    /**\r\n     * model\r\n     * @type {AltrpModelUpdater}\r\n     */\r\n    let model;\r\n    if(! this.modelsStorage[`${modelName}::${modelId}`]){\r\n      return\r\n    }\r\n    model = this.modelsStorage[`${modelName}::${modelId}`];\r\n    model.unsubscribe(callback);\r\n    return model;\r\n  }\r\n\r\n  /**\r\n   * Обновить названию и ИД модель данными\r\n   * @param {string} modelName\r\n   * @param {int} modelId\r\n   * @param {{}} data\r\n   * @return void\r\n   */\r\n  updateModelWithData(modelName, modelId, data){\r\n    if(! this.modelsStorage[`${modelName}::${modelId}`]) {\r\n      return;\r\n    }\r\n    this.modelsStorage[`${modelName}::${modelId}`].updateWithData(data);\r\n  }\r\n}\r\nconst modelManager =  new ModelsManager();\r\nexport default modelManager;","import React, {useState, useCallback, useEffect} from \"react\";\r\nimport Query from \"../../classes/Query\";\r\nimport {useQuery, usePaginatedQuery, queryCache} from  \"react-query\";\r\nimport {setAltrpIndex} from \"../../../../../front-app/src/js/helpers\";\r\n\r\n/**\r\n * Компонент для получения данных при помощи запросов\r\n * @param {{\r\n *  children: array,\r\n *  data: array,\r\n *  query: {Query}\r\n * }} props\r\n * @return {React.Component}\r\n * @constructor\r\n */\r\nconst AltrpQueryComponent = (props)=>{\r\n  let _data = [], _status, _error, _latestData;\r\n\r\n  const useQuerySettings = {\r\n    forceFetchOnMount: true,\r\n    refetchOnWindowFocus: true,\r\n  };\r\n\r\n  let {children = [], query, data, settings, updateToken} = props;\r\n  /**\r\n   * проверим есть ли настройки для сортировок по умолчанию\r\n   */\r\n  const defaultSortSettings =  {};\r\n  settings.tables_columns && settings.tables_columns.forEach(column => {\r\n    if(column.column_is_default_sorted && ! defaultSortSettings.order_by){\r\n      defaultSortSettings.order_by = column.accessor;\r\n      defaultSortSettings.order = _.get(column, 'column_is_default_sorted_direction', 'ASC')\r\n    }\r\n  });\r\n  const [page, setPage] = useState(1);\r\n\r\n  const [sortSetting, setSortSettings] = useState(defaultSortSettings);\r\n  const [filterSetting, setFilterSettings] = useState({});\r\n  const fetchModels = useCallback(async (key, page = 1, sortSetting, filterSetting, params, updateToken, groupBy) => {\r\n    if(settings.choose_datasource === 'datasource'){\r\n      return data;\r\n    }\r\n    let queryData = {page};\r\n    const filterSettingJSON = JSON.stringify(filterSetting);\r\n    if(sortSetting){\r\n      queryData = _.assign(sortSetting, queryData);\r\n    }\r\n    if(updateToken){\r\n      queryData.altrpUdateToken = updateToken;\r\n    }\r\n    if(groupBy){\r\n      queryData.order = 'ASC';\r\n      queryData.order_by = groupBy;\r\n    }\r\n    if(filterSettingJSON.length > 2){\r\n      queryData.filters = filterSettingJSON;\r\n    }\r\n    return await query.getQueried(queryData)\r\n  });\r\n\r\n  if(query.pageSize){\r\n    /**\r\n     * Если есть пагинация\r\n     */\r\n    const {\r\n      status,\r\n      resolvedData,\r\n      latestData,\r\n      error,\r\n    } = usePaginatedQuery([query.dataSourceName, page, sortSetting, filterSetting, query.getParams(), updateToken],\r\n        fetchModels,\r\n        useQuerySettings);\r\n    _data = resolvedData ? resolvedData : _data;\r\n    _status = status;\r\n    _error = error;\r\n    _latestData = latestData;\r\n    useEffect(() => {\r\n      if (latestData?.hasMore) {\r\n        queryCache.prefetchQuery([query.dataSourceName, page + 1], fetchModels);\r\n      }\r\n    }, [latestData, fetchModels, page, sortSetting, filterSetting, updateToken]);\r\n  }else {\r\n    /**\r\n     * Если нет пагинации\r\n     */\r\n    const {status, data, error,} = useQuery([query.dataSourceName,query.getParams(), updateToken],\r\n      (updateToken) => {\r\n        return query.getResource().getQueried({...sortSetting,filters: filterSettingJSON, groupBy})\r\n      }, useQuerySettings);\r\n    _data = data;\r\n    _status = status;\r\n    _error = error;\r\n  }\r\n  if(_.isObject(_data) && ! _.isArray(_data)){\r\n    _data = [_data];\r\n  }\r\n  if(! _data.length){\r\n    _data = data;\r\n  }\r\n\r\n  if(! _.isArray(children)){\r\n    children = [children];\r\n  }\r\n\r\n  if(_.isEmpty(data)){\r\n    data = _data\r\n  }\r\n  React.useEffect(()=>{\r\n    setAltrpIndex(data)\r\n  }, [data]);\r\n  let finalData = React.useMemo(()=>{\r\n    if(! _.isArray(data)){\r\n      if(_.isObject(data)){\r\n        return [data]\r\n      }\r\n      return [];\r\n    }\r\n    return data;\r\n  }, [data]);\r\n  const childrenProps = {...props,\r\n    data: finalData,\r\n    _status,\r\n    setFilterSettings,\r\n    setSortSettings,\r\n    filterSetting,\r\n    sortSetting,\r\n    _latestData,\r\n    setPage,\r\n    page,\r\n    _error};\r\n  return children.map(child => React.cloneElement(child, {...childrenProps, key:child.key}));\r\n\r\n};\r\n\r\nexport default AltrpQueryComponent"],"sourceRoot":""}