{"version":3,"sources":["webpack:///./resources/modules/admin/src/components/AutoUpdateInput.js","webpack:///./resources/modules/admin/src/js/helpers.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/altrp-table.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/components/TableComponent.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/components/HeaderCellComponent.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/components/CellComponent.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/components/Cell.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/components/Row.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/components/SubheadingRow.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/components/TableBodyContent.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/components/TableBody.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/altrp-table-without-update.js","webpack:///./resources/modules/editor/src/js/components/widgets/TableWidget.js"],"names":["AutoUpdateInput","props","resource","Resource","route","state","value","disabled","changeValue","bind","onChange","onKeyDown","prevProps","prevState","this","console","log","setState","undefined","resourceid","get","res","e","keyCode","newValue","target","_","isFunction","changevalue","onBlur","put","column_value","className","inputProps","Component","iconsManager","window","IconsManager","Link","AltrpTable","settings","query","data","_status","currentModel","_error","setSortSettings","setFilterSettings","filterSetting","setPage","_latestData","page","sortSetting","tables_columns","length","children","defaultSortSettings","forEach","column","column_is_default_sorted","order_by","accessor","order","groupBy","React","getGroupBy","columns","counter","getCounterStart","collapsing","group_collapsing","collapsedGroups","setCollapsedGroups","useState","updatedData","setUpdatedData","doubleClicked","setDoubleClicked","groupingStore","settingsToColumns","map","row","id","rowId","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","sortingHandler","filterHandler","filteredColumn","searchString","filterParams","renderAdditionalRows","headerGroup","getHeaderGroupProps","headers","renderTh","table_style_table_striple_style","message","i","rowStyles","original","mbParseJSON","key","renderGroupingTr","getRowProps","style","table_hover_row","indexOf","last","cells","cell","_i","cellContent","render","linkTag","isEditor","column_external_link","column_body_alignment","textAlign","cellProps","getCellProps","_cellContent","doubleClickContent","column_is_editable","column_edit_url","columnEditUrl","parseURLTemplate","_accessor","onDoubleClick","cellClassName","isObject","column_link","to","href","column_blank_link","dangerouslySetInnerHTML","__html","trim","cellStyles","assign","renderCellActions","isString","renderFooter","paginationType","pageSize","onClick","old","Math","max","prev_text","current_page_text","hasMore","next_text","_column","column_name","actions","push","additional_rows","isArray","additional_cells","rowspan","colspan","role","colSpan","rowSpan","title","column_width","column_header_alignment","thProps","getHeaderProps","width","column_is_sorted","thText","renderIcon","column_is_filtered","type","stopPropagation","group_by","text","collapsed","collapsed_icon","expanded_icon","toggleGroup","renderAsset","assetType","name","currentRowHeading","filter","g","footerColumns","footer_columns","footerColumn","column_footer_alignment","content","altrphelpers","context","replace","eval","error","replaceContentWithData","action","tag","actionContent","link","actionProps","classes","marginLeft","marginRight","marginTop","marginBottom","target_blank","iconSize","iconProps","height","icon","getResponsiveSetting","altrpHelpers","styled","table_style_main_width","table_style_other_width","styles","table_transpose","column_cell_vertical_alignment","header_full_width","header_bg","verticalAlign","verticalAlignToAlignItems","color","filteredRows","body_bg","resize_columns","replace_rows","virtualized_rows","hide_expanded_row_icon","expanded_row_icon","hide_not_expanded_row_icon","not_expanded_row_icon","index","isGrouped","getToggleRowExpandedProps","isExpanded","recurseCount","isAggregated","isPlaceholder","cellClassNames","useMemo","join","backgroundColor","moveRow","visibleColumns","cardTemplate","dropRef","useRef","dragRef","fragmentProps","ExpandCard","row_expand","card_template","replace_text","replace_image","replace_width","template","frontElementsFabric","setCardModel","AltrpModel","createElement","componentClass","element","ElementWrapper","rowProps","ref","useDrop","accept","hover","item","monitor","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","drop","useDrag","collect","isDragging","drag","opacity","preview","Fragment","url","src","idx","groupIndex","groupsStylesSettings","groupsSettings","transition","cell_alignment","padding","bg_color","typographic","stringStyles","size","dimensionsControllerToStyles","typographicControllerToStyles","cell_alignment_hover","padding_hover","color_hover","bg_color_hover","typographic_hover","TableBodyContent","totalColumnsWidth","scrollBarSize","scrollbarWidth","virtualized_height","item_size","tables_settings_for_subheading","RenderRow","itemCount","groups","isEmpty","leftValue","rightValue","columnName","split","columnValue","currentGroup","find","group","Number","itemSize","_props","isStriped","contentProps","sortedColumns","sortedDirections","includesSome","ids","filterValue","some","rowValue","values","val","includes","fuzzyTextFilterFn","matchSorter","keys","fullMatchTextFilterFn","partialMatchTextFilterFn","AltrpTableWithoutUpdate","currentScreen","widgetId","widgetState","stateRef","inner_page_size","global_filter","selected_storage","row_select","row_select_width","store_state","loading_text","row_select_all","hide_columns","ids_storage","hide_grouped_column_icon","grouped_column_icon","hide_not_grouped_column_icon","not_grouped_column_icon","checkbox_checked_icon","checkedIcon","checkbox_unchecked_icon","uncheckedIcon","checkbox_indeterminate_icon","indeterminateIcon","setCardTemplate","records","setRecords","filterTypes","fuzzyText","fullMatchText","partialMatchText","String","toLowerCase","startsWith","between","_ref","min","Infinity","temp","equals","defaultColumn","Filter","DefaultColumnFilter","Cell","DefaultCell","edit_disabled","columnOrder","column_filter_type","NumberRangeColumnFilter","SliderColumnFilter","SelectColumnFilter","column_text_filter_type","canGroupBy","disableSortBy","aggregate","aggregateTemplate","aggregate_template","Aggregated","unshift","getToggleAllRowsExpandedProps","isAllRowsExpanded","canExpand","paddingLeft","depth","columnIndex","parseInt","templateLoader","plugins","useFilters","useGlobalFilter","useGroupBy","useSortBy","useExpanded","usePagination","useRowSelect","useResizeColumns","useBlockLayout","hooks","getToggleAllRowsSelectedProps","getToggleAllPageRowsSelectedProps","IndeterminateCheckbox","icons","getToggleRowSelectedProps","skipPageReset","setSkipPageReset","updateData","rowIndex","columnId","getRowId","tableSettings","autoResetPage","initialState","sortBy","desc","set","ReactTable","pageCount","canPreviousPage","canNextPage","pageOptions","gotoPage","nextPage","previousPage","getToggleHideAllColumnsProps","allColumns","preGlobalFilteredRows","setGlobalFilter","setPageSize","selectedFlatRows","reactTableState","pageIndex","globalFilter","selectedRowIds","expanded","flatRows","field","_rows","r","subRows","concat","storeWidgetState","originalSelectedRows","selectedIds","isEqual","getDataByPath","setDataByPath","paginationProps","tableElement","getToggleHiddenProps","table","headerGroupProps","columnProps","getSortByToggleProps","resizerProps","getResizerProps","columnNameContent","unset","getGroupByToggleProps","isSorted","isSortedDesc","isResizing","GlobalFilter","dragRecord","update","$splice","Pagination","preFilteredRows","setFilter","filter_placeholder","count","placeholder","options","_options","Set","add","option","label","AltrpSelect","isMulti","classNamePrefix","v","filter_button_text","buttonText","filter_max_placeholder","filter_min_placeholder","minPlaceHolder","maxPlaceHolder","display","autoRemove","indeterminate","rest","defaultRef","resolvedRef","checked","renderAssetIcon","global_filter_placeholder","global_filter_label","setValue","useAsyncDebounce","labelText","htmlFor","choose_datasource","Array","from","setAltrpIndex","initialValue","column_template","column_cell_content_type","substring","columnTemplate","setColumnTemplate","fetchTemplate","columnTemplateContent","getWidgetState","globalDefaults","getSettings","TableComponent","component","elementDecorator","baseRender","scrollbar","createRef","getId","modelName","dataSource","getProperty","path","getCurrentModel","getData","table_query","Query","showTable","scrollbarsProps","zIndex","autoHeight","autoHideTimeout","autoHideDuration","renderTrackVertical","autoHeightMax","autoHide","renderTrackHorizontal","updateToken","getFromModel","modelData"],"mappings":"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","file":"TableWidget.7bbd9b9e49fa72fd9d7e.bundle.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport Resource from \"../../../editor/src/js/classes/Resource\";\r\n\r\nclass AutoUpdateInput extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.resource = new Resource({\r\n      route: this.props.route,\r\n    });\r\n\r\n    this.state = {\r\n      value: this.props.value || '',\r\n      disabled: ! this.props.value,\r\n    };\r\n    this.changeValue = this.changeValue.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onKeyDown = this.onKeyDown.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Обновление роута или значения через пропсы\r\n   * @param {{}} prevProps\r\n   * @param {{}} prevState\r\n   */\r\n  componentDidUpdate(prevProps, prevState){\r\n    if(prevProps.route !== this.props.route){\r\n      this.resource = new Resource({\r\n        route: this.props.route,\r\n      });\r\n      console.log(this.resource);\r\n    }\r\n    if(prevProps.value !== this.props.value && this.props.value !== this.state.value){\r\n      // console.log(this.props.value);\r\n      this.setState(state =>({...state, value: this.props.value}));\r\n    }\r\n  }\r\n\r\n  async componentDidMount(){\r\n    if(this.props.value !== undefined || ! this.props.resourceid){\r\n      return;\r\n    }\r\n    let res = await this.resource.get(this.props.resourceid);\r\n    this.setState(state=>{\r\n      return{...state,\r\n        value: res[this.props.resourceid] || '',\r\n        disabled: false,\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * При нажатии на enter тоже обновим данные\r\n   * @param e\r\n   */\r\n  onKeyDown(e){\r\n    if(e.keyCode === 13){\r\n      this.changeValue(e);\r\n    }\r\n  }\r\n\r\n  onChange(e){\r\n    let newValue = e.target.value;\r\n    this.setState(state=>{\r\n      return{...state,\r\n        value: newValue,\r\n      }\r\n    });\r\n    if(_.isFunction(this.props.changevalue)){\r\n      this.props.changevalue(newValue);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Запрос на именение поля\r\n   * @param e\r\n   * @return {Promise<void>}\r\n   */\r\n  async changeValue(e){\r\n    let newValue = e.target.value;\r\n    this.setState(state=>{\r\n      return{...state,\r\n        disabled: true,\r\n      }\r\n    });\r\n    if(_.isFunction(this.props.onBlur)){\r\n      this.props.onBlur(newValue);\r\n    }\r\n    let res = await this.resource.put(this.props.resourceid, {value: newValue, column_value: newValue});\r\n\r\n    this.setState(state=>{\r\n      return{...state,\r\n        disabled: false,\r\n      }\r\n    });\r\n  }\r\n  render(){\r\n    let {className} = this.props;\r\n    if(this.state.disabled){\r\n      className += ' pointer-event-none';\r\n    }\r\n    const inputProps = {...this.props};\r\n    delete inputProps.changevalue;\r\n    return<input{...inputProps} className={className}\r\n                onBlur={this.changeValue}\r\n                onKeyDown={this.onKeyDown}\r\n                onChange={this.onChange}\r\n                value={this.state.value}/>\r\n  }\r\n}\r\n\r\nexport default AutoUpdateInput","import IconsManager from \"../../../editor/src/js/classes/modules/IconsManager\";\r\nimport Resource from \"../../../editor/src/js/classes/Resource\";\r\nimport { isEmpty } from \"lodash\";\r\n\r\nexport function redirect(url) {\r\n  url = url || '/';\r\n  window.location.assign(url);\r\n}\r\nexport function generateId() {\r\n  return '_' + Math.random().toString(36).substr(2, 9);\r\n}\r\n/**\r\n * @return {IconsManager}\r\n* */\r\nexport function iconsManager() {\r\n  if (!window.iconsManager) {\r\n    window.iconsManager = new IconsManager();\r\n  }\r\n  return window.iconsManager;\r\n}\r\n\r\nexport async function logout() {\r\n  let res = await (new Resource({ route: '/logout' })).post();\r\n  redirect(res.location)\r\n}\r\n\r\nexport function pageReload() {\r\n  document.location.reload(true);\r\n}\r\n\r\nconst a = { \"Ё\": \"Yo\", \"Й\": \"I\", \"Ц\": \"Ts\", \"У\": \"U\", \"К\": \"K\", \"Е\": \"E\", \"Н\": \"N\", \"Г\": \"G\", \"Ш\": \"Sh\", \"Щ\": \"Sch\", \"З\": \"Z\", \"Х\": \"H\", \"Ъ\": \"\", \"ё\": \"yo\", \"й\": \"i\", \"ц\": \"ts\", \"у\": \"u\", \"к\": \"k\", \"е\": \"e\", \"н\": \"n\", \"г\": \"g\", \"ш\": \"sh\", \"щ\": \"sch\", \"з\": \"z\", \"х\": \"h\", \"ъ\": \"\", \"Ф\": \"F\", \"Ы\": \"I\", \"В\": \"V\", \"А\": \"a\", \"П\": \"P\", \"Р\": \"R\", \"О\": \"O\", \"Л\": \"L\", \"Д\": \"D\", \"Ж\": \"ZH\", \"Э\": \"E\", \"ф\": \"f\", \"ы\": \"i\", \"в\": \"v\", \"а\": \"a\", \"п\": \"p\", \"р\": \"r\", \"о\": \"o\", \"л\": \"l\", \"д\": \"d\", \"ж\": \"zh\", \"э\": \"e\", \"Я\": \"Ya\", \"Ч\": \"CH\", \"С\": \"S\", \"М\": \"M\", \"И\": \"I\", \"Т\": \"T\", \"Ь\": \"\", \"Б\": \"B\", \"Ю\": \"YU\", \"я\": \"ya\", \"ч\": \"ch\", \"с\": \"s\", \"м\": \"m\", \"и\": \"i\", \"т\": \"t\", \"ь\": \"\", \"б\": \"b\", \"ю\": \"yu\" };\r\n\r\n/**\r\n * Транслитерация\r\n * @param {string}str\r\n * @return {string}\r\n */\r\nexport function transliterate(str) {\r\n  if (!str) {\r\n    return \"\";\r\n  }\r\n  return str.split('').map(function (char) {\r\n    return _.isUndefined(a[char]) ? char : a[char];\r\n  }).join(\"\");\r\n}\r\n\r\n/**\r\n * Парсит строку в name для БД\r\n * @param {string}str\r\n * @return {string}\r\n */\r\nexport function titleToName(str) {\r\n  str = transliterate(str);\r\n  return str.toLowerCase().replace(/^\\d+/, '').replace(/[^\\d\\w]/g, '_');\r\n\r\n}\r\n\r\nexport function titleToPath(str) {\r\n  str = transliterate(str);\r\n  return str.toLowerCase().replace(/^\\d+/, '').replace(/[^\\d\\w]/g, '-');\r\n\r\n}\r\n/** @function objectDeepCleaning\r\n  * Удаляет все свойства id, и чистит settings (пока нет) todo: нужна оптимизация\r\n  * @param {object} collection\r\n  * @return {object} Объект после удаления всех свойств id, и чистки settings\r\n */\r\nexport function objectDeepCleaning(collection) {\r\n  return collection;\r\n  if (typeof collection !== \"object\" || collection === null) return collection;\r\n  if (collection.id) delete collection.id;\r\n\r\n  if (Array.isArray(collection)) {\r\n    for (let index = 0; index < collection.length; index++) {\r\n      const element = collection[index];\r\n      objectDeepCleaning(element);\r\n    }\r\n  } else {\r\n    if (collection.hasOwnProperty(\"settings\")) deleteEmptyPropsDeep(collection.settings);\r\n    if (isEmpty(collection.settings)) delete collection.settings; // удаляем settings, если оно - пустой объект\r\n    for (const key in collection) {\r\n      if (collection.hasOwnProperty(key)) {\r\n        const element = collection[key];\r\n        objectDeepCleaning(element);\r\n      }\r\n    }\r\n  }\r\n  return collection;\r\n}\r\n/** @function deleteEmptyPropsDeep\r\n  * Удаляет в объекте все свойства, значения которых - null, или \"\", или {}\r\n  * @param {object} collection\r\n */\r\nexport function deleteEmptyPropsDeep(collection) {\r\n  const deleteProps = [];\r\n  for (const key in collection) {\r\n    if (collection[key] === null || collection[key] === \"\") {\r\n      deleteProps.push(key);\r\n    }\r\n    deleteProps.forEach(key => delete collection[key]);\r\n\r\n    if (typeof collection[key] === \"object\") {\r\n      deleteEmptyPropsDeep(collection[key]);\r\n      if (isEmpty(collection[key])) delete collection[key];\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport function buildPagesTree(pages) {\r\n  const level = 0;\r\n  const tree = [];\r\n  const roots = pages.filter(({ parent_page_id }) => parent_page_id === null);\r\n\r\n  if (!roots.length) return pages;\r\n\r\n  roots.forEach(root => {\r\n    tree.push(root);\r\n    treeRecursion(root.id, level + 1);\r\n  });\r\n\r\n  function treeRecursion(parentId, level) {\r\n    const children = pages.filter(({ parent_page_id }) => parent_page_id === parentId);\r\n    children.forEach(page => {\r\n      page.title = \"—\".repeat(level) + page.title;\r\n      tree.push(page);\r\n      treeRecursion(page.id, level + 1);\r\n    });\r\n  }\r\n\r\n  return tree;\r\n}\r\n\r\nexport function filterUsers(users, roleFilter) {\r\n  return users.filter(user => user.roles.some(role => role.id === roleFilter));\r\n}\r\n\r\n\r\nexport function sortUsers(users, sortingField, order) {\r\n  const sortedUsers = users.sort((a, b) => {\r\n    if (a[sortingField] < b[sortingField]) {\r\n      return -1;\r\n    }\r\n    if (a[sortingField] > b[sortingField]) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n\r\n  return order === 'ASC' ? sortedUsers : sortedUsers.reverse();\r\n}","import React, { useState, } from \"react\";\r\nimport {useTable, } from \"react-table\";\r\nimport ('../../../sass/altrp-pagination.scss');\r\nimport {\r\n  isEditor, mbParseJSON,\r\n  parseURLTemplate, renderAsset, replaceContentWithData\r\n} from \"../../../../../front-app/src/js/helpers\";\r\nimport {iconsManager} from \"../../../../../admin/src/js/helpers\";\r\nimport AutoUpdateInput from \"../../../../../admin/src/components/AutoUpdateInput\";\r\nimport AltrpQueryComponent from \"../altrp-query-component/altrp-query-component\";\r\nconst Link = window.Link\r\n\r\n/**\r\n *\r\n * @param settings\r\n * @param {Query} query\r\n * @param {{}} data\r\n * @param {AltrpModel} currentModel\r\n * @param {string} _status\r\n * @param {{}} _error\r\n * @param {function} setSortSettings\r\n * @param {function} setFilterSettings\r\n * @param {function} setPage\r\n * @param {{}} filterSetting\r\n * @param {{}} sortSetting\r\n * @param {int} page\r\n * @param {[]} _latestData\r\n * @return {*}\r\n * @constructor\r\n */\r\nconst AltrpTable = ({settings,\r\n                      query,\r\n                      data,\r\n                      currentModel,\r\n                      _status,\r\n                      _error,\r\n                      setSortSettings,\r\n                      setFilterSettings,\r\n                      filterSetting,\r\n                      setPage,\r\n                      _latestData,\r\n                      page,\r\n                      sortSetting}) => {\r\n  if (! (settings.tables_columns && settings.tables_columns.length)) {\r\n    return <div children=\"Please Add Column\"/>\r\n  }\r\n\r\n  const defaultSortSettings =  {};\r\n  settings.tables_columns.forEach(column => {\r\n    if(column.column_is_default_sorted && !defaultSortSettings.order_by){\r\n      defaultSortSettings.order_by = column.accessor;\r\n      defaultSortSettings.order = _.get(column, 'column_is_default_sorted_direction', 'ASC')\r\n    }\r\n  });\r\n  let groupBy = React.useMemo(\r\n      ()=> {\r\n        return _.get(settings, 'group_by_column_name') ? _.get(settings, 'group_by_column_name') : getGroupBy(settings.tables_columns)\r\n      }, [settings]\r\n      );\r\n  React.useEffect(()=>{\r\n    if(groupBy){\r\n      setSortSettings({\r\n        order: 'ASC',\r\n        order_by: groupBy,\r\n      })\r\n    }\r\n  }, [groupBy]);\r\n\r\n  let counter = query.getCounterStart(page);\r\n\r\n  const collapsing = React.useMemo(()=>settings.group_collapsing);\r\n  const collapsedInitiate = [];\r\n  const [collapsedGroups, setCollapsedGroups] = React.useState(collapsedInitiate);\r\n  const [updatedData, setUpdatedData] = useState({});\r\n  const [doubleClicked, setDoubleClicked] =  useState({});\r\n  const groupingStore = [];\r\n\r\n\r\n  let columns = [];\r\n  columns = settingsToColumns(settings);\r\n\r\n  /**\r\n   * обновление данных при изменении ячейки\r\n   * @type {any[]}\r\n   * @private\r\n   */\r\n  data = data.map((row)=>{\r\n    if(row.id === updatedData.rowId){\r\n      row[updatedData.column] = updatedData.value;\r\n      return{...row};\r\n    }\r\n    return row;\r\n  });\r\n  let {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({\r\n    columns: React.useMemo(\r\n        () => (\r\n            columns || []\r\n        ),\r\n        [settings.tables_columns]\r\n    ),\r\n    data: React.useMemo(() => (data || []), [data]),\r\n  }, );\r\n  /**\r\n   * Обработка клика для сортировки\r\n   */\r\n  const sortingHandler = order_by => {\r\n    setSortSettings({\r\n    order_by,\r\n    order: sortSetting &&\r\n      (sortSetting.order_by === order_by) ? (sortSetting.order === \"DESC\" ? \"ASC\" :  \"DESC\") : \"ASC\"\r\n  });\r\n  };\r\n  /**\r\n   * Изменение поля для фильтрации\r\n   */\r\n  const filterHandler = (filteredColumn, searchString) => {\r\n    setPage(1);\r\n    const filterParams = {...filterSetting};\r\n    if(searchString){\r\n      filterParams[filteredColumn] = searchString;\r\n    } else {\r\n      delete filterParams[filteredColumn];\r\n    }\r\n    setFilterSettings(filterParams);\r\n  };\r\n\r\n  return <><table className={\"altrp-table altrp-table_columns-\" + columns.length} {...getTableProps()}>\r\n    <thead className=\"altrp-table-head\">\r\n    {renderAdditionalRows(settings)}\r\n    {headerGroups.map(headerGroup => (\r\n        <tr {...headerGroup.getHeaderGroupProps()} className=\"altrp-table-tr\">\r\n          {headerGroup.headers.map(column => {\r\n            return renderTh({column, sortSetting, sortingHandler, filterSetting, filterHandler});\r\n          }\r\n          )}\r\n        </tr>\r\n    ))}\r\n    </thead>\r\n    <tbody {...getTableBodyProps()} className={`altrp-table-tbody ${settings.table_style_table_striple_style ? ' altrp-table-tbody--striped' : ''}`}>\r\n    {_status === \"error\" ? <tr>\r\n        <td>{_error.message}</td>\r\n      </tr> : _status === \"loading\" ? <tr>\r\n        <td>Loading</td>\r\n      </tr>\r\n      : rows.map((row, i) => {\r\n          prepareRow(row);\r\n          let rowStyles = _.get(settings, 'field_name_for_row_styling');\r\n          rowStyles = _.get(row.original, rowStyles, '');\r\n          rowStyles = mbParseJSON(rowStyles, {});\r\n\r\n          return (<React.Fragment key={row.id}>\r\n                {renderGroupingTr(row, groupBy, groupingStore, settings, collapsing, setCollapsedGroups, collapsedGroups)}\r\n            <tr {...row.getRowProps()}\r\n                style={rowStyles}\r\n                className={`altrp-table-tr ${settings.table_hover_row ? 'altrp-table-background' : ''} ${\r\n                  /**\r\n                   * Проверка нужно ли скрыть эту строку\r\n                   */\r\n                    (collapsing && (collapsedGroups.indexOf(_.last(groupingStore)) !== -1)) ? 'altrp-d-none' : ''\r\n                    }`}>\r\n              {row.cells.map((cell, _i) => {\r\n                let cellContent = cell.render('Cell');\r\n                let linkTag = isEditor() ? 'a': Link;\r\n                if(columns[_i].column_external_link && ! isEditor()) {\r\n                  linkTag = 'a';\r\n                }\r\n\r\n                let style = cell.column.column_body_alignment ? { textAlign: cell.column.column_body_alignment } : {};\r\n                const cellProps = {...cell.getCellProps()};\r\n                let _cellContent = cell.value;\r\n\r\n                /**\r\n                 * Если в настройках колонки установлено редактирование и есть url запроса на редактирование\r\n                 * то добавляем особое поведение\r\n                 */\r\n                let doubleClickContent = '';\r\n                if(columns[_i].column_is_editable && columns[_i].column_edit_url){\r\n                  let columnEditUrl = parseURLTemplate(columns[_i].column_edit_url, row.original);\r\n\r\n                  doubleClickContent =\r\n                      <AutoUpdateInput className=\"altrp-inherit altrp-table-td__double-click-content\"\r\n                                       route={columnEditUrl}\r\n                                       resourceid={''}\r\n                                       changevalue={(value)=>{\r\n                                         setUpdatedData({\r\n                                           value,\r\n                                           rowId:row.original.id,\r\n                                           column:columns[_i]._accessor\r\n                                         });\r\n                                       }}\r\n                                       value={_cellContent}/>;\r\n                  cellProps.onDoubleClick = () => {\r\n                    if(doubleClicked.column === columns[_i]._accessor && doubleClicked.rowId === row.original.id){\r\n                      setDoubleClicked({});\r\n                    } else {\r\n                      setDoubleClicked({\r\n                        column: columns[_i]._accessor,\r\n                        rowId: row.original.id,\r\n                      });\r\n                    }\r\n                  };\r\n                }\r\n                let cellClassName = `altrp-table-td ${cell.column.column_body_alignment ? `altrp-table-td_alignment-${cell.column.column_body_alignment}` : '' } `;\r\n                if(doubleClicked.column === columns[_i]._accessor && row.original.id === doubleClicked.rowId){\r\n                  cellClassName += ' altrp-table-td_double-clicked';\r\n                }\r\n              /**\r\n               * Если в настройках table_hover_row: false, - background для отдельной ячейки\r\n               */\r\n                if (!settings.table_hover_row) {\r\n                  cellClassName += ' altrp-table-background';\r\n                }\r\n\r\n                /**\r\n                 * Если значение объект или массив, то отобразим пустую строку\r\n                 */\r\n                if(_.isObject(cell.value)){\r\n                  cellContent = '';\r\n                }\r\n                /**\r\n                 * Если в настройках колонки есть url, и в данных есть id, то делаем ссылку\r\n                 */\r\n                if(columns[_i].column_link){\r\n                  cellContent = React.createElement(linkTag, {\r\n                    to: parseURLTemplate(columns[_i].column_link, row.original),\r\n                    href: parseURLTemplate(columns[_i].column_link, row.original),\r\n                    target: columns[_i].column_blank_link ? '_blank' : '',\r\n                    className: 'altrp-inherit altrp-table-td__default-content',\r\n                    dangerouslySetInnerHTML: {\r\n                      __html: cell.value\r\n                    }\r\n                  })\r\n                } else {\r\n                  cellContent = React.createElement('span', {\r\n                    className: 'altrp-inherit altrp-table-td__default-content',\r\n                    dangerouslySetInnerHTML: {\r\n                       __html: cell.value\r\n                    }\r\n                  })\r\n                }\r\n                /**\r\n                 * Если нужно указать номер по порядку\r\n                 */\r\n                if(cell.column._accessor && (cell.column._accessor.trim() === '##')){\r\n                  cellContent = (counter++) + '';\r\n                }\r\n                let cellStyles = _.get(cell, 'column.column_styles_field');\r\n                cellStyles = _.get(row.original, cellStyles, '');\r\n                cellStyles = mbParseJSON(cellStyles, {});\r\n\r\n                style = _.assign(style, cellStyles);\r\n                /**\r\n                 * Если есть actions, то надо их вывести\r\n                 */\r\n                if(_.get(cell,'column.actions.length')){\r\n                  return <td {...cellProps}\r\n                             className={cellClassName}\r\n                             style={style}>{renderCellActions(cell, row)}</td>\r\n                }\r\n                if(_.isString(cellContent) && ! doubleClickContent){\r\n                  return <td {...cellProps}\r\n                             className={cellClassName}\r\n                             dangerouslySetInnerHTML={\r\n                               {__html:cellContent + ''}\r\n                             }\r\n                             style={style}>\r\n                  </td>\r\n                }\r\n                return <td {...cellProps}\r\n                           className={cellClassName}\r\n                           style={style}>\r\n                    {cellContent}{doubleClickContent}\r\n                  </td>\r\n              })}\r\n            </tr></React.Fragment>\r\n          )\r\n      })}\r\n    </tbody>\r\n    {renderFooter(settings, data)}\r\n  </table>\r\n    {((query.paginationType === 'prev-next') && query.pageSize) ?\r\n      <div className=\"altrp-pagination\">\r\n        <button className={\"altrp-pagination__previous\"}\r\n                onClick={() => {\r\n                  setPage(old => Math.max(old - 1, 0));\r\n                  setDoubleClicked({});\r\n                  setUpdatedData({});\r\n                }}\r\n                disabled={page === 1}>\r\n          {settings.prev_text || ''}\r\n        </button>\r\n        <div className=\"altrp-pagination__count\">\r\n          {settings.current_page_text || 'Current Page:'}\r\n           {page}\r\n        </div>\r\n        <button className=\"altrp-pagination__next\"\r\n                onClick={() => {\r\n                  setUpdatedData({});\r\n                  setDoubleClicked({});\r\n                  setPage(old => (!_latestData || !_latestData.hasMore ? old : old + 1))\r\n                }}\r\n                disabled={!_latestData || !_latestData.hasMore}>\r\n          {settings.next_text || ''}\r\n\r\n        </button>\r\n      </div> : ''\r\n    }\r\n  </>\r\n};\r\n\r\n/**\r\n * Парсинг колонок из настроек в колонки для react-table\r\n * @param settings\r\n * @return {Array}\r\n */\r\nexport function settingsToColumns(settings) {\r\n  let columns = [];\r\n  let { tables_columns } = settings;\r\n  tables_columns = tables_columns || [];\r\n  /**\r\n   * Если в колонке пустые поля, то мы их игнорируем, чтобы не было ошибки\r\n   */\r\n  tables_columns.forEach(_column => {\r\n    /**\r\n     * Колонку проказываем, если есть accessor или список actions\r\n     */\r\n    if (_column.column_name && ((_column.actions && _column.actions.length) || _column.accessor)) {\r\n      _column._accessor = _column.accessor;\r\n      columns.push(_column);\r\n    }\r\n  });\r\n  return columns;\r\n}\r\n\r\n/**\r\n *\r\n * @param {{}}settings\r\n * @return {string|array}\r\n */\r\nexport function renderAdditionalRows(settings) {\r\n  let { additional_rows } = settings;\r\n  if(! _.isArray(additional_rows)){\r\n    return '';\r\n  }\r\n  return additional_rows.map(row=>{\r\n    row.additional_cells = row.additional_cells || [];\r\n    return<tr key={`additional-row-${row.id}`}>\r\n      {row.additional_cells.map(cell=>{\r\n        cell.rowspan = cell.rowspan || 1;\r\n        cell.colspan = cell.colspan || 1;\r\n        return<th key={`additional-cell-${row.id}-${cell.id}`}\r\n                  role=\"columnheader\"\r\n                  className=\"altrp-table-th altrp-table-cell\"\r\n                  colSpan={cell.colspan}\r\n                  rowSpan={cell.rowspan}>{cell.title}</th>\r\n      })}\r\n    </tr>\r\n  })\r\n}\r\n\r\n/**\r\n * Отрисовка главного заголовка колонки для таблицы\r\n * @param {{}}column\r\n * @param {{}}sortSetting\r\n * @param {{}}filterSetting\r\n * @param {function}sortingHandler\r\n * @param {function}filterHandler\r\n * @return {*}\r\n */\r\nfunction renderTh({column, sortSetting, sortingHandler, filterSetting, filterHandler}){\r\n  const { column_width, column_header_alignment } = column;\r\n  let thProps = {...column.getHeaderProps()};\r\n  const style = {};\r\n  if (column_width) style.width = column_width;\r\n  if (column_header_alignment) style.textAlign = column_header_alignment;\r\n  thProps.className = 'altrp-table-th';\r\n  if(column.column_is_sorted){\r\n    thProps.onClick = () => sortingHandler(column._accessor);\r\n    thProps.className += ' clickable'\r\n  }\r\n  if(column.column_width){\r\n    thProps.width = column.column_width + '%';\r\n  }\r\n  let thText = column.render('column_name');\r\n  return <th {...thProps} style={style}>\r\n    {thText}\r\n    { sortSetting && column.column_is_sorted && (sortSetting.order_by === column._accessor)\r\n      && (sortSetting.order === \"DESC\" ?\r\n        iconsManager().renderIcon('chevron', {className:'rotate-180 sort-icon '}) :\r\n        iconsManager().renderIcon('chevron', {className: 'sort-icon'}))}\r\n    {column.column_is_filtered &&\r\n    <label className=\"altrp-label\">\r\n    <input type=\"text\"\r\n           onClick={e => {e.stopPropagation()}}\r\n           onChange={e=>{\r\n             e.stopPropagation();\r\n             let value = e.target.value;\r\n             filterHandler(column._accessor, value)\r\n           }}\r\n           value={filterSetting[column._accessor] || ''}\r\n           className=\"altrp-field\"/>\r\n    </label>}\r\n\r\n  </th>\r\n}\r\n\r\n/**\r\n * Получить поле для группировки строк\r\n * @param {array} columns - array({\r\n *  group_by:{boolean},\r\n *  accessor:{string},\r\n * })\r\n *\r\n * @return {string|null}\r\n */\r\nfunction getGroupBy(columns){\r\n  let groupBy = null;\r\n  columns.forEach(column=>{\r\n    if(column.group_by){\r\n      groupBy = column.accessor;\r\n    }\r\n  });\r\n  return groupBy;\r\n}\r\n\r\n/**\r\n * Выводит группирующую строку в таблице\r\n * @params {{}} row\r\n * @params {null|string} row\r\n * @params {array} groupingStore\r\n * @params {{}} settings\r\n * @params {boolean} collapsing\r\n * @params {function} setCollapsedGroups\r\n * @params {array} collapsedGroups\r\n * @return {string|React.Component}\r\n */\r\nfunction renderGroupingTr(row, groupBy, groupingStore, settings = {}, collapsing, setCollapsedGroups, collapsedGroups){\r\n  if(! groupBy){\r\n    return null;\r\n  }\r\n  let text = _.get(row, 'original.' + groupBy, '');\r\n  if(! text){\r\n    text = _.get(settings, 'group_default_text', '');\r\n  }\r\n  if(groupingStore.indexOf(text) >= 0){\r\n    return null;\r\n  }\r\n  groupingStore.push(text);\r\n  let collapsed = (collapsedGroups.indexOf(text) !== -1);\r\n  let {collapsed_icon, expanded_icon} = settings;\r\n  /**\r\n   * С сервера может приходить массив если иконка удалена\r\n   */\r\n  if(_.isArray(collapsed_icon)){\r\n    collapsed_icon = null;\r\n  }\r\n  if(_.isArray(expanded_icon)){\r\n    expanded_icon = null;\r\n  }\r\n  return text ? <tr className=\"altrp-table-tr\" >\r\n    <td colSpan={_.get(row, 'cells.length', 1)}\r\n        onClick={()=>{\r\n          collapsing && toggleGroup(text, setCollapsedGroups, collapsedGroups)\r\n        }}\r\n        className={`altrp-table-td__grouping altrp-table-td altrp-table-background ${collapsing\r\n            ? (collapsed ? 'altrp-pointer' : 'altrp-pointer active') : ''} `}>\r\n      {collapsing ? (<span className={`altrp-table__collapse-icon ${collapsed ? 'altrp-table__collapse-icon_collapsed' : ''}`}>{\r\n            collapsed ? renderAsset(collapsed_icon || {\r\n                  assetType: \"icon\",\r\n                  name: \"add\",\r\n                })\r\n                : renderAsset(expanded_icon || {\r\n                  assetType: \"icon\",\r\n                  name: \"minus\",\r\n                })\r\n        }</span>\r\n      ) : null}\r\n      {text}\r\n    </td>\r\n  </tr> : null;\r\n}\r\n\r\n/**\r\n * Сохраняет/удаляет текущаю группу по заголовку из с списка схлопнутых групп в таблице\r\n * @param {string} currentRowHeading\r\n * @param {function} setCollapsedGroups - функция задает новый список collapsedGroups\r\n * @param {array} collapsedGroups - список заголовков, которые схлопнуты\r\n */\r\nfunction toggleGroup(currentRowHeading, setCollapsedGroups, collapsedGroups) {\r\n\r\n  if(collapsedGroups.indexOf(currentRowHeading) === -1){\r\n    collapsedGroups.push(currentRowHeading);\r\n    setCollapsedGroups([...collapsedGroups]);\r\n  } else {\r\n    collapsedGroups = _.filter(collapsedGroups, g=>{\r\n      return g !== currentRowHeading;\r\n    });\r\n    setCollapsedGroups(collapsedGroups);\r\n  }\r\n}\r\n\r\n/**\r\n * Отрисовка футера таблицы\r\n * @param {{}}settings\r\n * @param {array}data\r\n */\r\n\r\nfunction renderFooter(settings, data){\r\n  let footerColumns = settings.footer_columns || [];\r\n  if(footerColumns.length === 0){\r\n    return null;\r\n  }\r\n  return <tfoot className=\"altrp-table-foot\">\r\n  <tr className=\"altrp-table-tr\">\r\n    {footerColumns.map(footerColumn=>{\r\n      const style = {\r\n        textAlign: footerColumn.column_footer_alignment || 'left'\r\n      };\r\n      let content = footerColumn.content;\r\n      if(content.indexOf('{{altrphelpers.') !== -1){\r\n        window.altrphelpers.context = data;\r\n        content = content.replace(/{{/g, '').replace(/}}/g, '');\r\n        try{\r\n          content = eval(content);\r\n        } catch(e){\r\n          console.log(content);\r\n          console.error(e);\r\n          content = '';\r\n        }\r\n      } else {\r\n        content = replaceContentWithData(content);\r\n      }\r\n      return <td className=\"altrp-table-td\"\r\n                 key={footerColumn.id}\r\n                 style={style}\r\n                 colSpan={footerColumn.colspan || 1}>{content}</td>\r\n    })}\r\n  </tr>\r\n  </tfoot>\r\n}\r\n\r\n\r\n/**\r\n * Выводит список элементов соответствующих настройкам Actions для колнки\r\n * @param cell\r\n * @param row\r\n */\r\nexport function renderCellActions(cell, row = {}) {\r\n  let actions = _.get(cell,'column.actions', []);\r\n  return <div className=\"altrp-actions\">\r\n    {actions.map(action =>{\r\n      let tag = action.type || 'Link';\r\n      let actionContent = replaceContentWithData(action.text || '');\r\n      let link = parseURLTemplate(action.link, row.original);\r\n      const actionProps = {\r\n        className: 'altrp-actions-item altrp-link ' + (action.classes || ''),\r\n        style: {},\r\n        key: (action.id || '') + (row.id || ''),\r\n        title: action.text || '',\r\n      };\r\n      actionProps.style.marginLeft = _.get(action, 'spacing.left')\r\n          ? _.get(action, 'spacing.left') + _.get(action, 'spacing.unit')\r\n          : null;\r\n      actionProps.style.marginRight = _.get(action, 'spacing.right')\r\n          ? _.get(action, 'spacing.right') + _.get(action, 'spacing.unit')\r\n          : null;\r\n      actionProps.style.marginTop = _.get(action, 'spacing.top')\r\n          ? _.get(action, 'spacing.top') + _.get(action, 'spacing.unit')\r\n          : null;\r\n      actionProps.style.marginBottom = _.get(action, 'spacing.bottom')\r\n          ? _.get(action, 'spacing.bottom') + _.get(action, 'spacing.unit')\r\n          : null;\r\n      if(tag === 'Link'){\r\n        tag = Link;\r\n        actionProps.to = link;\r\n      }\r\n\r\n      if(tag === 'a' && action.target_blank){\r\n        actionProps.target = '_blank';\r\n      }\r\n      if(tag === 'a') {\r\n        actionProps.href = parseURLTemplate(action.link, row.original);\r\n      }\r\n      if(_.get(action, 'icon.assetType')){\r\n        let iconSize = _.get(action, 'size.size') ? _.get(action, 'size.size') + _.get(action, 'size.unit', 'px') : null;\r\n        const iconProps = {className: 'altrp-actions-item__icon',\r\n          style:{\r\n          }};\r\n\r\n        if(iconSize){\r\n          iconProps.style.width = iconSize;\r\n          iconProps.style.height = iconSize;\r\n        }\r\n        actionContent = renderAsset(action.icon, iconProps)\r\n      }\r\n      return React.createElement(tag, actionProps, actionContent);\r\n    })}\r\n  </div>\r\n}\r\n\r\n\r\nexport default (props) => {\r\n  return <AltrpQueryComponent {...props}><AltrpTable/></AltrpQueryComponent>\r\n}\r\n","import styled from 'styled-components';\r\nconst {getResponsiveSetting} = window.altrpHelpers;\r\n\r\nconst TableComponent = styled.div`${({settings, rows})=>{\r\n  if(! getResponsiveSetting(settings, 'table_transpose')){\r\n    return'';\r\n  }\r\n  const table_style_main_width = getResponsiveSetting(settings, 'table_style_main_width');\r\n  const table_style_other_width = getResponsiveSetting(settings, 'table_style_other_width');\r\n  if(_.get(table_style_main_width, 'unit') !== '%'\r\n    && _.get(table_style_other_width, 'unit') !== '%'){\r\n    return'';\r\n  }\r\n  let styles = '';\r\n  styles += `grid-template-columns:${_.get(table_style_main_width, 'size')}${_.get(table_style_main_width, 'unit') || 'px'}`;\r\n  for(let row of rows){\r\n    styles += ` ${_.get(table_style_other_width, 'size')}${_.get(table_style_other_width, 'unit') || 'px'}`;\r\n  }\r\n   styles += ';&&&{width:100%;}';\r\n  return styles\r\n}}`;\r\n\r\n\r\nexport default TableComponent;\r\n","import styled from 'styled-components';\r\nimport {getResponsiveSetting} from \"../../../../../../front-app/src/js/helpers\";\r\nimport {verticalAlignToAlignItems} from \"../../../../../../front-app/src/js/helpers/styles\";\r\n\r\nconst HeaderCellComponent = styled.div`${({settings, column})=>{\r\n  const {\r\n    table_transpose,\r\n  } = settings;\r\n  if(! table_transpose){\r\n    return ''\r\n  }\r\n  const {\r\n    column_cell_vertical_alignment,\r\n    header_full_width,\r\n    header_bg} = column;\r\n\r\n  const table_style_main_width = getResponsiveSetting(settings, 'table_style_main_width');\r\n  const table_style_other_width = getResponsiveSetting(settings, 'table_style_other_width');\r\n  let styles = '&.altrp-table-th.altrp-table-cell{';\r\n\r\n  let verticalAlign = getResponsiveSetting(settings, 'cell_vertical_alignment');\r\n  verticalAlign = verticalAlignToAlignItems(verticalAlign);\r\n  if (column_cell_vertical_alignment) {\r\n    verticalAlign = verticalAlignToAlignItems(column_cell_vertical_alignment);\r\n  }\r\n  if (verticalAlign) {\r\n    styles += `\r\n    display: flex;\r\n    align-items: ${verticalAlign};\r\n    > span{\r\n      display: block;\r\n      width: 100%;\r\n    }\r\n    `\r\n  }\r\n  if(header_bg){\r\n    styles += `background-color:${header_bg.color};`;\r\n  }\r\n  if(header_full_width){\r\n    styles += `\r\n      grid-column-start: 1;\r\n      grid-column-end: ${column.filteredRows.length + 2};\r\n      width: calc(${_.get(table_style_main_width, 'size') + (_.get(table_style_main_width, 'unit') || 'px')} + (${_.get(table_style_other_width, 'size') + (_.get(table_style_other_width, 'unit') || 'px')}) * ${column.filteredRows.length})\r\n    `;\r\n  } else {\r\n  }\r\n\r\n  if(_.get(table_style_main_width, 'unit') !== '%') {\r\n    styles += `\r\n      width: ${_.get(table_style_main_width, 'size') + (_.get(table_style_main_width, 'unit') || 'px')}\r\n    `;\r\n  }\r\n\r\n  styles += `}`;\r\n  return styles;\r\n}}`;\r\n\r\nexport default HeaderCellComponent;\r\n","import styled from 'styled-components';\r\nimport {getResponsiveSetting} from \"../../../../../../front-app/src/js/helpers\";\r\nimport {verticalAlignToAlignItems} from \"../../../../../../front-app/src/js/helpers/styles\";\r\n\r\nconst CellComponent = styled.div`${({settings, column})=>{\r\n  const {\r\n    table_transpose,\r\n  } = settings;\r\n  if(! table_transpose){\r\n    return ''\r\n  }\r\n  const {\r\n    column_cell_vertical_alignment,\r\n    body_bg,\r\n    header_full_width} = column;\r\n  const table_style_other_width = getResponsiveSetting(settings, 'table_style_other_width');\r\n  let verticalAlign = getResponsiveSetting(settings, 'cell_vertical_alignment');\r\n  verticalAlign = verticalAlignToAlignItems(verticalAlign);\r\n  if(column_cell_vertical_alignment){\r\n    verticalAlign = verticalAlignToAlignItems(column_cell_vertical_alignment);\r\n  }\r\n  let styles = '&.altrp-table-td.altrp-table-cell{';\r\n  if(verticalAlign){\r\n    styles += `\r\n    display: flex;\r\n    align-items: ${verticalAlign};\r\n    .altrp-table-td__default-content{\r\n      display: block;\r\n      width: 100%;\r\n    }\r\n    `\r\n  }\r\n  if(header_full_width){\r\n    return `&.altrp-table-td{display:none;}`\r\n  }\r\n  if(body_bg){\r\n    styles +=`background-color:${body_bg.color};`;\r\n  }\r\n  if(_.get(table_style_other_width, 'unit') !== '%'){\r\n    styles += `\r\n    width: ${_.get(table_style_other_width, 'size') + (_.get(table_style_other_width, 'unit') || 'px')};\r\n  `;\r\n  }\r\n  styles += `}`;\r\n  return styles;\r\n}}`;\r\n\r\nexport default CellComponent;\r\n","import {mbParseJSON, recurseCount, renderIcon} from \"../../../../../../front-app/src/js/helpers\";\r\nimport CellComponent from './CellComponent';\r\n/**\r\n * Ячейка\r\n * @return {*}\r\n * @constructor\r\n */\r\nconst Cell = ({ cell, settings }) => {\r\n  const { row, column } = cell;\r\n  const {\r\n    resize_columns,\r\n    replace_rows,\r\n    virtualized_rows,\r\n    hide_expanded_row_icon,\r\n    expanded_row_icon,\r\n    hide_not_expanded_row_icon,\r\n    not_expanded_row_icon\r\n  } = settings;\r\n  let cellContent = cell.render('Cell');\r\n  if (cell.column.id === '##') {\r\n    cellContent = cell.row.index + 1;\r\n  }\r\n  if (cell.isGrouped) {\r\n    cellContent = (\r\n        <>\r\n          <span {...row.getToggleRowExpandedProps()}>\r\n          {row.isExpanded ?\r\n              renderIcon(hide_expanded_row_icon, expanded_row_icon, '👇', 'expanded-row') :\r\n              renderIcon(hide_not_expanded_row_icon, not_expanded_row_icon, '👉', 'not-expanded-row')}\r\n        </span>{' '}\r\n               {cell.render('Cell')} ({recurseCount(row, 'subRows')})\r\n        </>\r\n    );\r\n  } else if (cell.isAggregated) {\r\n    cellContent = cell.render('Aggregated');\r\n  } else if (cell.isPlaceholder) {\r\n    cellContent = cell.render('Cell');\r\n  }\r\n  const cellClassNames = ['altrp-table-td', 'altrp-table-cell'];\r\n  cell.isAggregated && cellClassNames.push('altrp-table-td_aggregated');\r\n  cell.isPlaceholder && cellClassNames.push('altrp-table-td_placeholder');\r\n  cell.isGrouped && cellClassNames.push('altrp-table-td_grouped');\r\n\r\n  let cellProps = React.useMemo(() => {\r\n    let cellProps = cell.getCellProps();\r\n    if (!resize_columns && !virtualized_rows) {\r\n      delete cellProps.style;\r\n    }\r\n    if (_.get(cell, 'column.column_styles_field')) {\r\n\r\n      let cellStyles = _.get(cell, 'column.column_styles_field');\r\n      cellStyles = _.get(row.original, cellStyles, '');\r\n      cellStyles = mbParseJSON(cellStyles, {});\r\n      cellProps.style = _.assign({...cellStyles}, cellProps.style);\r\n    }\r\n    // if(replace_rows){\r\n    //   cellProps.ref = dropRef;\r\n    // }\r\n\r\n    return cellProps;\r\n  }, [resize_columns,\r\n    replace_rows,\r\n    virtualized_rows,\r\n    cell.getCellProps().style.width,\r\n    _.get(cell, 'column.column_styles_field')]);\r\n\r\n  /**\r\n   * Если в настройках table_hover_row: false, - background для отдельной ячейки\r\n   */\r\n  if (!settings.table_hover_row) {\r\n    cellClassNames.join('altrp-table-background');\r\n  }\r\n  // if (!column.column_body_alignment) {\r\n  //   cellClassNames.join( `altrp-table-td_alignment-${column.column_body_alignment}`);\r\n  // }\r\n  let style = {};\r\n\r\n  if (cell.column.column_body_alignment) {\r\n    style.textAlign = cell.column.column_body_alignment;\r\n  }\r\n\r\n  if (cell.column.body_bg) {\r\n    style.backgroundColor = cell.column.body_bg.color;\r\n  }\r\n  style = _.assign(style, cellProps.style || {});\r\n  if (cell.column.column_cell_vertical_alignment && cell.column.column_cell_vertical_alignment !== 'inherit') {\r\n    style.verticalAlign = cell.column.column_cell_vertical_alignment;\r\n  }\r\n\r\n  return <CellComponent {...cellProps}\r\n                        settings={settings}\r\n                        column={column}\r\n                        style={style}\r\n                        className={cellClassNames.join(' ')}>{cellContent}</CellComponent>\r\n};\r\n\r\nexport default Cell;","import { useDrag, useDrop } from 'react-dnd'\r\nimport AltrpModel from \"../../../classes/AltrpModel\";\r\nimport ElementWrapper from \"../../../../../../front-app/src/js/components/ElementWrapper\";\r\nimport {mbParseJSON, recurseCount, renderIcon} from \"../../../../../../front-app/src/js/helpers\";\r\nimport frontElementsFabric from \"../../../../../../front-app/src/js/classes/FrontElementsFabric\";\r\nimport Cell from './Cell';\r\n\r\nconst DND_ITEM_TYPE = 'row';\r\n\r\n/**\r\n * Компонент строки\r\n * @param {{}} row\r\n * @param {number} index\r\n * @param {function} moveRow\r\n * @param {{}} settings\r\n * @param {{}} style\r\n * @param {{}} cardTemplate\r\n * @param {[]} visibleColumns\r\n * @return {*}\r\n * @constructor\r\n */\r\nconst Row = ({ row,\r\n               index,\r\n               moveRow,\r\n               style,\r\n               visibleColumns,\r\n               cardTemplate,\r\n               settings }) => {\r\n  const dropRef = React.useRef(null);\r\n  const dragRef = React.useRef(null);\r\n  const fragmentProps = { ...row.getRowProps() };\r\n  delete fragmentProps.role;\r\n  delete fragmentProps.style;\r\n  let ExpandCard = null;\r\n  const {\r\n    resize_columns,\r\n    replace_rows,\r\n    row_expand,\r\n    virtualized_rows,\r\n    card_template,\r\n    replace_text,\r\n    replace_image,\r\n    replace_width,\r\n  } = settings;\r\n  if (cardTemplate) {\r\n    let template = frontElementsFabric.cloneElement(cardTemplate);\r\n    template.setCardModel(new AltrpModel(row.original || {}));\r\n    ExpandCard = React.createElement(template.componentClass,\r\n        {\r\n          element: template,\r\n          ElementWrapper: ElementWrapper,\r\n          children: template.children\r\n        });\r\n  }\r\n\r\n  let rowProps = React.useMemo(() => {\r\n    let rowProps = row.getRowProps();\r\n    if ((!resize_columns) && !virtualized_rows) {\r\n      delete rowProps.style;\r\n      style = {};\r\n    }\r\n    if (replace_rows) {\r\n      rowProps.ref = dropRef;\r\n    }\r\n    return rowProps;\r\n  }, [resize_columns, replace_rows, virtualized_rows]);\r\n  const [, drop] = useDrop({\r\n    accept: DND_ITEM_TYPE,\r\n    hover(item, monitor) {\r\n      if (!dropRef.current) {\r\n        return\r\n      }\r\n      const dragIndex = item.index;\r\n      const hoverIndex = index;\r\n      // Don't replace items with themselves\r\n      if (dragIndex === hoverIndex) {\r\n        return\r\n      }\r\n      // Determine rectangle on screen\r\n      const hoverBoundingRect = dropRef.current.getBoundingClientRect();\r\n      // Get vertical middle\r\n      const hoverMiddleY =\r\n          (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n      // Determine mouse position\r\n      const clientOffset = monitor.getClientOffset();\r\n      // Get pixels to the top\r\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n      // Only perform the move when the mouse has crossed half of the items height\r\n      // When dragging downwards, only move when the cursor is below 50%\r\n      // When dragging upwards, only move when the cursor is above 50%\r\n      // Dragging downwards\r\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n        return\r\n      }\r\n      // Dragging upwards\r\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n        return\r\n      }\r\n      // Time to actually perform the action\r\n      moveRow(dragIndex, hoverIndex);\r\n      // Note: we're mutating the monitor item here!\r\n      // Generally it's better to avoid mutations,\r\n      // but it's good here for the sake of performance\r\n      // to avoid expensive index searches.\r\n      item.index = hoverIndex\r\n    },\r\n  });\r\n\r\n  const [{ isDragging }, drag, preview] = useDrag({\r\n    item: {  index },\r\n    type: DND_ITEM_TYPE,\r\n    collect: monitor => ({\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n  });\r\n\r\n  const opacity = isDragging ? 0 : 1;\r\n\r\n  preview(drop(dropRef));\r\n  drag(dragRef);\r\n\r\n  // return (\r\n  //     <tr ref={dropRef} style={{ opacity }}>\r\n  //       <td ref={dragRef}>move</td>\r\n  //       {row.cells.map(cell => {\r\n  //         return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n  //       })}\r\n  //     </tr>\r\n  // );\r\n  const rowStyles = React.useMemo(() => {\r\n    if (! resize_columns && ! virtualized_rows) {\r\n      return {};\r\n    }\r\n    return style;\r\n  }, [resize_columns, virtualized_rows, row.getRowProps().style.width]);\r\n  return (\r\n      <React.Fragment {...fragmentProps}>\r\n\r\n        <div {...rowProps} className={`altrp-table-tr ${isDragging ? 'altrp-table-tr__dragging' : ''}`} style={{ ...rowStyles, opacity }}>\r\n          {replace_rows && <div className=\"altrp-table-td replace-text\" ref={dragRef} style={{ width: replace_width }}>\r\n            {replace_text}\r\n            {replace_image && replace_image.url && <img src={replace_image.url} className=\"replace-picture\" />}\r\n          </div>}\r\n\r\n          {row.cells.map((cell, idx) => {\r\n            return <Cell cell={cell} key={idx} settings={settings} />;\r\n            let cellContent = cell.render('Cell');\r\n            if (cell.column.id === '##') {\r\n              cellContent = cell.row.index + 1;\r\n            }\r\n            const { column } = cell;\r\n            if (cell.isGrouped) {\r\n              cellContent = (\r\n                  <>\r\n                    <span {...row.getToggleRowExpandedProps()}>\r\n                  {row.isExpanded ?\r\n                      renderIcon(hide_expanded_row_icon, expanded_row_icon, '👇', 'expanded-row') :\r\n                      renderIcon(hide_not_expanded_row_icon, not_expanded_row_icon, '👉', 'not-expanded-row')}\r\n                </span>{' '}\r\n                       {cell.render('Cell')} ({recurseCount(row, 'subRows')})\r\n                  </>\r\n              );\r\n            } else if (cell.isAggregated) {\r\n              cellContent = cell.render('Aggregated');\r\n            } else if (cell.isPlaceholder) {\r\n              cellContent = cell.render('Cell');\r\n            }\r\n            const cellClassNames = ['altrp-table-td'];\r\n            cell.isAggregated && cellClassNames.push('altrp-table-td_aggregated');\r\n            cell.isPlaceholder && cellClassNames.push('altrp-table-td_placeholder');\r\n            cell.isGrouped && cellClassNames.push('altrp-table-td_grouped');\r\n\r\n            let cellProps = React.useMemo(() => {\r\n              let cellProps = cell.getCellProps();\r\n              if (!resize_columns && !virtualized_rows) {\r\n                delete cellProps.style;\r\n              }\r\n              if (_.get(cell, 'column.column_styles_field')) {\r\n\r\n                let cellStyles = _.get(cell, 'column.column_styles_field');\r\n                cellStyles = _.get(row.original, cellStyles, '');\r\n                cellStyles = mbParseJSON(cellStyles, {});\r\n                cellProps.style = _.assign({...cellStyles}, cellProps.style);\r\n              }\r\n              if (replace_rows) {\r\n                cellProps.ref = dropRef;\r\n              }\r\n\r\n              return cellProps;\r\n            }, [resize_columns, replace_rows, virtualized_rows,\r\n              cell.getCellProps().style.width,\r\n              _.get(cell, 'column.column_styles_field')]);\r\n\r\n            /**\r\n             * Если в настройках table_hover_row: false, - background для отдельной ячейки\r\n             */\r\n            if (!settings.table_hover_row) {\r\n              cellClassNames.join('altrp-table-background');\r\n            }\r\n            if (!column.column_body_alignment) {\r\n              cellClassNames.join(`altrp-table-td_alignment-${column.column_body_alignment}`);\r\n            }\r\n            return <div {...cellProps} className={cellClassNames.join(' ')}>{cellContent}</div>\r\n          })}\r\n        </div>\r\n        {row.isExpanded && row_expand && card_template && cardTemplate &&\r\n        <div className=\"altrp-table-tr altrp-posts\">\r\n          <td colSpan={visibleColumns.length + replace_rows} className=\"altrp-table-td altrp-post\">{ExpandCard}</td>\r\n        </div>\r\n        }\r\n      </React.Fragment>);\r\n};\r\n\r\nexport default Row;\r\n","import styled from 'styled-components';\r\nimport {getResponsiveSetting} from \"../../../../../../front-app/src/js/helpers\";\r\nimport {\r\n  dimensionsControllerToStyles,\r\n  typographicControllerToStyles\r\n} from \"../../../../../../front-app/src/js/helpers/styles\";\r\nconst SubheadingRow = styled.div`\r\n${\r\n  (props)=>{\r\n    const {settings, groupIndex} = props;\r\n    const groupsStylesSettings = getResponsiveSetting(settings, 'tables_groups');\r\n    const groupsSettings = getResponsiveSetting(settings, 'tables_settings_for_subheading');\r\n    const {transition} = _.get(groupsSettings, groupIndex - 1, {});\r\n    if(! _.isArray(groupsStylesSettings) || ! groupIndex){\r\n      return '';\r\n    }\r\n    let styles;\r\n    if(groupIndex > groupsStylesSettings.length){\r\n      styles = groupsStylesSettings[groupsStylesSettings.length - 1];\r\n    } else {\r\n      styles = groupsStylesSettings[groupIndex - 1];\r\n    }\r\n    if(! styles){\r\n      return '';\r\n    }\r\n    if(! _.isObject(styles)){\r\n      return '';\r\n    }\r\n    const {\r\n      cell_alignment, \r\n      padding,\r\n      color,\r\n      bg_color,\r\n      typographic,\r\n    } = styles;\r\n    let stringStyles =  `&.altrp-table-tr .altrp-table-td{`;\r\n    if(transition?.size){\r\n      stringStyles += `transition-duration: ${transition.size}s;`;\r\n    }\r\n    if(_.isObject(padding)){\r\n      stringStyles += dimensionsControllerToStyles(padding)\r\n    }\r\n    if(_.isObject(typographic)){\r\n      stringStyles += typographicControllerToStyles(typographic)\r\n    }\r\n    if(cell_alignment){\r\n      stringStyles += `text-align: ${cell_alignment};`;\r\n    }\r\n    if(color?.color){\r\n      stringStyles += `color: ${color.color};`;\r\n    }\r\n    if(bg_color?.color){\r\n      stringStyles += `background-color: ${bg_color.color};`;\r\n    }\r\n    \r\n    stringStyles += `}&.altrp-table-tr .altrp-table-td:hover{`;\r\n    \r\n    const cell_alignment_hover = styles['cell_alignment_:hover_'];\r\n    const padding_hover = styles['padding_:hover_'];\r\n    const color_hover = styles['color_:hover_'];\r\n    const bg_color_hover = styles['bg_color_:hover_'];\r\n    const typographic_hover = styles['typographic_:hover_'];\r\n\r\n    if(_.isObject(padding_hover)){\r\n      stringStyles += dimensionsControllerToStyles(padding_hover)\r\n    }\r\n    if(_.isObject(typographic_hover)){\r\n      stringStyles += typographicControllerToStyles(typographic_hover)\r\n    }\r\n    if(cell_alignment_hover){\r\n      stringStyles += `text-align: ${cell_alignment_hover};`;\r\n    }\r\n    if(color_hover?.color){\r\n      stringStyles += `color: ${color_hover.color};`;\r\n    }\r\n    if(bg_color_hover?.color){\r\n      stringStyles += `background-color: ${bg_color_hover.color};`;\r\n    }\r\n    stringStyles += `}`;\r\n    return stringStyles;\r\n  }\r\n}`;\r\n\r\nexport default SubheadingRow","import React from \"react\";\r\nimport {FixedSizeList} from \"react-window\";\r\nimport {scrollbarWidth} from \"../../../../../../front-app/src/js/helpers\";\r\nimport Row from './Row';\r\nimport SubheadingRow from \"./SubheadingRow\";\r\n\r\nconst TableBodyContent =\r\n    (props) => {\r\n      const {\r\n        prepareRow,\r\n        rows,\r\n        visibleColumns,\r\n        totalColumnsWidth,\r\n        moveRow,\r\n        settings,\r\n        cardTemplate,\r\n        groupIndex,\r\n        page,\r\n      } = props;\r\n      const scrollBarSize = React.useMemo(() => scrollbarWidth(), []);\r\n      const {\r\n        virtualized_rows,\r\n        virtualized_height,\r\n        item_size,\r\n        tables_settings_for_subheading,\r\n        table_style_table_striple_style: isStriped\r\n      } = settings;\r\n      const RenderRow = React.useCallback(\r\n          ({index, style}) => {\r\n            const row = page ? page[index] : rows[index];\r\n            prepareRow(row);\r\n            return <Row\r\n                index={index}\r\n                row={row}\r\n                visibleColumns={visibleColumns}\r\n                moveRow={moveRow}\r\n                settings={settings}\r\n                cardTemplate={cardTemplate}\r\n                {...row.getRowProps({style})}\r\n            />;\r\n\r\n          }, [page,\r\n            rows,\r\n            visibleColumns,\r\n            settings,\r\n            cardTemplate,\r\n            moveRow,\r\n            prepareRow,]);\r\n      const itemCount = React.useMemo(() => page ? page.length : rows.length, [page, rows]);\r\n      const groups = React.useMemo(() => {\r\n        if (_.isEmpty(tables_settings_for_subheading)) {\r\n          return null;\r\n        }\r\n        let columnName = tables_settings_for_subheading[groupIndex]?.name;\r\n        if (! columnName) {\r\n          return null;\r\n        }\r\n\r\n        let leftValue, rightValue;\r\n        if(columnName.indexOf('?') !== -1 && columnName.indexOf(':') !== -1){\r\n          [leftValue, rightValue] = columnName.split('?')[1].split(':');\r\n          leftValue = leftValue.trim();\r\n          rightValue = rightValue.trim();\r\n          cell.value = cell.value ? leftValue : rightValue;\r\n          columnName = columnName.split('?')[0].trim();\r\n        }\r\n\r\n        let _rows = page ? page : rows;\r\n        const groups = [];\r\n        _rows.forEach(row => {\r\n          let currentGroup = groups.find(group => {\r\n            return group.columnValue === row.original[columnName];\r\n          });\r\n          let columnValue;\r\n          if(leftValue || rightValue){\r\n            columnValue = row.original[columnName] ? leftValue : rightValue;\r\n          } else {\r\n            columnValue = row.original[columnName];\r\n          }\r\n          if (! currentGroup) {\r\n            currentGroup = {\r\n              columnValue,\r\n              rows: [],\r\n            };\r\n            groups.push(currentGroup);\r\n          }\r\n          currentGroup.rows.push(row);\r\n        });\r\n        return groups;\r\n      }, [tables_settings_for_subheading, page, rows]);\r\n      if (! _.isEmpty(groups)) {\r\n        return groups.map((group, idx) => {\r\n          const _props = {...props};\r\n          _props.page = group.rows;\r\n          _props.rows = group.rows;\r\n          _props.groupIndex = groupIndex + 1;\r\n          _props.key = group.columnValue + idx;\r\n          return <React.Fragment key={_props.key}>\r\n            <SubheadingRow className=\"altrp-table-tr altrp-table-tr_group-subheading\"\r\n                           groupIndex={_props.groupIndex}\r\n                           settings={settings}>\r\n              <td colSpan={visibleColumns.length || 1}\r\n                  className=\"altrp-table-td\"\r\n                  dangerouslySetInnerHTML={{__html: group.columnValue === 0 ? '0' : (group.columnValue || '&nbsp;')}}/>\r\n            </SubheadingRow>\r\n            <TableBodyContent {..._props}/>\r\n          </React.Fragment>\r\n        })\r\n\r\n      }\r\n      if (virtualized_rows) {\r\n        return <React.Fragment>\r\n          <FixedSizeList height={Number(virtualized_height) || 0}\r\n                         itemCount={itemCount}\r\n                         itemSize={Number(item_size) || 0}\r\n                         width={totalColumnsWidth + scrollBarSize}\r\n          >\r\n            {RenderRow}\r\n          </FixedSizeList>\r\n        </React.Fragment>\r\n      }\r\n      return <React.Fragment>\r\n        {(page ? page : rows).map((row, i) => {\r\n          prepareRow(row);\r\n          return <Row\r\n              index={i}\r\n              row={row}\r\n              visibleColumns={visibleColumns}\r\n              moveRow={moveRow}\r\n              settings={settings}\r\n              cardTemplate={cardTemplate}\r\n              {...row.getRowProps()}\r\n          />;\r\n        })}\r\n\r\n      </React.Fragment>\r\n    };\r\n\r\nexport default TableBodyContent;\r\n\r\n","import TableBodyContent from \"./TableBodyContent\";\r\nimport React from \"react\";\r\n\r\nconst TableBody =\r\n    (props) => {\r\n      const {\r\n        tables_settings_for_subheading,\r\n        table_style_table_striple_style: isStriped,\r\n\r\n      } = props.settings;\r\n      const contentProps = {...props};\r\n      contentProps.rows = React.useMemo(() => {\r\n        if (_.isEmpty(tables_settings_for_subheading)) {\r\n          return props.rows;\r\n        }\r\n        const sortedColumns = [];\r\n        const sortedDirections = [];\r\n        tables_settings_for_subheading.forEach(item=>{\r\n          if(item.name){\r\n            sortedColumns.push(item.name);\r\n            sortedDirections.push(item.order || 'asc')\r\n          }\r\n        });\r\n      }, [tables_settings_for_subheading]);\r\n      contentProps.groupIndex = 0;\r\n\r\n      return <div {...props.getTableBodyProps()}\r\n                  className={`altrp-table-tbody ${isStriped ? \"altrp-table-tbody--striped\" : \"\"}`}>\r\n        <TableBodyContent {...contentProps}/>\r\n      </div>\r\n    };\r\n\r\nexport default TableBody;","import ('../altrp-posts/altrp-posts.scss');\r\nimport update from 'immutability-helper'\r\nimport ('../../../sass/altrp-pagination.scss');\r\nimport {\r\n  setDataByPath,\r\n  storeWidgetState,\r\n  isEditor, parseURLTemplate,\r\n  renderAssetIcon,\r\n  renderIcon, setAltrpIndex, getResponsiveSetting\r\n} from \"../../../../../front-app/src/js/helpers\";\r\nimport { renderAdditionalRows, renderCellActions, } from \"./altrp-table\";\r\nimport {\r\n  useSortBy,\r\n  useTable,\r\n  usePagination,\r\n  useFilters,\r\n  useGroupBy,\r\n  useGlobalFilter,\r\n  useExpanded,\r\n  useRowSelect,\r\n  useResizeColumns,\r\n  useBlockLayout,\r\n  useAsyncDebounce,\r\n} from \"react-table\";\r\nimport AltrpQueryComponent from \"../altrp-query-component/altrp-query-component\";\r\nimport AltrpSelect from \"../../../../../admin/src/components/altrp-select/AltrpSelect\";\r\nimport { iconsManager } from \"../../../../../admin/src/js/helpers\";\r\nimport { matchSorter } from 'match-sorter'\r\nimport React from \"react\";\r\nimport templateLoader from \"../../classes/modules/TemplateLoader\";\r\nimport frontElementsFabric from \"../../../../../front-app/src/js/classes/FrontElementsFabric\";\r\nimport AltrpModel from \"../../classes/AltrpModel\";\r\nimport ElementWrapper from \"../../../../../front-app/src/js/components/ElementWrapper\";\r\nimport AutoUpdateInput from \"../../../../../admin/src/components/AutoUpdateInput\";\r\nimport TableComponent from \"./components/TableComponent\";\r\nimport HeaderCellComponent from \"./components/HeaderCellComponent\";\r\nimport TableBody from './components/TableBody';\r\nimport Pagination from \"./components/Pagination\";\r\nconst Link = window.Link;\r\n\r\n\r\n/**\r\n *\r\n * @param rows\r\n * @param ids\r\n * @param filterValue\r\n * @return {*}\r\n */\r\nfunction includesSome(rows, ids, filterValue) {\r\n  return rows.filter(function (row) {\r\n    return ids.some(function (id) {\r\n      let rowValue = row.values[id];\r\n      return filterValue.some(function (val) {\r\n        if (!(val || rowValue)) {\r\n          return true;\r\n        }\r\n        if (!_.isString(rowValue)) {\r\n          rowValue += '';\r\n        }\r\n        return rowValue.includes(val);\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\nincludesSome.autoRemove = function (val) {\r\n  return !val || !val.length;\r\n};\r\n\r\n/**\r\n * Фильтрация нечеткого текста\r\n * @param rows\r\n * @param id\r\n * @param filterValue\r\n * @return {*}\r\n */\r\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\r\n  id = id ? id[0] : undefined;\r\n  return matchSorter(rows, filterValue, {\r\n    keys: [row => {\r\n      let rowValue = row.values[id];\r\n      if (id === '##') {\r\n        rowValue = row.index + 1;\r\n      }\r\n      return rowValue\r\n    }]\r\n  })\r\n}\r\nfuzzyTextFilterFn.autoRemove = val => ! val;\r\n/**\r\n * Фильтрация на точное соответствие\r\n * @param rows\r\n * @param id\r\n * @param filterValue\r\n * @return {*}\r\n */\r\nfunction fullMatchTextFilterFn(rows, id, filterValue) {\r\n  id = id ? id[0] : undefined;\r\n  return rows.filter(row => _.get(row, `values.${id}`) === filterValue);\r\n}\r\nfullMatchTextFilterFn.autoRemove = val => ! val;\r\n/**\r\n * Фильтрация на нахождение в тексте\r\n * @param rows\r\n * @param id\r\n * @param filterValue\r\n * @return {*}\r\n */\r\nfunction partialMatchTextFilterFn(rows, id, filterValue) {\r\n  id = id ? id[0] : undefined;\r\n  return rows.filter(row => {\r\n    filterValue = filterValue.replace(/\\s/g, '');\r\n    let value = _.get(row, `values.${id}`, '').replace(/\\s/g, '');\r\n    return value.indexOf(filterValue) !== -1\r\n  });\r\n}\r\npartialMatchTextFilterFn.autoRemove = val => ! val;\r\n/**\r\n * Компонент, который работает только с внешними данными, которые не обновляются с сервера\r\n * @param {{}} settings\r\n * @param {string} widgetId\r\n * @param {Query} query\r\n * @param {{}} data\r\n * @param {AltrpModel} currentModel\r\n * @param {string} _status\r\n * @param {{}} _error\r\n * @param {function} setSortSettings\r\n * @param {function} setFilterSettings\r\n * @param {function} setPage\r\n * @param {{}} filterSetting\r\n * @param {{}} sortSetting\r\n * @param {[]} _latestData\r\n * @param {{}} widgetState\r\n * @return {*}\r\n * @constructor\r\n */\r\nfunction AltrpTableWithoutUpdate(\r\n  {\r\n    settings,\r\n    currentScreen,\r\n    widgetId,\r\n    query,\r\n    data,\r\n    currentModel,\r\n    _status,\r\n    _error,\r\n    setSortSettings,\r\n    setFilterSettings,\r\n    filterSetting,\r\n    _latestData,\r\n    widgetState,\r\n    sortSetting\r\n  }) {\r\n\r\n  const stateRef = React.useRef(widgetState);\r\n  const { inner_page_size,\r\n    global_filter,\r\n    card_template,\r\n    row_expand,\r\n    selected_storage,\r\n    row_select,\r\n    row_select_width,\r\n    store_state,\r\n    loading_text,\r\n    row_select_all,\r\n    hide_columns,\r\n    resize_columns,\r\n    table_transpose,\r\n    virtualized_rows,\r\n    replace_rows,\r\n    tables_settings_for_subheading,\r\n    replace_width,\r\n    ids_storage,\r\n    hide_grouped_column_icon,\r\n    grouped_column_icon,\r\n    hide_not_grouped_column_icon,\r\n    not_grouped_column_icon,\r\n    checkbox_checked_icon: checkedIcon = {},\r\n    checkbox_unchecked_icon: uncheckedIcon = {},\r\n    checkbox_indeterminate_icon: indeterminateIcon = {} } = settings;\r\n  const [cardTemplate, setCardTemplate] = React.useState(null);\r\n  /**\r\n   * Для перетаскивания\r\n   */\r\n  const [records, setRecords] = React.useState(data);\r\n  React.useEffect(() => {\r\n    setRecords(data);\r\n  }, [data]);\r\n  const moveRow = (dragIndex, hoverIndex) => {\r\n    const dragRecord = records[dragIndex];\r\n    setRecords(\r\n      update(records, {\r\n        $splice: [\r\n          [dragIndex, 1],\r\n          [hoverIndex, 0, dragRecord],\r\n        ],\r\n      })\r\n    )\r\n  };\r\n\r\n  const filterTypes = React.useMemo(\r\n    () => ({\r\n      // Add a new fuzzyTextFilterFn filter type.\r\n      fuzzyText: fuzzyTextFilterFn,\r\n      fullMatchText: fullMatchTextFilterFn,\r\n      partialMatchText: partialMatchTextFilterFn,\r\n      // Or, override the default text filter to use\r\n      // \"startWith\"\r\n      text: (rows, id, filterValue) => {\r\n        id = id ? id[0] : undefined;\r\n        return rows.filter(row => {\r\n          let rowValue = row.values[id];\r\n          if (id === '##') {\r\n            rowValue = row.index + 1;\r\n          }\r\n          return rowValue !== undefined\r\n            ? String(rowValue)\r\n              .toLowerCase()\r\n              .startsWith(String(filterValue).toLowerCase())\r\n            : true\r\n        })\r\n      },\r\n      between: (rows, ids, filterValue) => {\r\n        let _ref = filterValue || [],\r\n          min = _ref[0],\r\n          max = _ref[1];\r\n        min = typeof min === 'number' ? min : -Infinity;\r\n        max = typeof max === 'number' ? max : Infinity;\r\n\r\n        if (min > max) {\r\n          let temp = min;\r\n          min = max;\r\n          max = temp;\r\n        }\r\n\r\n        return rows.filter(function (row) {\r\n          return ids.some(function (id) {\r\n            let rowValue = row.values[id];\r\n            if (id === '##') {\r\n              rowValue = row.index + 1;\r\n            }\r\n            return rowValue >= min && rowValue <= max;\r\n          });\r\n        });\r\n      },\r\n      equals: (rows, ids, filterValue) => {\r\n        return rows.filter(function (row) {\r\n          return ids.some(function (id) {\r\n            let rowValue = row.values[id];\r\n            if (id === '##') {\r\n              rowValue = row.index + 1;\r\n            }\r\n            return rowValue == filterValue;\r\n          });\r\n        });\r\n      },\r\n      includesSome: includesSome,\r\n    }),\r\n    []\r\n  );\r\n  const defaultColumn = React.useMemo(\r\n    () => ({\r\n      Filter: DefaultColumnFilter,\r\n      width: 150,\r\n      Cell: DefaultCell,\r\n    }),\r\n    []\r\n  );\r\n  React.useEffect(() => {\r\n    if (!data) {\r\n      data = [];\r\n      return;\r\n    }\r\n    if (!_.isArray(data)) {\r\n      data = [data];\r\n    }\r\n  }, [data]);\r\n  let columns = React.useMemo(() => settingsToColumns(settings, widgetId), [settings, widgetId]);\r\n  /**\r\n   * Сохраним шаблон для выпадашки\r\n   */\r\n  React.useEffect(() => {\r\n    if (card_template && row_expand) {\r\n      (async () => {\r\n        const template = await templateLoader.loadParsedTemplate(card_template);\r\n        setCardTemplate(template);\r\n      })()\r\n    }\r\n  }, [row_expand, card_template]);\r\n  const plugins = [useFilters,\r\n    useGlobalFilter,\r\n    useGroupBy,\r\n    useSortBy,\r\n    useExpanded,\r\n    usePagination,\r\n    useRowSelect,\r\n    useResizeColumns,\r\n    useBlockLayout,\r\n  ];\r\n  /**\r\n   * Добавим кастомный хук для выбора строк\r\n   */\r\n  if (row_select) {\r\n    plugins.push(hooks => {\r\n      hooks.visibleColumns.push(columns => [\r\n        // Let's make a column for selection\r\n        {\r\n          id: 'selection',\r\n          column_width: row_select_width || 0,\r\n          // The header can use the table's getToggleAllRowsSelectedProps method\r\n          // to render a checkbox\r\n          column_name: ({ getToggleAllRowsSelectedProps, getToggleAllPageRowsSelectedProps }) => {\r\n            if ((!settings.inner_page_size) || (settings.inner_page_size < 0) || row_select_all) {\r\n              return (\r\n                <div className=\"altrp-toggle-row\">\r\n                  <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} icons={{ checkedIcon, uncheckedIcon, indeterminateIcon }} />\r\n                </div>\r\n              );\r\n            }\r\n            return (\r\n              <div className=\"altrp-toggle-row\">\r\n                <IndeterminateCheckbox {...getToggleAllPageRowsSelectedProps()} icons={{ checkedIcon, uncheckedIcon, indeterminateIcon }} />\r\n              </div>\r\n            );\r\n          },\r\n          // The cell can use the individual row's getToggleRowSelectedProps method\r\n          // to the render a checkbox\r\n          Cell: ({ row }) => (\r\n            <div className=\"altrp-toggle-row\">\r\n              <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} icons={{ checkedIcon, uncheckedIcon, indeterminateIcon }} />\r\n            </div>\r\n          ),\r\n        },\r\n        ...columns,\r\n      ]);\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Редактирование данных\r\n   */\r\n  const [skipPageReset, setSkipPageReset] = React.useState(false);\r\n\r\n  // We need to keep the table from resetting the pageIndex when we\r\n  // Update data. So we can keep track of that flag with a ref.\r\n\r\n  // When our cell renderer calls updateData, we'll use\r\n  // the rowIndex, columnId and new value to update the\r\n  // original data\r\n  const updateData = (rowIndex, columnId, value) => {\r\n    // We also turn on the flag to not reset the page\r\n    setSkipPageReset(true);\r\n    setRecords(old =>\r\n      old.map((row, index) => {\r\n        if (index === rowIndex) {\r\n          return {\r\n            ...old[rowIndex],\r\n            [columnId]: value,\r\n          }\r\n        }\r\n        return row\r\n      })\r\n    )\r\n  };\r\n  const getRowId = React.useCallback(row => {\r\n    return row.id\r\n  }, []);\r\n  /**\r\n   * настройки таблицы, свызов хука таблицы\r\n   * @type {*|{columns: (*|Array), data: {}, filterTypes: (*|{fuzzyText: (function(*=, *, *=): (*|Array)), text: (function(*, *, *=): *), between: (function(*, *, *=): *), equals: (function(*, *, *=): *), includesSome: (function(*, *, *=): *)}), defaultColumn: (*|{Filter: (function({column: *}, {}): *)})}}\r\n   */\r\n  const tableSettings = React.useMemo(() => {\r\n    const tableSettings = {\r\n      columns,\r\n      // data: replace_rows ? records : data,\r\n      data: records,\r\n      filterTypes,\r\n      autoResetPage: !skipPageReset,\r\n      defaultColumn,\r\n      updateData,\r\n    };\r\n    if (replace_rows) {\r\n      tableSettings.getRowId = getRowId;\r\n    }\r\n    // if(_.isObject(stateRef.current)){\r\n    //   tableSettings.initialState = stateRef.current;\r\n    // } else\r\n    if (isEditor()) {\r\n\r\n      if ((inner_page_size >= 1)) {\r\n        tableSettings.initialState = {\r\n          pageSize: Number(inner_page_size),\r\n        };\r\n      } else {\r\n        tableSettings.initialState = {\r\n          pageSize: data.length,\r\n        };\r\n      }\r\n    }\r\n    if(! _.isArray(tableSettings.data)){\r\n      if(_.isObject(tableSettings.data)){\r\n        tableSettings.data = [tableSettings.data];\r\n      } else {\r\n        tableSettings.data = [];\r\n      }\r\n    }\r\n    if(! _.isEmpty(tables_settings_for_subheading)){\r\n      let sortBy = tables_settings_for_subheading.map(item => {\r\n        return{\r\n          id: item.name,\r\n          desc: item.order === 'DESC',\r\n        };\r\n      });\r\n      _.set(tableSettings, 'initialState.sortBy', sortBy);\r\n    }\r\n    return tableSettings;\r\n  }, [\r\n      inner_page_size,\r\n      data,\r\n      columns,\r\n      stateRef,\r\n      records,\r\n      replace_rows,\r\n      skipPageReset,\r\n      tables_settings_for_subheading,\r\n  ]);\r\n  React.useEffect(() => {\r\n\r\n    if (_.isObject(stateRef.current)) {\r\n      tableSettings.initialState = stateRef.current;\r\n    }\r\n  }, [stateRef, data]);\r\n  const ReactTable = useTable(\r\n    tableSettings,\r\n    ...plugins\r\n  );\r\n\r\n  /**\r\n   * END настройки таблицы, свызов хука таблицы\r\n   */\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page, // Instead of using 'rows', we'll use page,\r\n    // which has only the rows for the active page\r\n\r\n    // The rest of these things are super handy, too ;)\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    getToggleHideAllColumnsProps,\r\n    allColumns,\r\n    // getRowId,\r\n    rows,\r\n    visibleColumns,\r\n    preGlobalFilteredRows,\r\n    setGlobalFilter,\r\n    setPageSize,\r\n    selectedFlatRows,\r\n    totalColumnsWidth,\r\n    state: reactTableState,\r\n  } = ReactTable;\r\n  const {\r\n    pageIndex,\r\n    globalFilter,\r\n    groupBy,\r\n    selectedRowIds,\r\n    expanded,\r\n    pageSize } = reactTableState;\r\n\r\n  React.useEffect(() => {\r\n    if (store_state) {\r\n      storeWidgetState(widgetId, reactTableState);\r\n    }\r\n  });\r\n\r\n  React.useEffect(\r\n    () => {\r\n      if (!setPageSize) {\r\n        return\r\n      }\r\n      if ((!Number(inner_page_size) || Number(inner_page_size < 1))) {\r\n        setPageSize(data.length || 10);\r\n      }\r\n      setPageSize(Number(inner_page_size) || data.length || 10);\r\n    },\r\n    [inner_page_size, data],\r\n  );\r\n  function flatRows(rows = [], field = '') {\r\n    let _rows = [];\r\n    if (_.isEmpty(rows)) {\r\n      return _rows;\r\n    }\r\n    rows.forEach(r => {\r\n      r.original && (field ? _rows.push(_.get(r.original, field)) : _rows.push(r.original));\r\n      r.subRows && (_rows = _.concat(_rows, flatRows(r.subRows)));\r\n    });\r\n    return _rows;\r\n  }\r\n  const originalSelectedRows = React.useMemo(() => flatRows(selectedFlatRows), [selectedFlatRows]);\r\n  const selectedIds = React.useMemo(() => flatRows(selectedFlatRows, 'id'), [selectedFlatRows]);\r\n  React.useEffect(() => {\r\n    if (selected_storage &&\r\n        ! _.isEqual(altrpHelpers.getDataByPath(selected_storage), originalSelectedRows) &&\r\n        ! isEditor()) {\r\n      setDataByPath(selected_storage, originalSelectedRows);\r\n    }\r\n  }, [selectedFlatRows]);\r\n  React.useEffect(() => {\r\n    if (ids_storage &&\r\n        ! _.isEqual(altrpHelpers.getDataByPath(ids_storage), selectedIds) &&\r\n        ! isEditor()) {\r\n      setDataByPath(ids_storage, selectedIds);\r\n    }\r\n  }, [selectedFlatRows]);\r\n\r\n  /**\r\n   * Настройки пагинации\r\n   */\r\n  const paginationProps =\r\n    React.useMemo(() => {\r\n      let paginationProps = null;\r\n      if (inner_page_size && (inner_page_size >= 1)) {\r\n        paginationProps = {\r\n          settings,\r\n          nextPage,\r\n          previousPage,\r\n          pageIndex,\r\n          pageCount,\r\n          pageSize,\r\n          setPageSize,\r\n          widgetId,\r\n          gotoPage,\r\n        };\r\n      }\r\n      return paginationProps;\r\n    }, [inner_page_size, pageSize, pageCount, pageIndex, settings]);\r\n\r\n  let tableElement = React.useRef(null);\r\n\r\n\r\n  return  <React.Fragment>\r\n    {hide_columns && <div className=\"altrp-table-hidden\">\r\n      <div className=\"altrp-table-hidden__all\">\r\n        <IndeterminateCheckbox {...getToggleHideAllColumnsProps()} /> Toggle\r\n        All\r\n      </div>\r\n      {allColumns.map(column => {\r\n        if (['expander', 'selection'].indexOf(column.id) >= 0) {\r\n          return null;\r\n        }\r\n        return (\r\n          <div key={column.id} className=\"altrp-table-hidden__column\">\r\n            <label>\r\n              <input type=\"checkbox\" {...column.getToggleHiddenProps()} />{' '}\r\n              {column.column_name || column.id}\r\n              {column.id}\r\n            </label>\r\n          </div>\r\n        )\r\n      })}\r\n      <br />\r\n    </div>}\r\n    <TableComponent className={\"altrp-table altrp-table_columns-\" + columns.length}\r\n                    ReactTable={ReactTable}\r\n                    currentScreen={currentScreen}\r\n                    settings={settings}\r\n                    table={tableElement}\r\n                    rows={rows}\r\n                    ref={tableElement}\r\n                    {...getTableProps()}>\r\n      <div className=\"altrp-table-head\">\r\n        {renderAdditionalRows(settings)}\r\n        {headerGroups.map(headerGroup => {\r\n          const headerGroupProps = headerGroup.getHeaderGroupProps();\r\n\r\n          if (!resize_columns && !virtualized_rows) {\r\n            delete headerGroupProps.style;\r\n          }\r\n          return (\r\n            <div {...headerGroupProps} className=\"altrp-table-tr\">\r\n              {replace_rows && <div className=\"altrp-table-th altrp-table-cell\" style={{ width: replace_width }} />}\r\n              {headerGroup.headers.map((column, idx) => {\r\n                const { column_width, column_header_alignment, header_bg } = column;\r\n\r\n                let columnProps = column.getHeaderProps(column.getSortByToggleProps());\r\n                    columnProps.settings = settings;\r\n                const resizerProps = {\r\n                  ...column.getResizerProps(),\r\n                  onClick: e => { e.stopPropagation(); }\r\n                };\r\n                if (!resize_columns && !virtualized_rows) {\r\n                  // delete columnProps.style;\r\n                  columnProps.style = {};\r\n                  if (column_width) columnProps.style.width = column_width + '%';\r\n                  if (column_header_alignment) columnProps.style.textAlign = column_header_alignment;\r\n                  if (header_bg) columnProps.style.backgroundColor = header_bg.color;\r\n                }\r\n                let columnNameContent = column.render('column_name');\r\n                if (_.isString(columnNameContent)) {\r\n                  columnNameContent = <span dangerouslySetInnerHTML={{ __html: column.render('column_name') || '&nbsp;' }} />;\r\n                }\r\n\r\n                if(table_transpose){\r\n                  _.unset(columnProps, 'style.width')\r\n                }\r\n                return <HeaderCellComponent {...columnProps}\r\n                                            column={column}\r\n                  className=\"altrp-table-th altrp-table-cell\"\r\n                  key={idx}>\r\n                  {columnNameContent}\r\n                  {column.canGroupBy ? (\r\n                    // If the column can be grouped, let's add a toggle\r\n                    <span {...column.getGroupByToggleProps()} className=\"altrp-table-th__group-toggle\">\r\n                      {column.isGrouped ?\r\n                        renderIcon(hide_not_grouped_column_icon, not_grouped_column_icon, ' 🛑 ', 'not-grouped-column') :\r\n                        renderIcon(hide_grouped_column_icon, grouped_column_icon, ' 👊 ', 'grouped-column')}\r\n                    </span>\r\n                  ) : null}\r\n                  {\r\n                    (column.isSorted\r\n                      ? column.isSortedDesc\r\n                        ? iconsManager().renderIcon('chevron', { className: 'rotate-180 sort-icon ' })\r\n                        : iconsManager().renderIcon('chevron', { className: 'sort-icon' })\r\n                      : '')\r\n                  }\r\n                  {\r\n                    column.column_is_filtered &&\r\n                    <label className={`altrp-label altrp-label_${column.column_filter_type}`} onClick={e => { e.stopPropagation() }}>\r\n                      {column.render('Filter')}\r\n                    </label>\r\n                  }\r\n                  {\r\n                    resize_columns && <div\r\n                      {...resizerProps}\r\n                      className={`altrp-table__resizer ${column.isResizing ? 'altrp-table__resizer_resizing' : ''\r\n                        }`}\r\n                    />\r\n                  }\r\n                </HeaderCellComponent>;\r\n              }\r\n              )}\r\n            </div>)\r\n        }\r\n        )}\r\n        {global_filter && <div className=\"altrp-table-tr\">\r\n          <th className=\"altrp-table-th altrp-table-th_global-filter altrp-table-cell\"\r\n            role=\"cell\"\r\n            colSpan={visibleColumns.length + replace_rows}\r\n            style={{\r\n              textAlign: 'left',\r\n            }}\r\n          >\r\n            <GlobalFilter\r\n              widgetId={widgetId}\r\n              preGlobalFilteredRows={preGlobalFilteredRows}\r\n              globalFilter={globalFilter}\r\n              setGlobalFilter={setGlobalFilter}\r\n              settings={settings}\r\n            />\r\n          </th>\r\n        </div>\r\n        }\r\n      </div>\r\n      {_status === 'success' ?\r\n\r\n        <TableBody {...{\r\n          getTableBodyProps,\r\n          prepareRow,\r\n          totalColumnsWidth,\r\n          rows,\r\n          visibleColumns,\r\n          moveRow,\r\n          settings,\r\n          page,\r\n          cardTemplate,\r\n        }}\r\n        /> :\r\n        <div><div className=\"altrp-table-tr altrp-table-tr_loading\"><div className=\"altrp-table-td altrp-table-td_loading\" colSpan={visibleColumns.length + replace_rows}>\r\n          {(_status === 'loading' ? (loading_text || null) : null)}\r\n        </div></div></div>}\r\n    </TableComponent>\r\n    {paginationProps && <Pagination {...paginationProps} />}\r\n  </React.Fragment>\r\n}\r\n\r\n\r\n/**\r\n * Define a default UI for filtering\r\n * @param filterValue\r\n * @param preFilteredRows\r\n * @param setFilter\r\n * @param {string} filter_placeholder\r\n * @param {string} column_filter_type\r\n * @param {boolean} column_is_filtered\r\n * @param {{}}settings\r\n * @return {*}\r\n * @constructor\r\n */\r\n\r\nfunction DefaultColumnFilter({\r\n  column: { filterValue,\r\n    preFilteredRows,\r\n    setFilter,\r\n    filter_placeholder,\r\n    column_filter_type,\r\n    column_is_filtered,\r\n  },\r\n}, settings) {\r\n  const count = preFilteredRows.length;\r\n  filter_placeholder = filter_placeholder ? filter_placeholder.replace('{{count}}', count) : `Search ${count} records...`;\r\n  return (\r\n    <input\r\n      value={filterValue || ''}\r\n      className=\"altrp-field\"\r\n      onChange={e => {\r\n        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\r\n      }}\r\n      placeholder={filter_placeholder}\r\n    />\r\n  )\r\n}\r\n/**\r\n * Селект для фильтрации по значениям в колонке\r\n * @param filterValue\r\n * @param setFilter\r\n * @param preFilteredRows\r\n * @param id\r\n * @param widgetId\r\n * @param filter_placeholder\r\n * @return {*}\r\n * @constructor\r\n */\r\nfunction SelectColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id, filter_placeholder },\r\n  widgetId\r\n}) {\r\n  const options = React.useMemo(() => {\r\n    let _options = new Set();\r\n    preFilteredRows.forEach(row => {\r\n      _options.add(row.values[id])\r\n    });\r\n    return [..._options.values()].map(option => ({\r\n      value: option,\r\n      label: option + '',\r\n    }));\r\n  }, [id, preFilteredRows]);\r\n\r\n  // Render a multi-select box\r\n  return (<AltrpSelect options={options}\r\n    isMulti={true}\r\n    placeholder={filter_placeholder || 'Select some...'}\r\n    className=\"altrp-table__filter-select\"\r\n    classNamePrefix={widgetId + ' altrp-field-select2'}\r\n    onChange={v => {\r\n      if (!_.isArray(v)) {\r\n        v = [];\r\n      }\r\n      let filterValue = v.map(option => option.value);\r\n      setFilter(filterValue);\r\n    }} />\r\n  );\r\n}\r\n\r\n/**\r\n * This is a custom filter UI that uses a\r\n * slider to set the filter value between a column's\r\n * min and max values\r\n * @param filterValue\r\n * @param setFilter\r\n * @param preFilteredRows\r\n * @param filter_button_text\r\n * @param id\r\n * @return {*}\r\n * @constructor\r\n */\r\nfunction SliderColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id, filter_button_text },\r\n}) {\r\n  const [min, max] = React.useMemo(() => {\r\n    let value = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    if (id === '##' && preFilteredRows.length) {\r\n      value = preFilteredRows[0].index;\r\n    }\r\n    let min = value;\r\n    let max = value;\r\n    preFilteredRows.forEach(row => {\r\n      let value = row.values[id];\r\n      if (id === '##') {\r\n        value = row.index;\r\n      }\r\n      min = Math.min(value, min);\r\n      max = Math.max(value, max);\r\n    });\r\n    return [min, max]\r\n  }, [id, preFilteredRows]);\r\n  const buttonText = filter_button_text || 'Off';\r\n  return (\r\n    <>\r\n      <input\r\n        type=\"range\"\r\n        className=\"altrp-field\"\r\n        min={min}\r\n        max={max}\r\n        value={filterValue || min}\r\n        onChange={e => {\r\n          setFilter(parseInt(e.target.value, 10))\r\n        }}\r\n      />\r\n      <button className={`altrp-btn ${(filterValue !== undefined) ? 'active' : ''}`} onClick={() => setFilter(undefined)}>{buttonText}</button>\r\n    </>\r\n  )\r\n}\r\n/**\r\n * This is a custom UI for our 'between' or number range\r\n * filter. It uses two number boxes and filters rows to\r\n * ones that have values between the two\r\n * @param filterValue\r\n * @param preFilteredRows\r\n * @param setFilter\r\n * @param filter_max_placeholder\r\n * @param filter_min_placeholder\r\n * @param id\r\n * @return {*}\r\n * @constructor\r\n */\r\nfunction NumberRangeColumnFilter({\r\n  column: { filterValue = [],\r\n    preFilteredRows,\r\n    setFilter,\r\n    filter_max_placeholder,\r\n    filter_min_placeholder,\r\n    id },\r\n}) {\r\n  const [min, max] = React.useMemo(() => {\r\n    let value = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    if (id === '##' && preFilteredRows.length) {\r\n      value = preFilteredRows[0].index;\r\n    }\r\n    let min = value;\r\n    let max = value;\r\n    preFilteredRows.forEach(row => {\r\n      let value = row.values[id];\r\n      if (id === '##') {\r\n        value = row.index;\r\n      }\r\n      min = Math.min(value, min);\r\n      max = Math.max(value, max);\r\n    });\r\n    return [min, max]\r\n  }, [id, preFilteredRows]);\r\n  let minPlaceHolder = filter_min_placeholder || `Min (${min})`;\r\n  let maxPlaceHolder = filter_max_placeholder || `Max (${max})`;\r\n  return (\r\n    <div className=\"altrp-filter-group\"\r\n      style={{\r\n        display: 'flex',\r\n      }}\r\n    >\r\n      <input\r\n        value={filterValue[0] || ''}\r\n        type=\"number\"\r\n        className=\"altrp-field\"\r\n        onChange={e => {\r\n          const val = e.target.value;\r\n          setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]])\r\n        }}\r\n        placeholder={minPlaceHolder}\r\n        style={{\r\n          width: '70px',\r\n          marginRight: '0.5rem',\r\n        }}\r\n      />\r\n        to\r\n      <input\r\n        value={filterValue[1] || ''}\r\n        type=\"number\"\r\n        className=\"altrp-field\"\r\n        onChange={e => {\r\n          const val = e.target.value;\r\n          setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined])\r\n        }}\r\n        placeholder={maxPlaceHolder}\r\n        style={{\r\n          width: '70px',\r\n          marginLeft: '0.5rem',\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\n/**\r\n * Парсинг колонок из настроек в колонки для react-table\r\n * @param settings\r\n * @param widgetId\r\n * @return {Array}\r\n */\r\nexport function settingsToColumns(settings, widgetId) {\r\n  let columns = [];\r\n  let {\r\n    tables_columns,\r\n    card_template,\r\n    row_expand,\r\n    virtualized_rows,\r\n    resize_columns,\r\n    hide_expanded_row_icon,\r\n    expanded_row_icon,\r\n    hide_not_expanded_row_icon,\r\n    edit_disabled,\r\n    not_expanded_row_icon\r\n  } = settings;\r\n  tables_columns = tables_columns || [];\r\n  let columnOrder = (getResponsiveSetting(settings, 'columns_order') || '').trim();\r\n  columnOrder = columnOrder ? columnOrder.split(',') : [];\r\n  /**\r\n   * Если в колонке пустые поля, то мы их игнорируем, чтобы не было ошибки\r\n   */\r\n  tables_columns.forEach(_column => {\r\n    /**\r\n     * Колонку проказываем, если есть accessor или список actions\r\n     */\r\n    if (((_column.actions && _column.actions.length) || _column.accessor)) {\r\n      _column.edit_disabled = edit_disabled;\r\n      _column._accessor = _column.accessor;\r\n      if(_column.accessor && _column.accessor.indexOf('?') !== -1 && _column.accessor.indexOf(':') !== -1) {\r\n        _column.accessor = _column.accessor.split('?')[0].trim();\r\n      }\r\n      _column.column_name = _column.column_name || '&nbsp;';\r\n      if (_column.column_is_filtered) {\r\n\r\n        _column.filter = 'fuzzyText';\r\n        switch (_column.column_filter_type) {\r\n          case 'min_max': {\r\n            _column.filter = 'between';\r\n            _column.Filter = NumberRangeColumnFilter;\r\n          }\r\n            break;\r\n          case 'slider': {\r\n            _column.filter = 'equals';\r\n            _column.Filter = SliderColumnFilter;\r\n          }\r\n            break;\r\n          case 'select': {\r\n            _column.filter = 'includesSome';\r\n            _column.Filter = ({ column }) => <SelectColumnFilter column={column} widgetId={widgetId} />;\r\n          }\r\n            break;\r\n          case 'text': {\r\n            switch(_column.column_text_filter_type){\r\n              case 'full_match': {\r\n                _column.filter = 'fullMatchText';\r\n              }\r\n              break;\r\n              case 'partial_match': {\r\n                _column.filter = 'partialMatchText';\r\n              }\r\n              break;\r\n            }\r\n          }\r\n            break;\r\n        }\r\n      }\r\n      _column.canGroupBy = ! !_column.group_by;\r\n      _column.disableSortBy = !_column.column_is_sorted;\r\n      if (_column.aggregate) {\r\n        let aggregateTemplate = _column.aggregate_template || `{{value}} Unique Names`;\r\n        _column.Aggregated = ({ value }) => {\r\n          return aggregateTemplate.replace(/{{value}}/g, value)\r\n        };\r\n      }\r\n      if (virtualized_rows || resize_columns) {\r\n        // _column.width = (Number(_column.column_width) || 150) + '%';\r\n        _column.width = (Number(_column.column_width) || 150);\r\n      }\r\n      columns.push(_column);\r\n    }\r\n  });\r\n  if (settings.row_expand) {\r\n    columns.unshift({\r\n      id: 'expander', // Make sure it has an ID\r\n      column_name: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\r\n        <span {...getToggleAllRowsExpandedProps()} className=\"altrp-table__all-row-expander\">\r\n          {isAllRowsExpanded ?\r\n            renderIcon(hide_expanded_row_icon, expanded_row_icon, '👇', 'expanded-row') :\r\n            renderIcon(hide_not_expanded_row_icon, not_expanded_row_icon, '👉', 'not-expanded-row')}\r\n        </span>\r\n      ),\r\n      Cell: ({ row }) =>\r\n        // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\r\n        // to build the toggle for expanding a row\r\n        (card_template && row_expand || row.canExpand) ? (\r\n          <span className=\"altrp-table__row-expander\"\r\n            {...row.getToggleRowExpandedProps({\r\n              style: {\r\n                // We can even use the row.depth property\r\n                // and paddingLeft to indicate the depth\r\n                // of the row\r\n                paddingLeft: `${row.depth * 2}rem`,\r\n              },\r\n            })}\r\n          >\r\n            {row.isExpanded ?\r\n              renderIcon(hide_expanded_row_icon, expanded_row_icon, '👇', 'expanded-row') :\r\n              renderIcon(hide_not_expanded_row_icon, not_expanded_row_icon, '👉', 'not-expanded-row')}\r\n          </span>\r\n        ) : null,\r\n    });\r\n  }\r\n  if(columnOrder.length){\r\n    const _column = [];\r\n    columnOrder.forEach(columnIndex=>{\r\n      columnIndex = parseInt(columnIndex) - 1;\r\n      columns[columnIndex] && (_column.indexOf(columns[columnIndex]) === -1) ? _column.push(columns[columnIndex]) : null;\r\n    });\r\n    columns = _column;\r\n  }\r\n  return columns;\r\n}\r\n\r\n/**\r\n * Отрисовка чекбокса\r\n * @type {*|React.ForwardRefExoticComponent<React.PropsWithoutRef<{indeterminate: *, rest: *}> & React.RefAttributes<any>>}\r\n */\r\nconst IndeterminateCheckbox = React.forwardRef(\r\n  ({ indeterminate, icons, ...rest }, ref) => {\r\n    const defaultRef = React.useRef();\r\n    const resolvedRef = ref || defaultRef;\r\n    React.useEffect(() => {\r\n      resolvedRef.current.indeterminate = indeterminate\r\n    }, [resolvedRef, indeterminate]);\r\n    const icon = icons.checkedIcon.name ?\r\n      rest.checked ?\r\n        icons.checkedIcon :\r\n        indeterminate ? icons.indeterminateIcon : icons.uncheckedIcon :\r\n      null;\r\n    return (\r\n      <label className={\"check-icon--\" + (rest.checked ? \"checked\" : indeterminate ? \"indeterminate\" : \"unchecked\")}>\r\n        {icon && renderAssetIcon(icon)}\r\n        <input type=\"checkbox\" ref={resolvedRef} {...rest} className={icon ? \"hidden\" : \"\"} />\r\n      </label>\r\n    )\r\n  }\r\n);\r\n/**\r\n * Define a default UI for filtering\r\n * @param {[]} preGlobalFilteredRows\r\n * @param {string} globalFilter\r\n * @param {function} setGlobalFilter\r\n * @param {string} widgetId\r\n * @param {{}} settings\r\n * @return {*}\r\n * @constructor\r\n */\r\nfunction GlobalFilter({\r\n  preGlobalFilteredRows,\r\n  globalFilter,\r\n  setGlobalFilter,\r\n  widgetId,\r\n  settings,\r\n}) {\r\n  const { global_filter_placeholder, global_filter_label } = settings;\r\n  const count = preGlobalFilteredRows.length;\r\n  const [value, setValue] = React.useState(globalFilter);\r\n  const onChange = useAsyncDebounce(value => {\r\n    setGlobalFilter(value || undefined);\r\n  }, 200);\r\n  let labelText = global_filter_label || `Search:${' '}`;\r\n  let placeholder = global_filter_placeholder || `${count} records...`;\r\n  placeholder = placeholder.replace(/{{count}}/g, count);\r\n  return (\r\n    <div className=\"altrp-table-global-filter\">\r\n      <label htmlFor={`altrp-table-global-filter${widgetId}`} dangerouslySetInnerHTML={{ __html: labelText }} />\r\n      <input\r\n        id={`altrp-table-global-filter${widgetId}`}\r\n        value={value || \"\"}\r\n        onChange={e => {\r\n          setValue(e.target.value);\r\n          onChange(e.target.value);\r\n        }}\r\n        placeholder={placeholder}\r\n\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default (props) => {\r\n  props = { ...props };\r\n  if(props.settings.choose_datasource === 'datasource'){\r\n    let length = React.useMemo(()=>{\r\n\r\n      return props.settings.inner_page_size > 0 ? 100 : 10;\r\n    }, [props.settings.inner_page_size]);\r\n\r\n    props._status = 'success';\r\n    if(isEditor()){\r\n      props = {...props};\r\n      props.settings = {...props.settings};\r\n      props.data = Array.from({length}, () => ({}));\r\n      setAltrpIndex(props.data);\r\n    }\r\n    return <AltrpTableWithoutUpdate {...props}/>\r\n  }\r\n  return <AltrpQueryComponent {...props}><AltrpTableWithoutUpdate /></AltrpQueryComponent>\r\n}\r\n\r\nfunction DefaultCell(\r\n  { row,\r\n    data,\r\n    cell, value: initialValue,\r\n    updateData }) {\r\n  const { column } = cell;\r\n  const [value, setValue] = React.useState(initialValue);\r\n  React.useEffect(() => {\r\n    setValue(initialValue);\r\n  }, [initialValue, cell]);\r\n  const { column_template,\r\n    column_is_editable,\r\n    column_edit_url,\r\n    column_external_link,\r\n    column_blank_link,\r\n    edit_disabled,\r\n    column_cell_content_type } = column;\r\n  let {\r\n    _accessor,\r\n  } = column;\r\n  _accessor = _accessor || '';\r\n  _accessor = _accessor.trim();\r\n  let leftValue, rightValue;\r\n  if(_accessor && _accessor.indexOf('?') !== -1 && _accessor.indexOf(':') !== -1){\r\n    [leftValue, rightValue] = _accessor.split('?')[1].split(':');\r\n    leftValue = leftValue.trim();\r\n    rightValue = rightValue.trim();\r\n    cell.value = cell.value ? leftValue : rightValue;\r\n  }\r\n  if(_accessor.indexOf('\"') === 0 && _accessor[_accessor.length - 1] === '\"'){\r\n    cell.value = _accessor.substring(1, _accessor.length - 1);\r\n  }\r\n  const [columnTemplate, setColumnTemplate] = React.useState(null);\r\n  const columnEditUrl =\r\n    React.useMemo(() => {\r\n      if (!column_is_editable || !column_edit_url) {\r\n        return null;\r\n      }\r\n      return parseURLTemplate(column_edit_url, row.original);\r\n    }, [column_edit_url, column_is_editable, row, ]);\r\n\r\n  const fetchTemplate = React.useCallback(async () => {\r\n    const columnTemplate = await templateLoader.loadParsedTemplate(column_template);\r\n    setColumnTemplate(columnTemplate);\r\n  }, [column_template]);\r\n  // console.error(columnTemplate);\r\n\r\n  React.useEffect(() => {\r\n    if (column_template) {\r\n      fetchTemplate();\r\n    }\r\n  }, [fetchTemplate]);\r\n  // console.error(columnTemplate);\r\n  let cellContent = cell.value;\r\n  let linkTag = isEditor() ? 'a' : Link;\r\n  if(column_external_link && ! isEditor()) {\r\n    linkTag = 'a';\r\n  }\r\n  /**\r\n   * Если значение объект или массив, то отобразим пустую строку\r\n   */\r\n  if (_.isObject(cell.value)) {\r\n    cellContent = '';\r\n  }\r\n  /**\r\n   * Если в настройках колонки есть url, и в данных есть id, то делаем ссылку\r\n   */\r\n  let href = null;\r\n  switch (column_cell_content_type) {\r\n    case 'email':\r\n      cellContent = React.createElement('a', {\r\n        href: `mailto:${cell.value}`,\r\n        className: 'altrp-inherit altrp-table-td__default-content',\r\n        dangerouslySetInnerHTML: {\r\n          __html: cell.value === 0 ? '0' : (cell.value || '&nbsp;')\r\n        }\r\n      });\r\n      break;\r\n\r\n    case 'phone':\r\n      cellContent = React.createElement('a', {\r\n        href: `tel:${cell.value}`,\r\n        className: 'altrp-inherit altrp-table-td__default-content',\r\n        dangerouslySetInnerHTML: {\r\n          __html: cell.value === 0 ? '0' : (cell.value || '&nbsp;')\r\n        }\r\n      });\r\n      break;\r\n\r\n    default:\r\n      if (column.column_link) {\r\n        cellContent = React.createElement(linkTag, {\r\n          to: parseURLTemplate(column.column_link, row.original),\r\n          href: parseURLTemplate(column.column_link, row.original),\r\n          target: column_blank_link ? '_blank' : '',\r\n          className: 'altrp-inherit altrp-table-td__default-content',\r\n          dangerouslySetInnerHTML: {\r\n            __html: cell.value === 0 ? '0' : (cell.value || '&nbsp;')\r\n          }\r\n        })\r\n      } else {\r\n        cellContent = React.createElement('span', {\r\n          href,\r\n          className: 'altrp-inherit altrp-table-td__default-content',\r\n          dangerouslySetInnerHTML: {\r\n            __html: cell.value === 0 ? '0' : (cell.value || '&nbsp;')\r\n          }\r\n        })\r\n      }\r\n      break;\r\n  }\r\n\r\n  const columnTemplateContent = React.useMemo(() => {\r\n    if (! columnTemplate) {\r\n      return null;\r\n    }\r\n    let columnTemplateContent = frontElementsFabric.cloneElement(columnTemplate);\r\n    columnTemplateContent.setCardModel(new AltrpModel(row.original || {}),);\r\n    return React.createElement(columnTemplateContent.componentClass,\r\n      {\r\n        element: columnTemplateContent,\r\n        ElementWrapper: ElementWrapper,\r\n        children: columnTemplateContent.children\r\n      });\r\n  }, [columnTemplate, row.original, data]);\r\n  if (columnTemplateContent) {\r\n    return <div className=\"altrp-posts\"><div className=\"altrp-post overflow-visible\">{columnTemplateContent}</div></div>;\r\n  }\r\n\r\n  /**\r\n   * Отоборажаем инпут для редактирования данных\r\n   */\r\n  if (columnEditUrl && ! edit_disabled) {\r\n    return <AutoUpdateInput className=\"altrp-inherit\"\r\n                            route={columnEditUrl}\r\n                            resourceid={''}\r\n                            changevalue={value => {\r\n                              setValue(value)\r\n                            }}\r\n                            onBlur={(value) => {\r\n                              updateData(row.index, _accessor, value);\r\n                            }}\r\n                            value={value} />;\r\n  }\r\n  /**\r\n   * Если есть actions, то надо их вывести\r\n   */\r\n  if (_.get(cell, 'column.actions.length')) {\r\n    return renderCellActions(cell, row);\r\n  }\r\n  if (_.isString(cellContent)) {\r\n    return cellContent;\r\n  }\r\n  return <>{cellContent}</>;\r\n\r\n}\r\n","import Query from \"../../classes/Query\";\r\nimport {Scrollbars} from \"react-custom-scrollbars\";\r\nconst {getDataByPath, getWidgetState, isEditor, storeWidgetState} = window.altrpHelpers;\r\n// const AltrpTableWithoutUpdate = React.lazy(() => import(/* webpackChunkName: 'altrp-table-without-update' */'../altrp-table/altrp-table-without-update'));\r\n// const AltrpTableWithoutUpdate = React.lazy(() => import(/* webpackChunkName: 'altrp-table-without-update' */'../altrp-table/altrp-table-without-update'));\r\n// const AltrpTable = React.lazy(() => import(/* webpackChunkName: 'altrp-table' */'../altrp-table/altrp-table'));\r\nimport AltrpTable from'../altrp-table/altrp-table';\r\nimport AltrpTableWithoutUpdate from'../altrp-table/altrp-table-without-update';\r\n\r\n(window.globalDefaults = window.globalDefaults || []).push(`\r\n.altrp-table-th {\r\n  text-align: center;\r\n  font-size: 14px;\r\n  font-weight: normal;\r\n  font-family: \"Open Sans\";\r\n  line-height: 1.5;\r\n  letter-spacing: 0;\r\n  padding: 0 0 0 0;\r\n  display: table-cell;\r\n}\r\n.altrp-table-td {\r\n  text-align: left;\r\n  padding: 0 0 0 0;\r\n  font-size: 14px;\r\n  font-weight: normal;\r\n  font-family: \"Open Sans\";\r\n  line-height: 1.5;\r\n  letter-spacing: 0;\r\n  display: table-cell;\r\n}\r\n.altrp-table-tbody--striped tr:nth-child(2n) {\r\n  background-color: rgba(0, 0, 50, .05);\r\n}\r\n.altrp-table-tbody,\r\n.altrp-table-th {\r\n  border-collapse: separate;\r\n  user-select: none;\r\n}\r\n.altrp-table-td__grouping {\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n}\r\n.altrp-table-th_sort {\r\n  padding: 0;\r\n  margin-left: 10px;\r\n}\r\n.altrp-table-th .sort-icon {\r\n  margin-left: 10px;\r\n}\r\n.altrp-table {\r\n  overflow: hidden;\r\n  display: table;\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  border-width: 1px 1px 1px 1px;\r\n  border-color: rgb(186, 186, 186);\r\n}\r\n.altrp-table__filter-select {\r\n  width: 100%;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__placeholder {\r\n  white-space: nowrap;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__single-value {\r\n  font-size: 14px;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__indicator-separator {\r\n  display: none;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__indicator {\r\n  align-items: center;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__control {\r\n  width: 100%;\r\n  min-height: 19px;\r\n  padding: 0;\r\n  border-radius: 0;\r\n  outline: none;\r\n  border-color: rgb(142, 148, 170);\r\n  -webkit-box-shadow: none;\r\n  -moz-box-shadow: none;\r\n  box-shadow: none;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__control input {\r\n  border: none;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__value-container {\r\n  padding-top: 0;\r\n  padding-bottom: 0;\r\n  line-height: 13px;\r\n}\r\n.altrp-table-td__grouping {\r\n  -webkit-transition-duration: 0.2s;\r\n  -moz-transition-duration: 0.2s;\r\n  -ms-transition-duration: 0.2s;\r\n  -o-transition-duration: 0.2s;\r\n  transition-duration: 0.2s;\r\n}\r\n.altrp-table-td_alignment .altrp-table-td_alignment-center .altrp-actions{\r\n  justify-content: center;\r\n}\r\n.altrp-table-td_alignment-right .altrp-actions {\r\n  justify-content: flex-end;\r\n}\r\n.altrp-table__collapse-icon {\r\n  display: inline-block;\r\n}\r\n.altrp-table__collapse-icon .altrp-table__collapse-icon svg {\r\n  position: relative;\r\n}\r\n\r\n.altrp-table-head {\r\n  display: table-header-group;\r\n}\r\n\r\n.altrp-table-tbody {\r\n  display: table-row-group;\r\n}\r\n\r\n.altrp-table-foot {\r\n  display: table-footer-group;\r\n}\r\n\r\n.altrp-table-tr {\r\n  display: table-row;\r\n}\r\n\r\n.altrp-table_loading {\r\n  display: block;\r\n}\r\n\r\n.altrp-table-th_global-filter {\r\n  colspan: all;\r\n}\r\n\r\n.altrp-table-td .altrp-inherit{\r\n  border: none;\r\n  width: 100%;\r\n}\r\n.altrp-table-td_loading {\r\n  display: block;\r\n  width: 100%;\r\n}\r\n\r\n.altrp-table__resizer {\r\n  display: inline-block;\r\n  background: blue;\r\n  width: 10px;\r\n  height: 100%;\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  transform: translateX(50%);\r\n  z-index: 1;\r\n  touch-action: none;\r\n}\r\n.altrp-table__resizer_resizing {\r\n    background: red;\r\n}\r\n.altrp-table .altrp-table-td .altrp-table-td__double-click-content {\r\n  display: none;\r\n}\r\n.altrp-table .altrp-table-td .altrp-table-td_double-clicked .altrp-table-td_double-clicked .altrp-table-td__double-click-content {\r\n  display: block;\r\n  width: 100%;\r\n  border-width: 2px;\r\n}\r\n.altrp-table .altrp-table-td .altrp-table-td_double-clicked .altrp-table-td_double-clicked .altrp-table-td__default-content {\r\n  display: none;\r\n}\r\n.altrp-table-global-filter {\r\n  font-weight: 400;\r\n}\r\n.altrp-table-global-filter label {\r\n  display: inline-block;\r\n}\r\n`)\r\n\r\nclass TableWidget extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      settings: props.element.getSettings(),\r\n      TableComponent: ()=><div children=\"Loading...\"/>\r\n    };\r\n    props.element.component = this;\r\n    if (window.elementDecorator) {\r\n      window.elementDecorator(this);\r\n    }\r\n    if(props.baseRender){\r\n      this.render = props.baseRender(this);\r\n    }\r\n    this.scrollbar = React.createRef();\r\n  }\r\n\r\n  _componentDidMount(){\r\n    if(this.props.element.getSettings('store_state') && getWidgetState(this.props.element.getId())){\r\n      this.setState(state=>({...state, widgetState: getWidgetState(this.props.element.getId())}));\r\n    } else if (this.props.element.getSettings('store_state')){\r\n      storeWidgetState(this.props.element.getId(), null);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Показывать ли таблицу\r\n   * @param{Query} query\r\n   * @return {boolean}\r\n   */\r\n  showTable(query = {}){\r\n    if( this.props.element.getSettings('choose_datasource') === 'datasource' ){\r\n      return true;\r\n    }\r\n    if(! query.modelName && ! query.dataSource){\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  render(){\r\n    const settings = this.props.element.getSettings();\r\n    if(! this.props.currentModel.getProperty('altrpModelUpdated')){\r\n      return '';\r\n    }\r\n    let data = [];\r\n    if(this.props.element.getSettings('table_datasource')\r\n        && this.props.element.getSettings('choose_datasource') === 'datasource'){\r\n      let path = this.props.element.getSettings('table_datasource').replace(/{{/g, '').replace(/}}/g, '');\r\n      data = getDataByPath(path, [], this.props.element.getCurrentModel().getData())\r\n    }\r\n    if(! this.query || ! this.table_query || this.table_query !== this.props.element.getSettings().table_query){\r\n      this.table_query = this.props.element.getSettings().table_query;\r\n      this.query = new Query(this.props.element.getSettings().table_query || {}, this);\r\n    }\r\n    const query = this.query;\r\n    if(! this.showTable(query)){\r\n      return <div children=\"Please Choose Source\"/>\r\n    }\r\n    const scrollbarsProps = {\r\n      ref:this.scrollbar,\r\n      style:{zIndex: 99999},\r\n      autoHeight:true,\r\n      autoHideTimeout:500,\r\n      autoHideDuration:200,\r\n      renderTrackVertical: ({style, ...props})=>{\r\n        return<div className=\"altrp-scroll__vertical-track\" style={style} {...props} />\r\n      },\r\n    };\r\n    if(this.props.element.getSettings('table_transpose', false)){\r\n      scrollbarsProps.autoHeight = true;\r\n      scrollbarsProps.autoHeightMax = 10000;\r\n    }\r\n\r\n    if (! (_.get(settings,'tables_columns.length'))) {\r\n      return <div children=\"Please Add Column\"/>\r\n    }\r\n\r\n    const TableComponent = this.props.element.getSettings('table_2_0') ? AltrpTableWithoutUpdate : AltrpTable;\r\n    return <Scrollbars\r\n        ref={this.scrollbar}\r\n        style={{zIndex: 99999}}\r\n        autoHide\r\n        autoHeightMax={30000}\r\n        autoHeight={true}\r\n        autoHideTimeout={500}\r\n        autoHideDuration={200}\r\n        renderTrackVertical={({style, ...props})=>{\r\n          style.display = 'none';\r\n          return <div className=\"altrp-scroll__vertical-track\" style={style} {...props} />}}\r\n        renderTrackHorizontal={({style, ...props})=>{\r\n          return <div className=\"altrp-scroll__horizontal-track\" style={style} {...props} />}}\r\n    >\r\n      {/*<React.Suspense fallback={''}>*/}\r\n      <TableComponent query={query}\r\n                      updateToken={this.props.updateToken}\r\n                      widgetId={this.props.element.getId()}\r\n                      widgetState={isEditor() ? null : this.state.widgetState}\r\n                      currentModel={this.props.currentModel}\r\n                      currentScreen={this.props.currentScreen}\r\n                      data={isEditor() ? null : (data || query.getFromModel(this.state.modelData))}\r\n                      settings={this.props.element?.settings}/>\r\n    {/*</React.Suspense>*/}\r\n    </Scrollbars>;\r\n  }\r\n}\r\n\r\nexport default TableWidget\r\n\r\n"],"sourceRoot":""}