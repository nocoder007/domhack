{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/editor/src/js/components/widgets/InputHiddenWidget.js"],"names":["AltrpModel","data","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","value","getData","set","unset","window","altrpHelpers","convertData","isEditor","parseOptionsFromSettings","parseParamsFromString","renderIcon","replaceContentWithData","getDataFromLocalStorage","FromIcon","globalDefaults","push","InputHiddenWidget","props","timeInput","handleEnter","e","keyCode","preventDefault","inputs","Array","from","document","querySelectorAll","index","indexOf","target","undefined","focus","element","getSettings","create_allowed","create_label","create_url","createItem","debounceDispatch","_","debounce","dispatchFieldValueToStore","userInput","formId","getFormId","fieldName","getFieldId","isObject","appStore","dispatch","changeFormFieldValue","change_actions","actionsManager","default","callAllWidgetActions","getIdForAction","getValue","state","getState","component","elementDecorator","onChange","bind","getContent","settings","options","paramsForUpdate","altrpSelectRef","React","prevProps","prevState","setState","currentModel","getProperty","contentLoaded","currentDataStorage","url","content_options","model_for_options","isEqual","dynamic","formsStore","updateOptions","updateValue","content_calculation","altrpforms","prevContext","altrpdata","altrpmodel","altrpuser","currentUser","altrppagestate","altrpPageState","altrpresponses","altrpmeta","altrpMeta","context","getCurrentModel","currentDataStorageLoaded","changedField","altrpstorage","replace","eval","console","error","message","getId","path","formData","JSON","stringify","Resource","route","getRoute","getQueried","filters","isArray","getAll","valueToDispatch","editor","change_change_end","change_change_end_delay","clearTimeout","setTimeout","optionsDynamicSetting","getDynamicSetting","sortBy","o","label","toString","type","getName","id","Component"],"mappings":"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","file":"InputHidden.6e6bb5d80d695fdc6e70.bundle.js","sourcesContent":["/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","const {\n  convertData,\n  isEditor,\n  parseOptionsFromSettings,\n  parseParamsFromString,\n  renderIcon,\n  replaceContentWithData,\n  getDataFromLocalStorage\n} = window.altrpHelpers;\nimport Resource from \"../../classes/Resource\";\nimport { changeFormFieldValue } from \"../../../../../front-app/src/js/store/forms-data-storage/actions\";\nimport AltrpModel from \"../../classes/AltrpModel\";\nimport FromIcon from \"../../../svgs/form-horizontal.svg\";\n\n\n(window.globalDefaults = window.globalDefaults || []).push(`\n /*здесь css стилей по умолчанию с селекторами*/\n`)\n\n\nclass InputHiddenWidget extends Component {\n  timeInput = null;\n\n  constructor(props) {\n    super(props);\n    props.element.component = this;\n    if (window.elementDecorator) {\n      window.elementDecorator(this);\n    }\n    this.onChange = this.onChange.bind(this);\n    this.debounceDispatch = this.debounceDispatch.bind(this);\n\n    this.defaultValue = this.getContent(\"content_default_value\") || \"\";\n    this.state = {\n      settings: { ...props.element.getSettings() },\n      value: this.defaultValue,\n      options: parseOptionsFromSettings(\n        props.element.getSettings(\"content_options\")\n      ),\n      paramsForUpdate: null\n    };\n    this.altrpSelectRef = React.createRef();\n    if (this.getContent(\"content_default_value\")) {\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\n    }\n  }\n\n  /**\n   * Чистит значение\n   */\n  clearValue() {\n    this.onChange(\"\");\n    this.dispatchFieldValueToStore(\"\", true);\n  }\n\n  /**\n   * Обработка нажатия клавиши\n   * @param {{}} e\n   */\n  handleEnter = e => {\n    if (e.keyCode === 13) {\n      e.preventDefault();\n      const inputs = Array.from(document.querySelectorAll(\"input,select\"));\n      const index = inputs.indexOf(e.target);\n      if (index === undefined) return;\n      inputs[index + 1] && inputs[index + 1].focus();\n      const {\n        create_allowed,\n        create_label,\n        create_url\n      } = this.props.element.getSettings();\n      if (create_allowed && create_label && create_url) {\n        this.createItem(e);\n      }\n    }\n  };\n\n  /**\n   * Загрузка виджета\n   * @param {{}} prevProps\n   * @param {{}} prevState\n   */\n  async _componentDidMount(prevProps, prevState) {\n    if (this.props.element.getSettings(\"content_options\")) {\n      let options = parseOptionsFromSettings(\n        this.props.element.getSettings(\"content_options\")\n      );\n\n      this.setState(state => ({ ...state, options }));\n    }\n\n    let value = this.state.value;\n\n    /**\n     * Если динамическое значение загрузилось,\n     * то используем this.getContent для получение этого динамического значения\n     * старые динамические данные\n     * */\n    if (\n      _.get(value, \"dynamic\") &&\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\n    ) {\n      value = this.getContent(\"content_default_value\");\n    }\n\n    /**\n     * Если модель обновилась при смене URL\n     */\n    if (\n      prevProps &&\n      !prevProps.currentModel.getProperty(\"altrpModelUpdated\") &&\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\n    ) {\n      value = this.getContent(\"content_default_value\");\n      this.setState(\n        state => ({ ...state, value, contentLoaded: true }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n      return;\n    }\n\n    if (\n      this.props.currentModel.getProperty(\"altrpModelUpdated\") &&\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\n      !this.state.contentLoaded\n    ) {\n      value = this.getContent(\"content_default_value\");\n      this.setState(\n        state => ({ ...state, value, contentLoaded: true }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n      return;\n    }\n\n    if (this.state.value !== value) {\n      this.setState(\n        state => ({ ...state, value }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n    }\n  }\n\n  /**\n   * Получить url для запросов\n   */\n  getRoute() {\n    let url = this.props.element.getSettings(\"model_for_options\");\n\n    if (url.indexOf(\"/\") === -1) {\n      return `/ajax/models/${url}_options`;\n    }\n    if (url.indexOf(\"{{\") !== -1) {\n      url = replaceContentWithData(url);\n    }\n    return url;\n  }\n\n  /**\n   * Обновление виджета\n   */\n  async _componentDidUpdate(prevProps, prevState) {\n    const { content_options, model_for_options } = this.state.settings;\n\n    if (\n      prevProps &&\n      !prevProps.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\")\n    ) {\n      let value = this.getContent(\n        \"content_default_value\",\n        this.props.element.getSettings(\"select2_multiple\")\n      );\n      this.setState(\n        state => ({ ...state, value, contentLoaded: true }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n    }\n\n    /**\n     * Если обновилась модель, то пробрасываем в стор новое значение (старый источник диамических данных)\n     */\n    if (\n      !_.isEqual(this.props.currentModel, prevProps.currentModel) &&\n      this.state.value &&\n      this.state.value.dynamic\n    ) {\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\n    }\n\n    /**\n     * Если обновилось хранилище данных формы, currentDataStorage или модель, то получаем новые опции c сервера\n     */\n    if (\n      this.props.formsStore !== prevProps.formsStore ||\n      this.props.currentModel !== prevProps.currentModel ||\n      this.props.currentDataStorage !== prevProps.currentDataStorage\n    ) {\n      this.updateOptions();\n    }\n    if (content_options && !model_for_options) {\n      let options = parseOptionsFromSettings(content_options);\n      if (!_.isEqual(options, this.state.options)) {\n        this.setState(state => ({ ...state, options }));\n      }\n    }\n    this.updateValue(prevProps);\n  }\n\n  /**\n   * Обновить значение если нужно\n   * @param {{}} prevProps\n   */\n  updateValue(prevProps) {\n\n    if (isEditor()) {\n      return;\n    }\n\n    let content_calculation = this.props.element.getSettings(\n      \"content_calculation\"\n    );\n    const altrpforms = this.props.formsStore;\n    const fieldName = this.props.element.getFieldId();\n    const formId = this.props.element.getFormId();\n\n    if (!content_calculation) {\n      /**\n       * Обновить значение, если formsStore изменилось из другого компонента\n       */\n      const path = `${formId}.${fieldName}`;\n      if (\n        this.props.formsStore !== prevProps.formsStore &&\n        _.get(altrpforms, path) !== this.state.value\n      ) {\n        this.setState(state => ({\n          ...state,\n          value: _.get(altrpforms, path)\n        }));\n      }\n      return;\n    }\n\n    const prevContext = {};\n    const altrpdata = this.props.currentDataStorage.getData();\n    const altrpmodel = this.props.currentModel.getData();\n    const altrpuser = this.props.currentUser.getData();\n    const altrppagestate = this.props.altrpPageState.getData();\n    const altrpresponses = this.props.altrpresponses.getData();\n    const altrpmeta = this.props.altrpMeta.getData();\n    const context = this.props.element.getCurrentModel().getData();\n\n    if (content_calculation.indexOf(\"altrpdata\") !== -1) {\n      context.altrpdata = altrpdata;\n      if (!altrpdata.currentDataStorageLoaded) {\n        prevContext.altrpdata = altrpdata;\n      } else {\n        prevContext.altrpdata = prevProps.currentDataStorage.getData();\n      }\n    }\n\n    if (content_calculation.indexOf(\"altrpforms\") !== -1) {\n      context.altrpforms = altrpforms;\n      /**\n       * Не производим вычисления, если изменилось текущее поле\n       */\n      if (`${formId}.${fieldName}` === altrpforms.changedField) {\n        prevContext.altrpforms = altrpforms;\n      } else {\n        prevContext.altrpforms = prevProps.formsStore;\n      }\n    }\n\n    if (content_calculation.indexOf(\"altrpmodel\") !== -1) {\n      context.altrpmodel = altrpmodel;\n      prevContext.altrpmodel = prevProps.currentModel.getData();\n    }\n\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\n      context.altrpuser = altrpuser;\n      prevContext.altrpuser = prevProps.currentUser.getData();\n    }\n\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\n      context.altrpuser = altrpuser;\n      prevContext.altrpuser = prevProps.currentUser.getData();\n    }\n\n    if (content_calculation.indexOf(\"altrppagestate\") !== -1) {\n      context.altrppagestate = altrppagestate;\n      prevContext.altrppagestate = prevProps.altrpPageState.getData();\n    }\n\n    if (content_calculation.indexOf(\"altrpmeta\") !== -1) {\n      context.altrpmeta = altrpmeta;\n      prevContext.altrpmeta = prevProps.altrpMeta.getData();\n    }\n\n    if (content_calculation.indexOf(\"altrpresponses\") !== -1) {\n      context.altrpresponses = altrpresponses;\n      prevContext.altrpresponses = prevProps.altrpresponses.getData();\n    }\n\n    if (content_calculation.indexOf(\"altrpstorage\") !== -1) {\n      context.altrpstorage = getDataFromLocalStorage(\"altrpstorage\", {});\n    }\n\n    if (\n      _.isEqual(prevProps.currentDataStorage, this.props.currentDataStorage) &&\n      _.isEqual(prevProps.currentUser, this.props.currentUser) &&\n      _.isEqual(prevProps.formsStore, this.props.formsStore) &&\n      _.isEqual(prevProps.altrpPageState, this.props.altrpPageState) &&\n      _.isEqual(prevProps.altrpMeta, this.props.altrpMeta) &&\n      _.isEqual(prevProps.altrpresponses, this.props.altrpresponses) &&\n      _.isEqual(prevProps.currentModel, this.props.currentModel)\n    ) {\n      return;\n    }\n\n    if (\n      !_.isEqual(prevProps.formsStore, this.props.formsStore) &&\n      `${formId}.${fieldName}` === altrpforms.changedField\n    ) {\n      return;\n    }\n\n    let value = \"\";\n\n    try {\n      content_calculation = content_calculation\n        .replace(/}}/g, \"')\")\n        .replace(/{{/g, \"_.get(context, '\");\n      value = eval(content_calculation);\n      if (value === this.state.value) {\n        return;\n      }\n      this.setState(\n        state => ({ ...state, value }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n    } catch (e) {\n      console.error(\n        \"Evaluate error in Input: '\" + e.message + \"'\",\n        this.props.element.getId()\n      );\n    }\n  }\n\n  /**\n   * Обновляет опции для селекта при обновлении данных, полей формы\n   */\n  async updateOptions() {\n    {\n      let formId = this.props.element.getFormId();\n      let paramsForUpdate = this.props.element.getSettings(\"params_for_update\");\n      let formData = _.get(this.props.formsStore, [formId], {});\n      paramsForUpdate = parseParamsFromString(\n        paramsForUpdate,\n        new AltrpModel(formData)\n      );\n      /**\n       * Сохраняем параметры запроса, и если надо обновляем опции\n       */\n      let options = [...this.state.options];\n\n      if (!_.isEqual(paramsForUpdate, this.state.paramsForUpdate)) {\n        if (!_.isEmpty(paramsForUpdate)) {\n          if (this.props.element.getSettings(\"params_as_filters\", false)) {\n            paramsForUpdate = JSON.stringify(paramsForUpdate);\n            options = await new Resource({\n              route: this.getRoute()\n            }).getQueried({ filters: paramsForUpdate });\n          } else {\n            options = await new Resource({ route: this.getRoute() }).getQueried(\n              paramsForUpdate\n            );\n          }\n          options = !_.isArray(options) ? options.data : options;\n          options = _.isArray(options) ? options : [];\n        } else if (this.state.paramsForUpdate) {\n          options = await new Resource({ route: this.getRoute() }).getAll();\n          options = !_.isArray(options) ? options.data : options;\n          options = _.isArray(options) ? options : [];\n        }\n\n        this.setState(state => ({\n          ...state,\n          paramsForUpdate,\n          options\n        }));\n      }\n    }\n  }\n\n  /**\n   * Изменение значения в виджете\n   * @param e\n   * @param  editor для получения изменений из CKEditor\n   */\n  onChange(e, editor = null) {\n    let value = \"\";\n    let valueToDispatch;\n\n    if (e && e.target) {\n      value = e.target.value;\n    }\n\n    if (e && e.value) {\n      value = e.value;\n    }\n\n    if (_.get(editor, \"getData\")) {\n      value = `<div class=\"ck ck-content\" style=\"width:100%\">${editor.getData()}</div>`;\n    }\n\n    if (_.isArray(e)) {\n      value = _.cloneDeep(e);\n    }\n\n    if (\n      this.props.element.getSettings(\"content_options_nullable\") &&\n      e &&\n      e.value === \"<null>\"\n    ) {\n      value = null;\n    }\n\n    this.setState(\n      state => ({\n        ...state,\n        value\n      }),\n      () => {\n        /**\n         * Обновляем хранилище только если не текстовое поле\n         */\n\n        const change_actions = this.props.element.getSettings(\"change_actions\");\n        const change_change_end = this.props.element.getSettings(\n          \"change_change_end\"\n        );\n        const change_change_end_delay = this.props.element.getSettings(\n          \"change_change_end_delay\"\n        );\n\n        if (change_actions && !change_change_end && !isEditor()) {\n          this.debounceDispatch(\n            valueToDispatch !== undefined ? valueToDispatch : value\n          );\n        }\n        if (change_actions && change_change_end && !isEditor()) {\n          this.timeInput && clearTimeout(this.timeInput);\n          this.timeInput = setTimeout(() => {\n            this.debounceDispatch(\n              valueToDispatch !== undefined ? valueToDispatch : value\n            );\n          }, change_change_end_delay);\n        }\n      }\n    );\n  }\n\n  debounceDispatch = _.debounce(\n    value => this.dispatchFieldValueToStore(value, true),\n    150\n  );\n\n  /**\n   * получить опции\n   */\n  getOptions() {\n    let options = [...this.state.options];\n    const optionsDynamicSetting = this.props.element.getDynamicSetting(\n      \"content_options\"\n    );\n\n    if (optionsDynamicSetting) {\n      options = convertData(optionsDynamicSetting, options);\n    }\n\n    if (!this.props.element.getSettings(\"sort_default\")) {\n      options = _.sortBy(options, o => o && (o.label ? o.label.toString() : o));\n    }\n\n    return options;\n  }\n\n  /**\n   * Передадим значение в хранилище формы\n   * @param {*} value\n   * @param {boolean} userInput true - имзенилось пользователем\n   */\n  dispatchFieldValueToStore = async (value, userInput = false) => {\n    let formId = this.props.element.getFormId();\n    let fieldName = this.props.element.getFieldId();\n\n    if (fieldName.indexOf(\"{{\") !== -1) {\n      fieldName = replaceContentWithData(fieldName);\n    }\n\n    if (_.isObject(this.props.appStore) && fieldName && formId) {\n      this.props.appStore.dispatch(\n        changeFormFieldValue(fieldName, value, formId, userInput)\n      );\n\n      if (userInput) {\n        const change_actions = this.props.element.getSettings(\"change_actions\");\n\n        if (change_actions && !isEditor()) {\n          const actionsManager = (\n            await import(\n              /* webpackChunkName: 'ActionsManager' */\n              \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\n            )\n          ).default;\n          await actionsManager.callAllWidgetActions(\n            this.props.element.getIdForAction(),\n            \"change\",\n            change_actions,\n            this.props.element\n          );\n        }\n      }\n    }\n  };\n\n\n  /**\n   * Взовращает имя для атрибута name\n   * @return {string}\n   */\n  getName() {\n    return `${this.props.element.getFormId()}[${this.props.element.getFieldId()}]`;\n  }\n  /**\n   *\n   * @returns {*}\n   */\n  getValue = () => {\n    let value;\n    let formId = this.props.element.getFormId();\n    let fieldName = this.props.element.getFieldId();\n    if (isEditor()) {\n      value = this.state.value;\n    } else {\n      value = _.get(appStore.getState(), `formsStore.${formId}.${fieldName}`, '')\n    }\n    return value;\n  }\n\n  render() {\n    if(isEditor()){\n      return <FromIcon/>\n    }\n    let value = this.getValue()\n    return <input value={value}\n                  type=\"hidden\"\n                  name={this.getName()}\n                  id={this.getName()}/>\n  }\n}\n\nexport default InputHiddenWidget;\n"],"sourceRoot":""}