{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/front-app/src/js/functions/menus.js","webpack:///./resources/modules/editor/src/js/components/widgets/MenuWidget.js","webpack:///./resources/modules/front-app/src/js/store/menus-storage/actions.js"],"names":["AltrpModel","data","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","value","getData","set","unset","window","getMenuByGUID","guid","resource","Resource","route","altrpHelpers","isEditor","mbParseJSON","altrpLibs","Blueprint","Button","ButtonGroup","Menu","MenuItem","Position","Popover2","globalDefaults","push","props","getMenuData","menuGUID","element","getResponsiveSetting","state","menuData","loading","menus","appStore","getState","altrpMenus","find","menu","children","settings","dispatch","addMenu","setState","getMenuClasses","join","renderSubItems","items","depth","length","popoverProps","usePortal","portalClassName","elementId","portalContainer","EditorFrame","contentWindow","document","body","renderButton","position","BOTTOM_LEFT","map","item","href","url","width","className","key","id","onClick","e","preventDefault","history","location","icon","dangerouslySetInnerHTML","__html","text","label","toggle_icon","_","content","renderVerticalMenu","minimal","elementDecorator","baseRender","render","getId","fill","alignText","rightIcon","type","Component","ADD_MENU"],"mappings":"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","file":"MenuWidget.7f7e8aaa7ee0445f4398.bundle.js","sourcesContent":["/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","import Resource from \"../../../../editor/src/js/classes/Resource\";\r\n\r\n/**\r\n *\r\n * @param guid\r\n * @return {Promise<{}>}\r\n */\r\nexport async function getMenuByGUID(guid = ''){\r\n  if(! guid){\r\n    return null;\r\n  }\r\n  const resource = new Resource({route: '/ajax/menus'})\r\n  let data = await resource.get(guid);\r\n  return data;\r\n}\r\n","import {getMenuByGUID} from \"../../../../../front-app/src/js/functions/menus\";\nimport {addMenu} from \"../../../../../front-app/src/js/store/menus-storage/actions\";\nconst { isEditor, mbParseJSON} = window.altrpHelpers;\n\n\nconst {Button, ButtonGroup, Menu, MenuItem, Position} = window.altrpLibs.Blueprint;\nconst Popover2 = window.altrpLibs.Popover2;\n\n(window.globalDefaults = window.globalDefaults || []).push(`.altrp-menu-item__icon svg {\n    display: block;\n    height: 20px;\n    width: 20px;\n  }`)\nclass MenuWidget extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n\n    if (window.elementDecorator) {\n      window.elementDecorator(this);\n    }\n    if (props.baseRender) {\n      this.render = props.baseRender(this);\n    }\n    this.elementId = props.element.getId();\n  }\n\n  getMenuData = async () => {\n    let menuGUID = this.props.element.getResponsiveSetting('menu')\n    if ((this.state.menuData || !menuGUID) && this.menuGUID === menuGUID || this.loading) {\n      return\n    }\n\n    this.loading = true;\n    const menus = appStore.getState().altrpMenus;\n    let menuData = menus.find(menu => menu.guid === menuGUID)\n    if (!menuData) {\n      menuData = await getMenuByGUID(menuGUID);\n      menuData.children = mbParseJSON(menuData.children)\n      menuData.settings = mbParseJSON(menuData.settings)\n      appStore.dispatch(addMenu(menuData));\n    }\n    this.setState(state => ({...state, menuData}), () => {\n      this.loading = false;\n      this.menuGUID = menuGUID\n    })\n  }\n\n  renderHorizontalMenu() {\n    this.getMenuData();\n    const {menuData} = this.state;\n    if (!menuData) {\n      return 'Select Menu';\n    }\n    return <ButtonGroup fill={true} alignText=\"left\">\n      {menuData.children.map(item => {\n        return <Button\n          minimal={true}\n          icon={<span className=\"altrp-menu-item__icon\" dangerouslySetInnerHTML={{__html: item.icon}}/>}\n          rightIcon=\"caret-down\"\n          text={item.label}\n          href={item.url}\n          key={item.id}\n          onClick={(e) => {\n            e.preventDefault();\n            if(! item.url || isEditor() ){\n              return;\n            }\n            if (!this.props.history) {\n              window.location.href = item.url\n              return\n            }\n            this.props.history.push(item.url);\n          }}/>\n      })}\n\n    </ButtonGroup>\n  }\n\n  renderVerticalMenu() {\n    this.getMenuData();\n    const {menuData} = this.state;\n    if (!menuData) {\n      return 'Select Menu';\n    }\n    return <Menu className={this.getMenuClasses()}>\n      {/*{menuData.children.map(child)}*/}\n      {this.renderSubItems(menuData.children, 1)}\n    </Menu>\n  }\n\n  /**\n   * @return {string}\n   */\n  getMenuClasses = () => {\n    let classes = ['altrp-menu'];\n\n    return classes.join(' ');\n  }\n  /**\n   *\n   * @param {[]} items\n   * @param {int} depth\n   * @return {JSX.Element|null}\n   */\n  renderSubItems = (items, depth) => {\n    if (!items.length) {\n      return null;\n    }\n    const {element} = this.props;\n    const popoverProps = {\n      usePortal: true,\n      // isOpen:true ,\n      portalClassName: `altrp-portal altrp-portal${this.elementId}`,\n      portalContainer: window.EditorFrame ? window.EditorFrame.contentWindow.document.body : document.body,\n    };\n    let renderButton = this.props.element.getResponsiveSetting('button');\n\n    if (depth === 1 && element.getResponsiveSetting('type') === 'horizontal' && !renderButton) {\n      popoverProps.position = Position.BOTTOM_LEFT;\n    }\n    return <>\n      {items.map((item) => {\n        return <MenuItem\n          popoverProps={popoverProps}\n          depth={depth}\n          href={item.url}\n          width={100}\n          className={`altrp-menu-item altrp-menu-item${this.elementId}`}\n          key={item.id}\n          onClick={(e) => {\n            e.preventDefault();\n            if(isEditor() || ! item.url){\n              return;\n            }\n            if ( !this.props.history || ! item.url) {\n              window.location.href = item.url\n              return\n            }\n            this.props.history.push(item.url);\n          }}\n          icon={<span className=\"altrp-menu-item__icon\" dangerouslySetInnerHTML={{__html: item.icon}}/>}\n          // text={<Link className=\"altrp-menu-item__link\" to={item.url}>{item.label}</Link>}>\n          text={item.label}>\n          {this.renderSubItems(item.children, depth + 1)}\n        </MenuItem>\n\n      })}\n    </>\n  }\n\n\n  renderButton = () => {\n    const {menuData} = this.state;\n    if (!menuData) {\n      return null;\n    }\n    let toggle_icon = _.get(menuData, 'settings.toggle_icon', '')\n    return <Popover2 content={this.renderVerticalMenu()}\n                     className=\"altrp-popover\"\n                     portalContainer={window.EditorFrame ? window.EditorFrame.contentWindow.document.body : document.body}\n                     portalClassName={`altrp-portal altrp-portal_main altrp-portal${this.elementId}`}\n                     minimal={true}>\n      <Button className=\"altrp-menu-toggle\" text={toggle_icon ?\n        <span className=\"altrp-menu-item__icon\" dangerouslySetInnerHTML={{__html: toggle_icon}}/> : ''}/>\n    </Popover2>\n  }\n\n  render() {\n    this.getMenuData();\n    let type = this.props.element.getResponsiveSetting('type');\n    let renderButton = this.props.element.getResponsiveSetting('button');\n    if (renderButton) {\n      return <>\n        {this.renderButton()}\n      </>\n    }\n    switch (type) {\n      case 'horizontal': {\n        return <>\n          {this.renderVerticalMenu()}\n        </>\n      }\n      default: {\n        return <>\n          {this.renderVerticalMenu()}\n        </>;\n      }\n    }\n  }\n}\n\nexport default MenuWidget\n","export const ADD_MENU = 'ADD_MENU';\r\n/**\r\n *\r\n * @param {{}} menu\r\n * @return {{}} -\r\n *   {\r\n *     type: {string},\r\n *     menu: {},\r\n *   }\r\n */\r\nexport function addMenu(menu) {\r\n  return {\r\n    type: ADD_MENU,\r\n    menu,\r\n  };\r\n}\r\n"],"sourceRoot":""}