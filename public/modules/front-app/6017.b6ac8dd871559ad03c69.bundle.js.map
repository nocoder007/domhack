{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/editor/src/js/components/altrp-tooltip/AltrpTooltip.js","webpack:///./resources/modules/editor/src/js/components/widgets/styled-components/NavComponent.js","webpack:///./resources/modules/front-app/src/js/store/current-page/actions.js"],"names":["AltrpModel","data","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","value","getData","set","unset","window","Tooltip2","altrpHelpers","isEditor","isSSR","offset","slider","size","altrpLibs","props","children","state","minimal","position","horizontal","vertical","offsetArray","parseInt","body","document","editor","React","getElementById","contentWindow","_","isString","content","text","popoverClassName","id","isOpen","interactionKind","placement","portalContainer","modifiers","enabled","options","NavComponent","styled","div","justifyContent","settings","styles","undefined","getResponsiveSetting","simplePropertyStyled","typographic","color","typographicControllerToStyles","colorPropertyStyled","horizontalPadding","verticalPadding","sizeStyled","fill","stroke","iconSizeStyled","marginRight","marginLeft","transformRotate","transformRotateStyled","backgroundColor","height","borderWidth","heightCalcStyled","borderTopStyle","borderTopColor","borderTopWidth","padding","borderType","borderColor","borderRadius","dimensionsControllerToStyles","borderWidthStyled","alignItems","width","marginTop","borderRadiusTopRight","borderRadiusBottomLeft","typographicSubmenu","colorSubmenu","strokeSubmenu","background","widthSubmenu","borderTypeSubmenu","borderWidthSubmenu","borderColorSubmenu","borderRadiusSubmenu","borderRadiusSubmenu2","borderRadiusTopRight2","borderRadiusBottomLeft2","borderTop2","elementId","top","unit","right","bottom","left","CHANGE_CURRENT_PAGE","CHANGE_CURRENT_PAGE_PROPERTY","changeCurrentPageProperty","propertyName","type"],"mappings":"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","file":"6017.b6ac8dd871559ad03c69.bundle.js","sourcesContent":["/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","import React from 'react';\nconst {isEditor, isSSR} = window.altrpHelpers;\nlet Tooltip2;\n\nif(window.altrpLibs) {\n  Tooltip2 = window.altrpLibs.Tooltip2;\n}\n\nfunction offset(slider) {\n  if(!slider) {\n    slider = {size: null}\n  } else if(!slider.size) {\n    slider = {size: null, ...slider }\n  }\n\n  if(slider.size === 0) {\n    return { size: null }\n  }\n\n  return slider\n}\n\nfunction AltrpTooltip(props) {\n  if(isSSR()){\n    return <>{props.children}</>;\n  }\n  const state = props.state || \"never\";\n  const minimal = props.minimal || false;\n  const position = props.position || \"bottom\";\n\n  let horizontal = offset(props.horizontal);\n  let vertical = offset(props.vertical);\n  let offsetArray = [parseInt(horizontal.size|| 0), parseInt(vertical.size|| 10)];\n\n  switch (position) {\n    case \"left\":\n      offsetArray = [parseInt(vertical.size), parseInt(horizontal.size|| 10)];\n      break;\n    case \"right\":\n      offsetArray = [parseInt(vertical.size), parseInt(horizontal.size|| 10)];\n      break;\n  }\n\n\n  let body = document.body;\n\n  if(!props.editor) {\n    body = React.useMemo(() => {\n      return isEditor() ?\n        document.getElementById(\"editorContent\").contentWindow.document.body\n        :\n        document.body\n    });\n  }\n  if(Tooltip2 && props.children && !_.isString(props.children)) {\n    return <Tooltip2\n      content={props.text}\n      popoverClassName={`altrp-tooltip-popover altrp-tooltip${props.id}`}\n      isOpen={state === \"always\" ? true : null}\n      interactionKind={state !== \"always\" ? state : null }\n      placement={position}\n      minimal={minimal}\n      portalContainer={body}\n      modifiers={{\n        offset: {\n          enabled: true,\n          options: {\n            offset: offsetArray\n          }\n        },\n      }}\n    >\n      {\n        props.children\n      }\n    </Tooltip2>\n  } else {\n    return props.children\n  }\n}\n\nexport default AltrpTooltip;\n","import { getResponsiveSetting } from \"../../../../../../front-app/src/js/helpers\";\r\nimport {\r\n  simplePropertyStyled,\r\n  borderWidthStyled,\r\n  colorPropertyStyled,\r\n  dimensionsControllerToStyles,\r\n  typographicControllerToStyles,\r\n  sizeStyled,\r\n  heightCalcStyled,\r\n  transformRotateStyled,\r\n  iconSizeStyled,\r\n} from \"../../../../../../front-app/src/js/helpers/styles\";\r\n\r\nconst NavComponent = styled.div`\r\n\r\n  && .altrp-nav-menu-dropdown-wrapper {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let justifyContent;\r\n\r\n      //Получаем значения justify-content из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        justifyContent = getResponsiveSetting(settings, 'toggle_align_dropdown_menu_layout');\r\n      }\r\n\r\n      if (justifyContent) {\r\n        styles += simplePropertyStyled(justifyContent, 'justify-content');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-label {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let typographic, color;\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'typographic_main_menu_style');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'text_color_main_menu_style');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-label:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let typographic, color;\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'typographic_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'text_color_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let color, horizontalPadding, verticalPadding;\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'text_color_main_menu_style');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      //Получаем значения horizontal-padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        horizontalPadding = getResponsiveSetting(settings, 'horizontal_padding_main_menu_style');\r\n      }\r\n\r\n      if (horizontalPadding) {\r\n        styles += sizeStyled(horizontalPadding, 'padding-left');\r\n        styles += sizeStyled(horizontalPadding, 'padding-right');\r\n      }\r\n\r\n      //Получаем значения vertical-padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        verticalPadding = getResponsiveSetting(settings, 'vertical_padding_main_menu_style');\r\n      }\r\n\r\n      if (verticalPadding) {\r\n        styles += sizeStyled(verticalPadding, 'padding-top');\r\n        styles += sizeStyled(verticalPadding, 'padding-bottom');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let color, horizontalPadding, verticalPadding;\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'text_color_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      //Получаем значения horizontal-padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        horizontalPadding = getResponsiveSetting(settings, 'horizontal_padding_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (horizontalPadding) {\r\n        styles += sizeStyled(horizontalPadding, 'padding-left');\r\n        styles += sizeStyled(horizontalPadding, 'padding-right');\r\n      }\r\n\r\n      //Получаем значения vertical-padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        verticalPadding = getResponsiveSetting(settings, 'vertical_padding_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (verticalPadding) {\r\n        styles += sizeStyled(verticalPadding, 'padding-top');\r\n        styles += sizeStyled(verticalPadding, 'padding-bottom');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link path {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let fill, stroke;\r\n\r\n      //Получаем значения fill из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        fill = getResponsiveSetting(settings, 'fill_chevron_main_menu_style');\r\n      }\r\n\r\n      if (fill) {\r\n        styles += colorPropertyStyled(fill, 'fill');\r\n      }\r\n\r\n      //Получаем значения stroke из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        stroke = getResponsiveSetting(settings, 'stroke_chevron_main_menu_style');\r\n      }\r\n\r\n      if (stroke) {\r\n        styles += colorPropertyStyled(stroke, 'stroke');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link:hover path {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let fill, stroke;\r\n\r\n      //Получаем значения fill из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        fill = getResponsiveSetting(settings, 'fill_chevron_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (fill) {\r\n        styles += colorPropertyStyled(fill, 'fill');\r\n      }\r\n\r\n      //Получаем значения stroke из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        stroke = getResponsiveSetting(settings, 'stroke_chevron_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (stroke) {\r\n        styles += colorPropertyStyled(stroke, 'stroke');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link svg {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let size;\r\n\r\n      //Получаем значения width и height из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        size = getResponsiveSetting(settings, 'size_chevron_main_menu_style');\r\n      }\r\n\r\n      if (size) {\r\n        styles += iconSizeStyled(size);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link:hover svg {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let size;\r\n\r\n      //Получаем значения width и height из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        size = getResponsiveSetting(settings, 'size_chevron_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (size) {\r\n        styles += iconSizeStyled(size);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let marginRight;\r\n\r\n      //Получаем значения margin-right в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        marginRight = getResponsiveSetting(settings, 'space_between_main_menu_style');\r\n      }\r\n\r\n      if (marginRight) {\r\n        styles += sizeStyled(marginRight, 'margin-right');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let marginRight;\r\n\r\n      //Получаем значения margin-right в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        marginRight = getResponsiveSetting(settings, 'space_between_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (marginRight) {\r\n        styles += sizeStyled(marginRight, 'margin-right');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link .altrp-nav-menu-li-link-icon {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let marginLeft, transformRotate;\r\n\r\n      //Получаем значения margin-left в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        marginLeft = getResponsiveSetting(settings, 'dropdown_indicator_space_main_menu_style');\r\n      }\r\n\r\n      if (marginLeft) {\r\n        styles += sizeStyled(marginLeft, 'margin-left');\r\n      }\r\n\r\n      //Получаем значения transform rotate в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        transformRotate = getResponsiveSetting(settings, 'chevron_rotate_main_menu_style');\r\n      }\r\n\r\n      if (transformRotate) {\r\n        styles += transformRotateStyled(transformRotate);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link:hover .altrp-nav-menu-li-link-icon {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let marginLeft, transformRotate;\r\n\r\n      //Получаем значения margin-left в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        marginLeft = getResponsiveSetting(settings, 'dropdown_indicator_space_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (marginLeft) {\r\n        styles += sizeStyled(marginLeft, 'margin-left');\r\n      }\r\n\r\n      //Получаем значения transform rotate в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        transformRotate = getResponsiveSetting(settings, 'chevron_rotate_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (transformRotate) {\r\n        styles += transformRotateStyled(transformRotate);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-overline:before,\r\n  && .altrp-nav-menu-li-underLine:after,\r\n  && .altrp-nav-menu-li-doubleLine:before,\r\n  && .altrp-nav-menu-li-framed:before,\r\n  && .altrp-nav-menu-li-framed:after,\r\n  && .altrp-nav-menu-li-background:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let backgroundColor;\r\n\r\n      //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        backgroundColor = getResponsiveSetting(settings, 'pointer_color_main_menu_style');\r\n      }\r\n\r\n      if (backgroundColor) {\r\n        styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-overline:hover::before,\r\n  && .altrp-nav-menu-li-underLine:hover::after,\r\n  && .altrp-nav-menu-li-doubleLine:hover::before,\r\n  && .altrp-nav-menu-li-framed:hover::before,\r\n  && .altrp-nav-menu-li-framed:hover::after,\r\n  && .altrp-nav-menu-li-background:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let backgroundColor;\r\n\r\n      //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        backgroundColor = getResponsiveSetting(settings, 'pointer_color_main_menu_style', ':hover');\r\n      }\r\n\r\n      if (backgroundColor) {\r\n        styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-animation-text:hover .altrp-nav-menu-li-link-label {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let color;\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'pointer_color_main_menu_style');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-underline:after,\r\n  && .altrp-nav-menu-li-overline:before,\r\n  && .altrp-nav-menu-li-doubleLine:before {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let height;\r\n\r\n      //Получаем значения height в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        height = getResponsiveSetting(settings, 'pointer_height_main_menu_style');\r\n      }\r\n\r\n      if (height) {\r\n        styles += sizeStyled(height, 'height');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-framed:hover::after {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let borderWidth;\r\n\r\n      //Получаем значения border-width в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderWidth = getResponsiveSetting(settings, 'pointer_height_main_menu_style');\r\n      }\r\n\r\n      if (borderWidth) {\r\n        styles += sizeStyled(borderWidth, 'border-right-width');\r\n        styles += sizeStyled(borderWidth, 'border-bottom-width');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-framed:hover:before {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let borderWidth;\r\n\r\n      //Получаем значения border-width в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderWidth = getResponsiveSetting(settings, 'pointer_height_main_menu_style');\r\n      }\r\n\r\n      if (borderWidth) {\r\n        styles += sizeStyled(borderWidth, 'border-top-width');\r\n        styles += sizeStyled(borderWidth, 'border-left-width');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-doubleLine:after {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let height;\r\n\r\n      //Получаем значения height в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        height = getResponsiveSetting(settings, 'pointer_height_main_menu_style');\r\n      }\r\n\r\n      if (height) {\r\n        styles += heightCalcStyled(height);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-label-dropdown {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let color, typographic;\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'text_color_dropdown_menu_section');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'typographic_dropdown_menu_section');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-label-dropdown:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let color, typographic;\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'text_color_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'typographic_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-dropdown {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let horizontalPadding, verticalPadding;\r\n\r\n      //Получаем значения horizontal padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        horizontalPadding = getResponsiveSetting(settings, 'horizontal_padding_dropdown_menu_section');\r\n      }\r\n\r\n      if (horizontalPadding) {\r\n        styles += sizeStyled(horizontalPadding, 'padding-left');\r\n        styles += sizeStyled(horizontalPadding, 'padding-right');\r\n      }\r\n\r\n      //Получаем значения vertical padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        verticalPadding = getResponsiveSetting(settings, 'vertical_padding_dropdown_menu_section');\r\n      }\r\n\r\n      if (verticalPadding) {\r\n        styles += sizeStyled(verticalPadding, 'padding-top');\r\n        styles += sizeStyled(verticalPadding, 'padding-bottom');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-dropdown:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let horizontalPadding, verticalPadding;\r\n\r\n      //Получаем значения horizontal padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        horizontalPadding = getResponsiveSetting(settings, 'horizontal_padding_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (horizontalPadding) {\r\n        styles += sizeStyled(horizontalPadding, 'padding-left');\r\n        styles += sizeStyled(horizontalPadding, 'padding-right');\r\n      }\r\n\r\n      //Получаем значения vertical padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        verticalPadding = getResponsiveSetting(settings, 'vertical_padding_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (verticalPadding) {\r\n        styles += sizeStyled(verticalPadding, 'padding-top');\r\n        styles += sizeStyled(verticalPadding, 'padding-bottom');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-dropdown-s-content-divider {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let borderTopStyle, borderTopColor, borderTopWidth;\r\n\r\n      //Получаем значения border-top-style padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderTopStyle = getResponsiveSetting(settings, 'divider_type_dropdown_menu_section');\r\n      }\r\n\r\n      if (borderTopStyle) {\r\n        styles += simplePropertyStyled(borderTopStyle, 'border-top-style');\r\n      }\r\n\r\n      //Получаем значения borderTopColor из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderTopColor = getResponsiveSetting(settings, 'divider_color_dropdown_menu_section');\r\n      }\r\n\r\n      if (borderTopColor) {\r\n        styles += colorPropertyStyled(borderTopColor, 'border-top-color');\r\n      }\r\n\r\n      //Получаем значения border-top-width в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderTopWidth = getResponsiveSetting(settings, 'divider_width_dropdown_menu_section');\r\n      }\r\n\r\n      if (borderTopWidth) {\r\n        styles += sizeStyled(borderTopWidth, 'border-top-width');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-dropdown-s-content-divider:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let borderTopStyle, borderTopColor, borderTopWidth;\r\n\r\n      //Получаем значения border-top-style padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderTopStyle = getResponsiveSetting(settings, 'divider_type_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (borderTopStyle) {\r\n        styles += simplePropertyStyled(borderTopStyle, 'border-top-style');\r\n      }\r\n\r\n      //Получаем значения borderTopColor из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderTopColor = getResponsiveSetting(settings, 'divider_color_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (borderTopColor) {\r\n        styles += colorPropertyStyled(borderTopColor, 'border-top-color');\r\n      }\r\n\r\n      //Получаем значения border-top-width в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderTopWidth = getResponsiveSetting(settings, 'divider_width_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (borderTopWidth) {\r\n        styles += sizeStyled(borderTopWidth, 'border-top-width');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-chevron-dropdown {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let size, transformRotate;\r\n\r\n      //Получаем значения width и height из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        size = getResponsiveSetting(settings, 'chevron_width_dropdown_menu_section');\r\n      }\r\n\r\n      if (size) {\r\n        styles += iconSizeStyled(size);\r\n      }\r\n\r\n      //Получаем значения transform rotate в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        transformRotate = getResponsiveSetting(settings, 'chevron_rotate_dropdown_menu_section');\r\n      }\r\n\r\n      if (transformRotate) {\r\n        styles += transformRotateStyled(transformRotate);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-chevron-dropdown:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let size, transformRotate;\r\n\r\n      //Получаем значения width и height из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        size = getResponsiveSetting(settings, 'chevron_width_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (size) {\r\n        styles += iconSizeStyled(size);\r\n      }\r\n\r\n      //Получаем значения transform rotate в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        transformRotate = getResponsiveSetting(settings, 'chevron_rotate_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (transformRotate) {\r\n        styles += transformRotateStyled(transformRotate);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-active-chevron-dropdown {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let transformRotate;\r\n\r\n      //Получаем значения transform rotate в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        transformRotate = getResponsiveSetting(settings, 'chevron_active_rotate_dropdown_menu_section');\r\n      }\r\n\r\n      if (transformRotate) {\r\n        styles += transformRotateStyled(transformRotate);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-active-chevron-dropdown:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let transformRotate;\r\n\r\n      //Получаем значения transform rotate в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        transformRotate = getResponsiveSetting(settings, 'chevron_active_rotate_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (transformRotate) {\r\n        styles += transformRotateStyled(transformRotate);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-dropdown-button svg {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let size;\r\n\r\n      //Получаем значения width и height из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        size = getResponsiveSetting(settings, 'size_toggle_button_dropdown_menu_section');\r\n      }\r\n\r\n      if (size) {\r\n        styles += iconSizeStyled(size);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-dropdown-button:hover svg {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let size;\r\n\r\n      //Получаем значения width и height из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        size = getResponsiveSetting(settings, 'size_toggle_button_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (size) {\r\n        styles += iconSizeStyled(size);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n\r\n  && .altrp-nav-menu-dropdown-button svg path {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let fill, stroke;\r\n\r\n      //Получаем значения fill из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        fill = getResponsiveSetting(settings, 'color_toggle_button_fill_dropdown_menu_section');\r\n      }\r\n\r\n      if (fill) {\r\n        styles += colorPropertyStyled(fill, 'fill');\r\n      }\r\n\r\n      //Получаем значения stroke из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        stroke = getResponsiveSetting(settings, 'color_toggle_button_stroke_dropdown_menu_section');\r\n      }\r\n\r\n      if (stroke) {\r\n        styles += colorPropertyStyled(stroke, 'stroke');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-dropdown-button:hover svg path {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let fill, stroke;\r\n\r\n      //Получаем значения fill из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        fill = getResponsiveSetting(settings, 'color_toggle_button_fill_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (fill) {\r\n        styles += colorPropertyStyled(fill, 'fill');\r\n      }\r\n\r\n      //Получаем значения stroke из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        stroke = getResponsiveSetting(settings, 'color_toggle_button_stroke_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (stroke) {\r\n        styles += colorPropertyStyled(stroke, 'stroke');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-dropdown-button {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let backgroundColor, padding, borderType, borderWidth, borderColor, borderRadius;\r\n\r\n      //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        backgroundColor = getResponsiveSetting(settings, 'background_color_toggle_button_dropdown_menu_section');\r\n      }\r\n\r\n      if (backgroundColor) {\r\n        styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n      }\r\n\r\n      //Получаем значения padding из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        padding = getResponsiveSetting(settings, 'padding_toggle_button_dropdown_menu_section');\r\n      }\r\n\r\n      if (padding) {\r\n        styles += dimensionsControllerToStyles(padding);\r\n      }\r\n\r\n      //Получаем значения border-type из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderType = getResponsiveSetting(settings, 'border_type_toggle_button_dropdown_menu_section');\r\n      }\r\n\r\n      if (borderType) {\r\n        styles += simplePropertyStyled(borderType, 'border-style');\r\n      }\r\n\r\n      //Получаем значения border-width из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderWidth = getResponsiveSetting(settings, 'border_width_toggle_button_dropdown_menu_section');\r\n      }\r\n\r\n      if (borderWidth) {\r\n        styles += borderWidthStyled(borderWidth);\r\n      }\r\n\r\n      //Получаем значения border-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderColor = getResponsiveSetting(settings, 'border_color_toggle_button_dropdown_menu_section');\r\n      }\r\n\r\n      if (borderColor) {\r\n        styles += colorPropertyStyled(borderColor, 'border-color');\r\n      }\r\n\r\n      //Получаем значения border-radius из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderRadius = getResponsiveSetting(settings, 'border_radius_toggle_button_dropdown_menu_section');\r\n      }\r\n\r\n      if (borderRadius) {\r\n        styles += dimensionsControllerToStyles(borderRadius, 'border-radius');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-dropdown-button:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let backgroundColor, padding, borderType, borderWidth, borderColor, borderRadius;\r\n\r\n      //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        backgroundColor = getResponsiveSetting(settings, 'background_color_toggle_button_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (backgroundColor) {\r\n        styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n      }\r\n\r\n      //Получаем значения padding из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        padding = getResponsiveSetting(settings, 'padding_toggle_button_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (padding) {\r\n        styles += dimensionsControllerToStyles(padding);\r\n      }\r\n\r\n      //Получаем значения border-type из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderType = getResponsiveSetting(settings, 'border_type_toggle_button_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (borderType) {\r\n        styles += simplePropertyStyled(borderType, 'border-style');\r\n      }\r\n\r\n      //Получаем значения border-width из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderWidth = getResponsiveSetting(settings, 'border_width_toggle_button_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (borderWidth) {\r\n        styles += borderWidthStyled(borderWidth);\r\n      }\r\n\r\n      //Получаем значения border-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderColor = getResponsiveSetting(settings, 'border_color_toggle_button_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (borderColor) {\r\n        styles += colorPropertyStyled(borderColor, 'border-color');\r\n      }\r\n\r\n      //Получаем значения border-radius из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        borderRadius = getResponsiveSetting(settings, 'border_radius_toggle_button_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (borderRadius) {\r\n        styles += dimensionsControllerToStyles(borderRadius, 'border-radius');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let justifyContent, alignItems;\r\n\r\n      //Получаем значения justify-content из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        justifyContent = getResponsiveSetting(settings, 'breadcrumbs_style_alignment');\r\n      }\r\n\r\n      if (justifyContent) {\r\n        styles += simplePropertyStyled(justifyContent, 'justify-content');\r\n      }\r\n\r\n      //Получаем значения align-items из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        alignItems = getResponsiveSetting(settings, 'breadcrumbs_style_vertical_alignment');\r\n      }\r\n\r\n      if (alignItems) {\r\n        styles += simplePropertyStyled(alignItems, 'align-items');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-link {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let typographic, color;\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'breadcrumbs_links_style_typographic');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'breadcrumbs_links_style_color');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-link:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let typographic, color;\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'breadcrumbs_links_style_typographic', ':hover');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'breadcrumbs_links_style_color', ':hover');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-link:visited {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let color;\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'breadcrumbs_links_visited_style_color');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-separator-default,\r\n  && .altrp-nav-breadcrumbs-separator-text {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let typographic, color;\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'breadcrumbs_separator_default_style_typographic');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'breadcrumbs_separator_style_color');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-separator-default:hover,\r\n  && .altrp-nav-breadcrumbs-separator-text:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let typographic, color;\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'breadcrumbs_separator_default_style_typographic', ':hover');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'breadcrumbs_separator_style_color', ':hover');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-separator-icon svg {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let stroke, size;\r\n\r\n      //Получаем значения stroke из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        stroke = getResponsiveSetting(settings, 'breadcrumbs_separator_stroke_style_color');\r\n      }\r\n\r\n      if (stroke) {\r\n        styles += colorPropertyStyled(stroke, 'stroke');\r\n      }\r\n\r\n      //Получаем значения width и height из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        size = getResponsiveSetting(settings, 'breadcrumbs_separator_icon_width_style');\r\n      }\r\n\r\n      if (size) {\r\n        styles += iconSizeStyled(size);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-separator-icon:hover svg {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let stroke;\r\n\r\n      //Получаем значения stroke из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        stroke = getResponsiveSetting(settings, 'breadcrumbs_separator_stroke_style_color', ':hover');\r\n      }\r\n\r\n      if (stroke) {\r\n        styles += colorPropertyStyled(stroke, 'stroke');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-separator-icon svg:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let size;\r\n\r\n      //Получаем значения width и height из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        size = getResponsiveSetting(settings, 'breadcrumbs_separator_icon_width_style', ':hover');\r\n      }\r\n\r\n      if (size) {\r\n        styles += iconSizeStyled(size);\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-current {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let typographic, color;\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'breadcrumbs_current_page_style_typographic');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'breadcrumbs_current_page_style_color');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-current:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let typographic, color;\r\n\r\n      //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        typographic = getResponsiveSetting(settings, 'breadcrumbs_current_page_style_typographic', ':hover');\r\n      }\r\n\r\n      if (typographic) {\r\n        styles += typographicControllerToStyles(typographic);\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'breadcrumbs_current_page_style_color', ':hover');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-separator-icon svg path {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let fill;\r\n\r\n      //Получаем значения fill из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        fill = getResponsiveSetting(settings, 'breadcrumbs_separator_style_color');\r\n      }\r\n\r\n      if (fill) {\r\n        styles += colorPropertyStyled(fill, 'fill');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-separator-icon:hover svg path {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let fill;\r\n\r\n      //Получаем значения fill из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        fill = getResponsiveSetting(settings, 'breadcrumbs_separator_style_color', ':hover');\r\n      }\r\n\r\n      if (fill) {\r\n        styles += colorPropertyStyled(fill, 'fill');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-label {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let horizontalPadding;\r\n\r\n      //Получаем значения horizontal-padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        horizontalPadding = getResponsiveSetting(settings, 'breadcrumbs_style_space_between');\r\n      }\r\n\r\n      if (horizontalPadding) {\r\n        styles += sizeStyled(horizontalPadding, 'padding-left');\r\n        styles += sizeStyled(horizontalPadding, 'padding-right');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-breadcrumbs-label:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let horizontalPadding;\r\n\r\n      //Получаем значения horizontal-padding в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        horizontalPadding = getResponsiveSetting(settings, 'breadcrumbs_style_space_between', ':hover');\r\n      }\r\n\r\n      if (horizontalPadding) {\r\n        styles += sizeStyled(horizontalPadding, 'padding-left');\r\n        styles += sizeStyled(horizontalPadding, 'padding-right');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-chevron-dropdown path {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let color;\r\n\r\n      //Получаем значения fill и color  из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'chevron_color_dropdown_menu_section');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'fill');\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-link-chevron-dropdown:hover path {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let color;\r\n\r\n      //Получаем значения fill и color  из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'chevron_color_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'fill');\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-dropdown {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let backgroundColor;\r\n\r\n      //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        backgroundColor = getResponsiveSetting(settings, 'background_color_dropdown_menu_section');\r\n      }\r\n\r\n      if (backgroundColor) {\r\n        styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-dropdown:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let backgroundColor;\r\n\r\n      //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        backgroundColor = getResponsiveSetting(settings, 'background_color_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (backgroundColor) {\r\n        styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-sub {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let backgroundColor, color;\r\n\r\n      //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        backgroundColor = getResponsiveSetting(settings, 'background_color_sub_dropdown_menu_section');\r\n      }\r\n\r\n      if (backgroundColor) {\r\n        styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'color_sub_dropdown_menu_section');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  && .altrp-nav-menu-li-sub:hover {\r\n\r\n    ${props => {\r\n\r\n      const { settings } = props;\r\n      let styles = '';\r\n\r\n      let backgroundColor, color;\r\n\r\n      //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        backgroundColor = getResponsiveSetting(settings, 'background_color_sub_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (backgroundColor) {\r\n        styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n      }\r\n\r\n      //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n      if (settings !== undefined) {\r\n        color = getResponsiveSetting(settings, 'color_sub_dropdown_menu_section', ':hover');\r\n      }\r\n\r\n      if (color) {\r\n        styles += colorPropertyStyled(color, 'color');\r\n      }\r\n\r\n      return styles;\r\n\r\n    }\r\n    }\r\n  }\r\n\r\n  ${props => {\r\n\r\n    const {settings, elementId} = props;\r\n\r\n    if (!elementId) {\r\n      return '';\r\n    }\r\n\r\n    let transformRotate, typographic, color, stroke, backgroundColor, width, borderType, borderWidth, borderColor, borderRadius, marginTop, borderRadiusTopRight;\r\n    let borderRadiusBottomLeft, marginLeft, typographicSubmenu, colorSubmenu, strokeSubmenu, background, widthSubmenu, borderTypeSubmenu, borderWidthSubmenu;\r\n    let borderColorSubmenu, borderRadiusSubmenu, marginRight, borderTopStyle, borderTopWidth, borderRadiusSubmenu2, borderRadiusTopRight2, borderRadiusBottomLeft2, borderTop2;\r\n\r\n    let styles = `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li .altrp-nav-menu-ul-dropdown-hor-ver-li-link-icon, .${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li .altrp-nav-menu-ul-dropdown-hor-ver-li-link-icon {`;\r\n\r\n    //Получаем значения transform rotate из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      transformRotate = getResponsiveSetting(settings, 'chevron_rotate_dropdown_main_menu_style');\r\n    }\r\n\r\n    if (transformRotate) {\r\n      styles += transformRotateStyled(transformRotate);\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li:hover .altrp-nav-menu-ul-dropdown-hor-ver-li-link-icon, .${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li:hover .altrp-nav-menu-ul-dropdown-hor-ver-li-link-icon {`;\r\n\r\n    //Получаем значения transform rotate из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      transformRotate = getResponsiveSetting(settings, 'chevron_rotate_dropdown_main_menu_style', ':hover');\r\n    }\r\n\r\n    if (transformRotate) {\r\n      styles += transformRotateStyled(transformRotate);\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-li-dropdown-hor-ver-link-label {`;\r\n\r\n    //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      typographic = getResponsiveSetting(settings, 'typographic_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (typographic) {\r\n      styles += typographicControllerToStyles(typographic);\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-li-dropdown-hor-ver-link-label:hover {`;\r\n\r\n    //Получаем значения typographic из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      typographic = getResponsiveSetting(settings, 'typographic_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (typographic) {\r\n      styles += typographicControllerToStyles(typographic);\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li .altrp-nav-menu-li-dropdown-hor-ver-link-label {`;\r\n\r\n    //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      color = getResponsiveSetting(settings, 'text_color_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (color) {\r\n      styles += colorPropertyStyled(color, 'color');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li:hover .altrp-nav-menu-li-dropdown-hor-ver-link-label {`;\r\n\r\n    //Получаем значения color из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      color = getResponsiveSetting(settings, 'text_color_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (color) {\r\n      styles += colorPropertyStyled(color, 'color');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li .altrp-nav-menu-ul-dropdown-hor-ver-li-link-icon path {`;\r\n\r\n    //Получаем значения stroke из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      stroke = getResponsiveSetting(settings, 'text_color_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (stroke) {\r\n      styles += colorPropertyStyled(stroke, 'stroke');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li:hover .altrp-nav-menu-ul-dropdown-hor-ver-li-link-icon path {`;\r\n\r\n    //Получаем значения stroke из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      stroke = getResponsiveSetting(settings, 'text_color_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (stroke) {\r\n      styles += colorPropertyStyled(stroke, 'stroke');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li {`;\r\n\r\n    //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      backgroundColor = getResponsiveSetting(settings, 'background_color_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (backgroundColor) {\r\n      styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n    }\r\n\r\n    //Получаем значения width в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      width = getResponsiveSetting(settings, 'width_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (width) {\r\n      styles += sizeStyled(width, 'width');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li:hover {`;\r\n\r\n    //Получаем значения background-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      backgroundColor = getResponsiveSetting(settings, 'background_color_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (backgroundColor) {\r\n      styles += colorPropertyStyled(backgroundColor, 'background-color');\r\n    }\r\n\r\n    //Получаем значения width в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      width = getResponsiveSetting(settings, 'width_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (width) {\r\n      styles += sizeStyled(width, 'width');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver {`;\r\n\r\n    //Получаем значения border-type из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderType = getResponsiveSetting(settings, 'border_type_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderType) {\r\n      styles += simplePropertyStyled(borderType, 'border-style');\r\n    }\r\n\r\n    //Получаем значения border-width из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderWidth = getResponsiveSetting(settings, 'border_width_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderWidth) {\r\n      styles += borderWidthStyled(borderWidth);\r\n    }\r\n\r\n    //Получаем значения border-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderColor = getResponsiveSetting(settings, 'border_color_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderColor) {\r\n      styles += colorPropertyStyled(borderColor, 'border-color');\r\n    }\r\n\r\n    //Получаем значения border-radius из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadius = getResponsiveSetting(settings, 'border_radius_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderRadius) {\r\n      styles += dimensionsControllerToStyles(borderRadius, 'border-radius');\r\n    }\r\n\r\n    //Получаем значения margin-top в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      marginTop = getResponsiveSetting(settings, 'distance_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (marginTop) {\r\n      styles += sizeStyled(marginTop, 'margin-top');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver:hover {`;\r\n\r\n    //Получаем значения border-type из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderType = getResponsiveSetting(settings, 'border_type_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderType) {\r\n      styles += simplePropertyStyled(borderType, 'border-style');\r\n    }\r\n\r\n    //Получаем значения border-width из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderWidth = getResponsiveSetting(settings, 'border_width_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderWidth) {\r\n      styles += borderWidthStyled(borderWidth);\r\n    }\r\n\r\n    //Получаем значения border-color из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderColor = getResponsiveSetting(settings, 'border_color_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderColor) {\r\n      styles += colorPropertyStyled(borderColor, 'border-color');\r\n    }\r\n\r\n    //Получаем значения border-radius из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadius = getResponsiveSetting(settings, 'border_radius_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderRadius) {\r\n      styles += dimensionsControllerToStyles(borderRadius, 'border-radius');\r\n    }\r\n\r\n    //Получаем значения margin-top в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      marginTop = getResponsiveSetting(settings, 'distance_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (marginTop) {\r\n      styles += sizeStyled(marginTop, 'margin-top');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li:first-child {`;\r\n\r\n    //Получаем значения border-radius-top-right из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusTopRight = getResponsiveSetting(settings, 'border_radius_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderRadiusTopRight) {\r\n      styles += `border-radius: ${borderRadiusTopRight.top}${borderRadiusTopRight.unit} ${borderRadiusTopRight.right}${borderRadiusTopRight.unit} 0 0; `;\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li:first-child:hover {`;\r\n\r\n    //Получаем значения border-radius-top-right из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusTopRight = getResponsiveSetting(settings, 'border_radius_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderRadiusTopRight) {\r\n      styles += `border-radius: ${borderRadiusTopRight.top}${borderRadiusTopRight.unit} ${borderRadiusTopRight.right}${borderRadiusTopRight.unit} 0 0; `;\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li:last-child {`;\r\n\r\n    //Получаем значения border-radius-bottom-left из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusBottomLeft = getResponsiveSetting(settings, 'border_radius_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderRadiusBottomLeft) {\r\n      styles += `border-radius: 0 0 ${borderRadiusBottomLeft.bottom}${borderRadiusBottomLeft.unit} ${borderRadiusBottomLeft.left}${borderRadiusBottomLeft.unit}; `;\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li:last-child:hover {`;\r\n\r\n    //Получаем значения border-radius-bottom-left из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusBottomLeft = getResponsiveSetting(settings, 'border_radius_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderRadiusBottomLeft) {\r\n      styles += `border-radius: 0 0 ${borderRadiusBottomLeft.bottom}${borderRadiusBottomLeft.unit} ${borderRadiusBottomLeft.left}${borderRadiusBottomLeft.unit}; `;\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li-link-icon {`;\r\n\r\n    //Получаем значения margin-left в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      marginLeft = getResponsiveSetting(settings, 'submenu_indicator_space_main_menu_style');\r\n    }\r\n\r\n    if (marginLeft) {\r\n      styles += sizeStyled(marginLeft, 'margin-left');\r\n    }\r\n\r\n    //Получаем значения typographic-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      typographicSubmenu = getResponsiveSetting(settings, 'typographic_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (typographicSubmenu) {\r\n      styles += typographicControllerToStyles(typographicSubmenu);\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li-link-icon:hover {`;\r\n\r\n    //Получаем значения margin-left в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      marginLeft = getResponsiveSetting(settings, 'submenu_indicator_space_main_menu_style', ':hover');\r\n    }\r\n\r\n    if (marginLeft) {\r\n      styles += sizeStyled(marginLeft, 'margin-left');\r\n    }\r\n\r\n    //Получаем значения typographic-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      typographicSubmenu = getResponsiveSetting(settings, 'typographic_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (typographicSubmenu) {\r\n      styles += typographicControllerToStyles(typographicSubmenu);\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li .altrp-nav-menu-li-dropdown-children-hor-ver-link-label {`;\r\n\r\n    //Получаем значения color-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      colorSubmenu = getResponsiveSetting(settings, 'text_color_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (colorSubmenu) {\r\n      styles += colorPropertyStyled(colorSubmenu, 'color');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li:hover .altrp-nav-menu-li-dropdown-children-hor-ver-link-label {`;\r\n\r\n    //Получаем значения color-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      colorSubmenu = getResponsiveSetting(settings, 'text_color_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (colorSubmenu) {\r\n      styles += colorPropertyStyled(colorSubmenu, 'color');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li .altrp-nav-menu-ul-dropdown-children-hor-ver-li-link-icon path {`;\r\n\r\n    //Получаем значения stroke-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      strokeSubmenu = getResponsiveSetting(settings, 'text_color_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (strokeSubmenu) {\r\n      styles += colorPropertyStyled(strokeSubmenu, 'stroke');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li:hover .altrp-nav-menu-ul-dropdown-children-hor-ver-li-link-icon path {`;\r\n\r\n    //Получаем значения stroke-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      strokeSubmenu = getResponsiveSetting(settings, 'text_color_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (strokeSubmenu) {\r\n      styles += colorPropertyStyled(strokeSubmenu, 'stroke');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li {`;\r\n\r\n    //Получаем значения background из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      background = getResponsiveSetting(settings, 'background_color_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (background) {\r\n      styles += colorPropertyStyled(background, 'background');\r\n    }\r\n\r\n    //Получаем значения width-submenu в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      widthSubmenu = getResponsiveSetting(settings, 'width_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (widthSubmenu) {\r\n      styles += sizeStyled(widthSubmenu, 'width');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li:hover {`;\r\n\r\n    //Получаем значения background из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      background = getResponsiveSetting(settings, 'background_color_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (background) {\r\n      styles += colorPropertyStyled(background, 'background');\r\n    }\r\n\r\n    //Получаем значения width-submenu в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      widthSubmenu = getResponsiveSetting(settings, 'width_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (widthSubmenu) {\r\n      styles += sizeStyled(widthSubmenu, 'width');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver {`;\r\n\r\n    //Получаем значения border-type-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderTypeSubmenu = getResponsiveSetting(settings, 'border_type_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderTypeSubmenu) {\r\n      styles += simplePropertyStyled(borderTypeSubmenu, 'border-style');\r\n    }\r\n\r\n    //Получаем значения border-width-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderWidthSubmenu = getResponsiveSetting(settings, 'border_width_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderWidthSubmenu) {\r\n      styles += borderWidthStyled(borderWidthSubmenu);\r\n    }\r\n\r\n    //Получаем значения border-color-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderColorSubmenu = getResponsiveSetting(settings, 'border_color_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderColorSubmenu) {\r\n      styles += colorPropertyStyled(borderColorSubmenu, 'border-color');\r\n    }\r\n\r\n    //Получаем значения border-radius-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusSubmenu = getResponsiveSetting(settings, 'border-radius_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderRadiusSubmenu) {\r\n      styles += dimensionsControllerToStyles(borderRadiusSubmenu, 'border-radius');\r\n    }\r\n\r\n    //Получаем значения margin-right в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      marginRight = getResponsiveSetting(settings, 'distance_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (marginRight) {\r\n      styles += sizeStyled(marginRight, 'margin-right');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver:hover {`;\r\n\r\n    //Получаем значения border-type-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderTypeSubmenu = getResponsiveSetting(settings, 'border_type_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderTypeSubmenu) {\r\n      styles += simplePropertyStyled(borderTypeSubmenu, 'border-style');\r\n    }\r\n\r\n    //Получаем значения border-width-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderWidthSubmenu = getResponsiveSetting(settings, 'border_width_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderWidthSubmenu) {\r\n      styles += borderWidthStyled(borderWidthSubmenu);\r\n    }\r\n\r\n    //Получаем значения border-color-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderColorSubmenu = getResponsiveSetting(settings, 'border_color_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderColorSubmenu) {\r\n      styles += colorPropertyStyled(borderColorSubmenu, 'border-color');\r\n    }\r\n\r\n    //Получаем значения border-radius-submenu из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusSubmenu = getResponsiveSetting(settings, 'border-radius_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderRadiusSubmenu) {\r\n      styles += dimensionsControllerToStyles(borderRadiusSubmenu, 'border-radius');\r\n    }\r\n\r\n    //Получаем значения margin-right в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      marginRight = getResponsiveSetting(settings, 'distance_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (marginRight) {\r\n      styles += sizeStyled(marginRight, 'margin-right');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li-divider {`;\r\n\r\n    //Получаем значения border-top-style из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderTopStyle = getResponsiveSetting(settings, 'type_divider_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderTopStyle) {\r\n      styles += simplePropertyStyled(borderTopStyle, 'border-top-style');\r\n    }\r\n\r\n    //Получаем значения border-top-width в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderTopWidth = getResponsiveSetting(settings, 'height_divider_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderTopWidth) {\r\n      styles += sizeStyled(borderTopWidth, 'border-top-width');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li-divider:hover {`;\r\n\r\n    //Получаем значения border-top-width в точных юнитах из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderTopWidth = getResponsiveSetting(settings, 'height_divider_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderTopWidth) {\r\n      styles += sizeStyled(borderTopWidth, 'border-top-width');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-only .altrp-nav-menu-ul-dropdown-children-hor-ver-li {`;\r\n\r\n    //Получаем значения border-radius из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusSubmenu2 = getResponsiveSetting(settings, 'border-radius_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderRadiusSubmenu2) {\r\n      styles += dimensionsControllerToStyles(borderRadiusSubmenu2, 'border-radius');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    //hover\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-only:hover .altrp-nav-menu-ul-dropdown-children-hor-ver-li {`;\r\n\r\n    //Получаем значения border-radius из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusSubmenu2 = getResponsiveSetting(settings, 'border-radius_submenu_dropdown_hor_ver_menu_section', ':hover');\r\n    }\r\n\r\n    if (borderRadiusSubmenu2) {\r\n      styles += dimensionsControllerToStyles(borderRadiusSubmenu2, 'border-radius');\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li:first-child {`;\r\n\r\n    //Получаем значения border-radius-top-right из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusTopRight2 = getResponsiveSetting(settings, 'border-radius_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderRadiusTopRight2) {\r\n      styles += `border-radius: ${borderRadiusTopRight2.top}${borderRadiusTopRight2.unit} ${borderRadiusTopRight2.right}${borderRadiusTopRight2.unit} 0 0; `;\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-li:last-child {`;\r\n\r\n    //Получаем значения border-radius-bottom-left из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderRadiusBottomLeft2 = getResponsiveSetting(settings, 'border-radius_submenu_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderRadiusBottomLeft2) {\r\n      styles += `border-radius: 0 0 ${borderRadiusBottomLeft2.bottom}${borderRadiusBottomLeft2.unit} ${borderRadiusBottomLeft2.left}${borderRadiusBottomLeft2.unit}; `;\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    styles += `.${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-hor-ver-li:last-child .altrp-nav-menu-ul-dropdown-hor-ver-li-divider, .${elementId}-altrp-portal .altrp-nav-menu-ul-dropdown-children-hor-ver-ul .altrp-nav-menu-ul-dropdown-children-hor-ver-li:last-child .altrp-nav-menu-ul-dropdown-hor-ver-li-divider {`;\r\n\r\n    //Получаем значения border-top из контроллера, обрабатываем и добавляем в styles\r\n\r\n    if (settings !== undefined) {\r\n      borderTop2 = getResponsiveSetting(settings, 'height_divider_dropdown_hor_ver_menu_section');\r\n    }\r\n\r\n    if (borderTop2) {\r\n      styles += `border-top: none; `;\r\n    }\r\n\r\n    styles += `} `;\r\n\r\n    return styles;\r\n    }\r\n  }\r\n\r\n`;\r\n\r\nexport default NavComponent;\r\n","export const CHANGE_CURRENT_PAGE = \"CHANGE_CURRENT_PAGE\";\r\nexport const CHANGE_CURRENT_PAGE_PROPERTY = \"CHANGE_CURRENT_PAGE_PROPERTY\";\r\n\r\nexport function changeCurrentPage(pageData) {\r\n  return {\r\n    type: CHANGE_CURRENT_PAGE,\r\n    pageData: pageData || {}\r\n  };\r\n}\r\n\r\nexport function changeCurrentPageProperty(propertyName, value) {\r\n  return {\r\n    type: CHANGE_CURRENT_PAGE_PROPERTY,\r\n    propertyName,\r\n    value,\r\n  };\r\n}\r\n\r\n"],"sourceRoot":""}