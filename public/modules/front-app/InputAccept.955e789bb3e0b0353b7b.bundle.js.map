{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/editor/src/js/components/widgets/InputAcceptWidget.js"],"names":["AltrpModel","data","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","value","getData","set","unset","window","moment","altrpHelpers","globalDefaults","push","AltrpFieldContainer","styled","div","settings","content_label_position_type","InputAcceptWidget","props","timeInput","handleEnter","e","keyCode","preventDefault","inputs","Array","from","document","querySelectorAll","index","indexOf","target","undefined","focus","element","getSettings","create_allowed","create_label","create_url","createItem","debounceDispatch","_","debounce","dispatchFieldValueToStore","onFocus","focus_actions","isEditor","actionsManager","default","callAllWidgetActions","getIdForAction","onBlur","editor","userInput","formId","getFormId","fieldName","getFieldId","replaceContentWithData","isObject","appStore","dispatch","changeFormFieldValue","change_actions","inputValue","create_data","select2_multiple","currentModel","getCurrentModel","parseParamsFromString","url","parseURLTemplate","setState","state","isDisabled","resource","Resource","route","post","res","success","newOption","label","options","unshift","selectStateManager","menuIsOpen","console","error","component","elementDecorator","onChange","bind","getContent","valueMustArray","isArray","parseOptionsFromSettings","paramsForUpdate","altrpSelectRef","React","createRef","prevProps","prevState","getProperty","contentLoaded","currentDataStorage","content_options","model_for_options","isEqual","dynamic","formsStore","updateOptions","updateValue","content_calculation","altrpforms","prevContext","altrpdata","altrpmodel","altrpuser","currentUser","altrppagestate","altrpPageState","altrpresponses","altrpmeta","altrpMeta","context","currentDataStorageLoaded","changedField","altrpstorage","getDataFromLocalStorage","replace","eval","message","getId","path","formData","JSON","stringify","getRoute","getQueried","filters","getAll","valueToDispatch","_value","checked","trueValue","falseValue","valueReplacement","change_change_end","change_change_end_delay","clearTimeout","setTimeout","optionsDynamicSetting","getDynamicSetting","convertData","sortBy","o","toString","label_icon","classLabel","styleLabel","getResponsiveSetting","marginBottom","label_style_spacing","size","unit","marginTop","marginRight","position","zIndex","content_label","className","style","content_required","assetType","renderAssetIcon","content_autocomplete","input","renderAcceptInput","type","id","Component"],"mappings":"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","file":"InputAccept.955e789bb3e0b0353b7b.bundle.js","sourcesContent":["/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","import {\n  convertData,\n  isEditor,\n  parseOptionsFromSettings,\n  parseParamsFromString,\n  parseURLTemplate,\n  replaceContentWithData,\n  renderAssetIcon,\n  valueReplacement,\n  getDataFromLocalStorage\n} from \"../../../../../front-app/src/js/helpers\";\nimport Resource from \"../../classes/Resource\";\nimport { changeFormFieldValue } from \"../../../../../front-app/src/js/store/forms-data-storage/actions\";\nimport AltrpModel from \"../../classes/AltrpModel\";\n\nconst { moment } = window.altrpHelpers;\n(window.globalDefaults = window.globalDefaults || []).push(`\n\n.altrp-field {\n  border-style: solid;\n  width: 100%;\n}\n.altrp-field-file{\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n}\n\n.altrp-label-icon svg,\n.altrp-label-icon img {\n  width: 20px;\n}\n.altrp-label-icon svg{\n  height: 20px;\n}\n.altrp-field-file__field{\n  display: none;\n}\n.altrp-field-file__placeholder{\n  display: none;\n}\n.altrp-field-file_empty .altrp-field-file__placeholder{\n  display: block;\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n  background-color: rgb(52,59,76);\n  color: #fff;\n}\n.input-clear-btn {\n  background: transparent;\n  padding: 0;\n  position: absolute;\n  bottom: calc(50% - 7px);\n  right: 15px;\n  display: none;\n}\n.input-clear-btn:hover {\n  font-weight: bold;\n}\n.altrp-field:hover + .input-clear-btn, .input-clear-btn:hover {\n  display: block;\n}\n.altrp-input-wrapper, .altrp-field-select2 {\n  position: relative;\n  flex-grow: 1;\n}\n.altrp-field-label--required::after {\n  content: \"*\";\n  color: red;\n  font-size: inherit;\n  padding-left: 10px;\n}\n.altrp-field-label {\n  font-size: 16px;\n  font-family: \"Open Sans\";\n  line-height: 1.5;\n  letter-spacing: 0;\n}\n.altrp-field-select2__single-value, .altrp-field {\n  font-size: 16px;\n  font-family: \"Open Sans\";\n  line-height: 1.5;\n  letter-spacing: 0;\n}\n.altrp-field-select2__control, .altrp-field {\n  text-align: left;\n  padding-top: 2px;\n  padding-right: 2px;\n  padding-bottom: 2px;\n  padding-left: 2px;\n  border-width: 1px;\n}\n.altrp-field-select2__control:hover{\n  border-width: 1px;\n}\n.altrp-field-container {\n  margin: 0;\n}\n.altrp-field::placeholder, .altrp-field-select2__placeholder {\n  font-size: 13px;\n  font-family: \"Open Sans\";\n  line-height: 1.5;\n  letter-spacing: 0;\n}\n.altrp-image-select {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n.altrp-image-select img {\n  flex-grow: 1;\n  object-fit: contain;\n}\n.altrp-field {\n  overflow: hidden;\n  cursor: pointer;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n.altrp-field.active {\n  border-color: lightcoral;\n}\n.altrp-field-label {\n  text-align: center;\n  display: block;\n}\n.altrp-pagination__select-size .altrp-field-select2__single-value {\n  font-size: 14px;\n}\n.altrp-pagination__select-size .altrp-field-select2__indicator-separator {\n  display: none;\n}\n.altrp-pagination__select-size .altrp-field-select2__indicator {\n  align-items: center;\n}\n.altrp-pagination__select-size .altrp-field-select2__control {\n  width: 100px;\n  min-height: 32px;\n  padding: 0;\n  border-radius: 0;\n  outline: none;\n  border-color: rgb(142,148,170);\n  -webkit-box-shadow: none;\n  -moz-box-shadow: none;\n  box-shadow: none;\n}\n.altrp-pagination__select-size .altrp-field-select2__control input {\n  border: none;\n}\n.altrp-field-select2 {\n  position: relative;\n  box-sizing: border-box;\n  pointer-events: none;\n}\n.altrp-field-select2__control {\n  webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  background-color: hsl(0,0%,100%);\n  border-color: hsl(0,0%,80%);\n  border-style: solid;\n  border-width: 1px;\n  cursor: default;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-wrap: wrap;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  -webkit-box-pack: justify;\n  -webkit-justify-content: space-between;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n  min-height: 38px;\n  outline: 0 !important;\n  position: relative;\n  -webkit-transition: all 100ms;\n  transition: all 100ms;\n  box-sizing: border-box;\n}\n.altrp-field-select2__value-container {\n  -webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  -webkit-flex-wrap: wrap;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  padding: 2px 8px;\n  -webkit-overflow-scrolling: touch;\n  position: relative;\n  overflow: hidden;\n  box-sizing: border-box;\n}\n.altrp-field-select2__single-value {\n  color: hsl(0,0%,20%);\n  margin-left: 2px;\n  margin-right: 2px;\n  max-width: calc(100% - 8px);\n  overflow: hidden;\n  position: absolute;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  top: 50%;\n  -webkit-transform: translateY(-50%);\n  -ms-transform: translateY(-50%);\n  transform: translateY(-50%);\n  box-sizing: border-box;\n}\n.altrp-field-select2__indicators {\n  -webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-align-self: stretch;\n  -ms-flex-item-align: stretch;\n  align-self: stretch;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-shrink: 0;\n  -ms-flex-negative: 0;\n  flex-shrink: 0;\n  box-sizing: border-box;\n}\n.altrp-field-select2__indicator-separator {\n  -webkit-align-self: stretch;\n  -ms-flex-item-align: stretch;\n  align-self: stretch;\n  background-color: hsl(0,0%,80%);\n  margin-bottom: 8px;\n  margin-top: 8px;\n  width: 1px;\n  box-sizing: border-box;\n}\n.altrp-field-select2__indicator {\n  color: hsl(0,0%,80%);\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  padding: 8px;\n  -webkit-transition: color 150ms;\n  transition: color 150ms;\n  box-sizing: border-box;\n  justify-content: center;\n  align-items: center;\n}\n.tba-placeholder {\n  display: flex;\n  justify-content: center;\n  font-size: 28px;\n  font-weight: bold;\n}\n.altrp-field-subgroup {\n  display: flex;\n  flex-wrap: wrap;\n}\n.altrp-field-option {\n  display: flex;\n  padding: 10px;\n}\n.altrp-field-option__label {\n  cursor: pointer;\n}\ntextarea.altrp-field {\n  display: block;\n}\n.altrp-table__filter-select .altrp-field-select2__placeholder {\n  white-space: nowrap;\n}\n.altrp-table__filter-select .altrp-field-select2__single-value {\n  font-size: 14px;\n}\n.altrp-table__filter-select .altrp-field-select2__indicator-separator {\n  display: none;\n}\n.altrp-table__filter-select .altrp-field-select2__indicator {\n  align-items: center;\n}\n.altrp-table__filter-select .altrp-field-select2__control {\n  width: 100%;\n  min-height: 19px;\n  padding: 0;\n  border-radius: 0;\n  outline: none;\n  border-color: rgb(142, 148, 170);\n  -webkit-box-shadow: none;\n  -moz-box-shadow: none;\n  box-shadow: none;\n}\n.altrp-table__filter-select .altrp-field-select2__control input {\n  border: none;\n}\n.altrp-table__filter-select .altrp-field-select2__value-container {\n  padding-top: 0;\n  padding-bottom: 0;\n  line-height: 13px;\n}\n.altrp-field-required {\n  color: red;\n  font-size: 18px;\n  padding-left: 10px;\n}\n.altrp-field-container-label {\n  display: flex;\n  flex-direction: row;\n}\n\n.altrp-field-label-container-left {\n  display: flex;\n  align-items: center;\n}\n\n.altrp-field-label-container {\n  display: inline-flex;\n  align-items: center;\n}\n.altrp-field-select2__indicator.altrp-field-select2__dropdown-indicator {\n  padding: 0 8px;\n  max-height: 14px;\n  overflow: hidden;\n}\n.altrp-field-select2 .altrp-field-select2__value-container {\n  padding: 0px 8px;\n}\n.altrp-field-select2 .css-b8ldur-Input {\n  padding-bottom: 0px;\n  padding-top: 0px;\n  margin: 0 2px;\n}\n.altrp-field-select2 .altrp-field-select2__control {\n  min-height: 14px;\n}\n`)\nconst AltrpFieldContainer = styled.div`\n  ${({ settings: { content_label_position_type } }) => {\n    switch (content_label_position_type) {\n      case \"left\": {\n        return \"display: flex\";\n      }\n      case \"right\": {\n        return \"display:flex;flex-direction:row-reverse;justify-content:flex-end;\";\n      }\n    }\n    return \"\";\n  }}\n`;\n\nclass InputAcceptWidget extends Component {\n  timeInput = null;\n\n  constructor(props) {\n    super(props);\n    props.element.component = this;\n    if (window.elementDecorator) {\n      window.elementDecorator(this);\n    }\n    this.onChange = this.onChange.bind(this);\n    this.debounceDispatch = this.debounceDispatch.bind(this);\n\n    this.defaultValue =\n      this.getContent(\"content_default_value\") ||\n      (this.valueMustArray() ? [] : \"\");\n    if (this.valueMustArray() && !_.isArray(this.defaultValue)) {\n      this.defaultValue = [];\n    }\n    this.state = {\n      settings: { ...props.element.getSettings() },\n      value: this.defaultValue,\n      options: parseOptionsFromSettings(\n        props.element.getSettings(\"content_options\")\n      ),\n      paramsForUpdate: null\n    };\n    this.altrpSelectRef = React.createRef();\n    if (this.getContent(\"content_default_value\")) {\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\n    }\n  }\n\n  /**\n   * В некоторых случаях значение поля должно быть массивом\n   * @return {boolean}\n   */\n  valueMustArray() {\n    return false;\n  }\n  /**\n   * Чистит значение\n   */\n  clearValue() {\n    let value = \"\";\n    this.onChange(value);\n    this.dispatchFieldValueToStore(value, true);\n  }\n\n  /**\n   * Обработка нажатия клавиши\n   * @param {{}} e\n   */\n  handleEnter = e => {\n    if (e.keyCode === 13) {\n      e.preventDefault();\n      const inputs = Array.from(document.querySelectorAll(\"input,select\"));\n      const index = inputs.indexOf(e.target);\n      if (index === undefined) return;\n      inputs[index + 1] && inputs[index + 1].focus();\n      const {\n        create_allowed,\n        create_label,\n        create_url\n      } = this.props.element.getSettings();\n      if (create_allowed && create_label && create_url) {\n        this.createItem(e);\n      }\n    }\n  };\n\n  /**\n   * Загрузка виджета\n   * @param {{}} prevProps\n   * @param {{}} prevState\n   */\n  async _componentDidMount(prevProps, prevState) {\n    if (this.props.element.getSettings(\"content_options\")) {\n      let options = parseOptionsFromSettings(\n        this.props.element.getSettings(\"content_options\")\n      );\n\n      this.setState(state => ({ ...state, options }));\n    }\n\n    let value = this.state.value;\n    /**\n     * Если динамическое значение загрузилось,\n     * то используем this.getContent для получение этого динамического значения\n     * старые динамические данные\n     * */\n    if (\n      _.get(value, \"dynamic\") &&\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\n    ) {\n      value = this.getContent(\"content_default_value\");\n    }\n\n    /**\n     * Если модель обновилась при смене URL\n     */\n    if (\n      prevProps &&\n      !prevProps.currentModel.getProperty(\"altrpModelUpdated\") &&\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\n    ) {\n      value = this.getContent(\"content_default_value\");\n      this.setState(\n        state => ({ ...state, value, contentLoaded: true }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n      return;\n    }\n    if (\n      this.props.currentModel.getProperty(\"altrpModelUpdated\") &&\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\n      !this.state.contentLoaded\n    ) {\n      value = this.getContent(\"content_default_value\");\n      this.setState(\n        state => ({ ...state, value, contentLoaded: true }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n      return;\n    }\n    if (this.state.value !== value) {\n      this.setState(\n        state => ({ ...state, value }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n    }\n  }\n\n  /**\n   * Получить url для запросов\n   */\n  getRoute() {\n    let url = this.props.element.getSettings(\"model_for_options\");\n\n    if (url.indexOf(\"/\") === -1) {\n      return `/ajax/models/${url}_options`;\n    }\n    if (url.indexOf(\"{{\") !== -1) {\n      url = replaceContentWithData(url);\n    }\n    return url;\n  }\n  /**\n   * Обновление виджета\n   */\n  async _componentDidUpdate(prevProps, prevState) {\n    const { content_options, model_for_options } = this.state.settings;\n    if (\n      prevProps &&\n      !prevProps.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\")\n    ) {\n      let value = this.getContent(\n        \"content_default_value\",\n        this.props.element.getSettings(\"select2_multiple\")\n      );\n      this.setState(\n        state => ({ ...state, value, contentLoaded: true }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n    }\n\n    /**\n     * Если обновилась модель, то пробрасываем в стор новое значение (старый источник диамических данных)\n     */\n    if (\n      !_.isEqual(this.props.currentModel, prevProps.currentModel) &&\n      this.state.value &&\n      this.state.value.dynamic\n    ) {\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\n    }\n\n    /**\n     * Если обновилось хранилище данных формы, currentDataStorage или модель, то получаем новые опции c сервера\n     */\n    if (\n      this.props.formsStore !== prevProps.formsStore ||\n      this.props.currentModel !== prevProps.currentModel ||\n      this.props.currentDataStorage !== prevProps.currentDataStorage\n    ) {\n      this.updateOptions();\n    }\n    if (content_options && !model_for_options) {\n      let options = parseOptionsFromSettings(content_options);\n      if (!_.isEqual(options, this.state.options)) {\n        this.setState(state => ({ ...state, options }));\n      }\n    }\n    this.updateValue(prevProps);\n  }\n\n  /**\n   * Обновить значение если нужно\n   * @param {{}} prevProps\n   */\n  updateValue(prevProps) {\n    if (isEditor()) {\n      return;\n    }\n    let content_calculation = this.props.element.getSettings(\n      \"content_calculation\"\n    );\n    const altrpforms = this.props.formsStore;\n    const fieldName = this.props.element.getFieldId();\n    const formId = this.props.element.getFormId();\n    if (!content_calculation) {\n      /**\n       * Обновить значение, если formsStore изменилось из другого компонента\n       */\n      const path = `${formId}.${fieldName}`;\n      if (\n        this.props.formsStore !== prevProps.formsStore &&\n        _.get(altrpforms, path) !== this.state.value\n      ) {\n        this.setState(state => ({\n          ...state,\n          value: _.get(altrpforms, path)\n        }));\n      }\n      return;\n    }\n\n    const prevContext = {};\n\n    const altrpdata = this.props.currentDataStorage.getData();\n    const altrpmodel = this.props.currentModel.getData();\n    const altrpuser = this.props.currentUser.getData();\n    const altrppagestate = this.props.altrpPageState.getData();\n    const altrpresponses = this.props.altrpresponses.getData();\n    const altrpmeta = this.props.altrpMeta.getData();\n    const context = this.props.element.getCurrentModel().getData();\n    if (content_calculation.indexOf(\"altrpdata\") !== -1) {\n      context.altrpdata = altrpdata;\n      if (!altrpdata.currentDataStorageLoaded) {\n        prevContext.altrpdata = altrpdata;\n      } else {\n        prevContext.altrpdata = prevProps.currentDataStorage.getData();\n      }\n    }\n    if (content_calculation.indexOf(\"altrpforms\") !== -1) {\n      context.altrpforms = altrpforms;\n      /**\n       * Не производим вычисления, если изменилось текущее поле\n       */\n      if (`${formId}.${fieldName}` === altrpforms.changedField) {\n        prevContext.altrpforms = altrpforms;\n      } else {\n        prevContext.altrpforms = prevProps.formsStore;\n      }\n    }\n    if (content_calculation.indexOf(\"altrpmodel\") !== -1) {\n      context.altrpmodel = altrpmodel;\n      prevContext.altrpmodel = prevProps.currentModel.getData();\n    }\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\n      context.altrpuser = altrpuser;\n      prevContext.altrpuser = prevProps.currentUser.getData();\n    }\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\n      context.altrpuser = altrpuser;\n      prevContext.altrpuser = prevProps.currentUser.getData();\n    }\n    if (content_calculation.indexOf(\"altrppagestate\") !== -1) {\n      context.altrppagestate = altrppagestate;\n      prevContext.altrppagestate = prevProps.altrpPageState.getData();\n    }\n    if (content_calculation.indexOf(\"altrpmeta\") !== -1) {\n      context.altrpmeta = altrpmeta;\n      prevContext.altrpmeta = prevProps.altrpMeta.getData();\n    }\n    if (content_calculation.indexOf(\"altrpresponses\") !== -1) {\n      context.altrpresponses = altrpresponses;\n      prevContext.altrpresponses = prevProps.altrpresponses.getData();\n    }\n\n    if (content_calculation.indexOf(\"altrpstorage\") !== -1) {\n      context.altrpstorage = getDataFromLocalStorage(\"altrpstorage\", {});\n    }\n\n    if (\n      _.isEqual(prevProps.currentDataStorage, this.props.currentDataStorage) &&\n      _.isEqual(prevProps.currentUser, this.props.currentUser) &&\n      _.isEqual(prevProps.formsStore, this.props.formsStore) &&\n      _.isEqual(prevProps.altrpPageState, this.props.altrpPageState) &&\n      _.isEqual(prevProps.altrpMeta, this.props.altrpMeta) &&\n      _.isEqual(prevProps.altrpresponses, this.props.altrpresponses) &&\n      _.isEqual(prevProps.currentModel, this.props.currentModel)\n    ) {\n      return;\n    }\n    if (\n      !_.isEqual(prevProps.formsStore, this.props.formsStore) &&\n      `${formId}.${fieldName}` === altrpforms.changedField\n    ) {\n      return;\n    }\n    let value = \"\";\n    try {\n      content_calculation = content_calculation\n        .replace(/}}/g, \"')\")\n        .replace(/{{/g, \"_.get(context, '\");\n      value = eval(content_calculation);\n      if (value === this.state.value) {\n        return;\n      }\n      this.setState(\n        state => ({ ...state, value }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n    } catch (e) {\n      console.error(\n        \"Evaluate error in Input: '\" + e.message + \"'\",\n        this.props.element.getId()\n      );\n    }\n  }\n\n  /**\n   * Обновляет опции для селекта при обновлении данных, полей формы\n   */\n  async updateOptions() {\n    {\n      let formId = this.props.element.getFormId();\n      let paramsForUpdate = this.props.element.getSettings(\"params_for_update\");\n      let formData = _.get(this.props.formsStore, [formId], {});\n      paramsForUpdate = parseParamsFromString(\n        paramsForUpdate,\n        new AltrpModel(formData)\n      );\n      /**\n       * Сохраняем параметры запроса, и если надо обновляем опции\n       */\n      let options = [...this.state.options];\n      if (!_.isEqual(paramsForUpdate, this.state.paramsForUpdate)) {\n        if (!_.isEmpty(paramsForUpdate)) {\n          if (this.props.element.getSettings(\"params_as_filters\", false)) {\n            paramsForUpdate = JSON.stringify(paramsForUpdate);\n            options = await new Resource({\n              route: this.getRoute()\n            }).getQueried({ filters: paramsForUpdate });\n          } else {\n            options = await new Resource({ route: this.getRoute() }).getQueried(\n              paramsForUpdate\n            );\n          }\n          options = !_.isArray(options) ? options.data : options;\n          options = _.isArray(options) ? options : [];\n        } else if (this.state.paramsForUpdate) {\n          options = await new Resource({ route: this.getRoute() }).getAll();\n          options = !_.isArray(options) ? options.data : options;\n          options = _.isArray(options) ? options : [];\n        }\n\n        this.setState(state => ({\n          ...state,\n          paramsForUpdate,\n          options\n        }));\n      }\n    }\n  }\n\n  /**\n   * Изменение значения в виджете\n   * @param e\n   * @param  editor для получения изменений из CKEditor\n   */\n  onChange(e, editor = null) {\n    let value = \"\";\n    let valueToDispatch;\n\n    if (e && e.target) {\n      let _value = e.target.checked;\n      let trueValue =\n        this.props.element.getSettings(\"accept_checked\") || true;\n      let falseValue =\n        this.props.element.getSettings(\"accept_unchecked\") || false;\n      falseValue = valueReplacement(falseValue);\n      trueValue = valueReplacement(trueValue);\n      valueToDispatch = _value ? trueValue : falseValue;\n    }\n\n    if (e && e.value) {\n      value = e.value;\n    }\n    if (_.get(editor, \"getData\")) {\n      value = `<div class=\"ck ck-content\" style=\"width:100%\">${editor.getData()}</div>`;\n    }\n    if (_.isArray(e)) {\n      value = _.cloneDeep(e);\n    }\n\n    if (\n      this.props.element.getSettings(\"content_options_nullable\") &&\n      e &&\n      e.value === \"<null>\"\n    ) {\n      value = null;\n    }\n\n    this.setState(\n      state => ({\n        ...state,\n        value\n      }),\n      () => {\n        /**\n         * Обновляем хранилище только если не текстовое поле\n         */\n\n        const change_actions = this.props.element.getSettings(\"change_actions\");\n        const change_change_end = this.props.element.getSettings(\n          \"change_change_end\"\n        );\n        const change_change_end_delay = this.props.element.getSettings(\n          \"change_change_end_delay\"\n        );\n\n        this.dispatchFieldValueToStore(\n          valueToDispatch !== undefined ? valueToDispatch : value,\n          true\n        );\n\n        if (change_actions && !change_change_end && !isEditor()) {\n          this.debounceDispatch(\n            valueToDispatch !== undefined ? valueToDispatch : value\n          );\n        }\n        if (change_actions && change_change_end && !isEditor()) {\n          this.timeInput && clearTimeout(this.timeInput);\n          this.timeInput = setTimeout(() => {\n            this.debounceDispatch(\n              valueToDispatch !== undefined ? valueToDispatch : value\n            );\n          }, change_change_end_delay);\n        }\n      }\n    );\n  }\n\n  debounceDispatch = _.debounce(\n    value => this.dispatchFieldValueToStore(value, true),\n    150\n  );\n\n  /**\n   * получить опции\n   */\n  getOptions() {\n    let options = [...this.state.options];\n    const optionsDynamicSetting = this.props.element.getDynamicSetting(\n      \"content_options\"\n    );\n    if (optionsDynamicSetting) {\n      options = convertData(optionsDynamicSetting, options);\n    }\n    if (!this.props.element.getSettings(\"sort_default\")) {\n      options = _.sortBy(options, o => o && (o.label ? o.label.toString() : o));\n    }\n    return options;\n  }\n\n  /**\n   * Для действие по фокусу\n   * @param e\n   * @return {Promise<void>}\n   */\n\n  onFocus = async e => {\n    const focus_actions = this.props.element.getSettings(\"focus_actions\");\n\n    if (focus_actions && !isEditor()) {\n      const actionsManager = (\n        await import(\n          /* webpackChunkName: 'ActionsManager' */\n          \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\n        )\n      ).default;\n      await actionsManager.callAllWidgetActions(\n        this.props.element.getIdForAction(),\n        \"focus\",\n        focus_actions,\n        this.props.element\n      );\n    }\n  };\n  /**\n   * Потеря фокуса для оптимизации\n   * @param  e\n   * @param  editor для получения изменений из CKEditor\n   */\n  onBlur = async (e, editor = null) => {\n    if (_.get(editor, \"getData\")) {\n      this.dispatchFieldValueToStore(editor.getData(), true);\n    }\n    if (this.props.element.getSettings(\"actions\", []) && !isEditor()) {\n      const actionsManager = (\n        await import(\n          /* webpackChunkName: 'ActionsManager' */\n          \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\n        )\n      ).default;\n      await actionsManager.callAllWidgetActions(\n        this.props.element.getIdForAction(),\n        \"blur\",\n        this.props.element.getSettings(\"actions\", []),\n        this.props.element\n      );\n    }\n  };\n  /**\n   * Передадим значение в хранилище формы\n   * @param {*} value\n   * @param {boolean} userInput true - имзенилось пользователем\n   */\n  dispatchFieldValueToStore = async (value, userInput = false) => {\n    let formId = this.props.element.getFormId();\n    let fieldName = this.props.element.getFieldId();\n    if (fieldName.indexOf(\"{{\") !== -1) {\n      fieldName = replaceContentWithData(fieldName);\n    }\n    if (_.isObject(this.props.appStore) && fieldName && formId) {\n      this.props.appStore.dispatch(\n        changeFormFieldValue(fieldName, value, formId, userInput)\n      );\n      if (userInput) {\n        const change_actions = this.props.element.getSettings(\"change_actions\");\n\n        if (change_actions && !isEditor()) {\n          const actionsManager = (\n            await import(\n              /* webpackChunkName: 'ActionsManager' */\n              \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\n            )\n          ).default;\n          await actionsManager.callAllWidgetActions(\n            this.props.element.getIdForAction(),\n            \"change\",\n            change_actions,\n            this.props.element\n          );\n        }\n      }\n    }\n  };\n\n  /**\n   * Обработка добавления опции по ajax\n   * @param {SyntheticKeyboardEvent} e\n   */\n  createItem = async e => {\n    const keyCode = e.keyCode;\n    const { value: inputValue } = e.target;\n    if (keyCode !== 13 || !inputValue) {\n      return;\n    }\n    const {\n      create_url,\n      create_label,\n      create_data,\n      select2_multiple\n    } = this.props.element.getSettings();\n    if (!create_label && !create_url) {\n      return;\n    }\n    const currentModel = this.props.element.getCurrentModel();\n    let data = parseParamsFromString(create_data, currentModel, true);\n    data[create_label] = inputValue;\n    let url = parseURLTemplate(create_url, currentModel.getData());\n    this.setState(state => ({ ...state, isDisabled: true }));\n    try {\n      const resource = new Resource({\n        route: url\n      });\n      let res = await resource.post(data);\n      if (res.success && _.get(res, \"data.id\")) {\n        let newOption = {\n          label: inputValue,\n          value: _.get(res, \"data.id\")\n        };\n        this.setState(\n          state => ({ ...state, isDisabled: false }),\n          () => {\n            let options = [...this.state.options];\n            options.unshift(newOption);\n            let value = this.state.value;\n            if (select2_multiple) {\n              value = value ? [...value] : [];\n              value.push(_.get(res, \"data.id\"));\n            } else {\n              value = _.get(res, \"data.id\");\n            }\n            this.setState(\n              state => ({ ...state, options, value }),\n              () => {\n                const selectStateManager = _.get(\n                  this,\n                  \"altrpSelectRef.current.selectRef.current\"\n                );\n                if (selectStateManager) {\n                  selectStateManager.setState({\n                    menuIsOpen: false,\n                    inputValue: \"\"\n                  });\n                }\n              }\n            );\n          }\n        );\n      }\n      this.setState(state => ({ ...state, isDisabled: false }));\n    } catch (error) {\n      console.error(error);\n      this.setState(state => ({ ...state, isDisabled: false }));\n    }\n  };\n\n  /**\n   * Взовращает имя для атрибута name\n   * @return {string}\n   */\n  getName() {\n    return `${this.props.element.getFormId()}[${this.props.element.getFieldId()}]`;\n  }\n\n  render() {\n    let label = null;\n    const settings = this.props.element.getSettings();\n    const {\n      select2_multiple: isMultiple,\n      label_icon\n    } = settings;\n\n    let value = this.state.value;\n\n    if (\n      _.get(value, \"dynamic\") &&\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\n    ) {\n      value = this.getContent(\"content_default_value\");\n    }\n    /**\n     * Пока динамический контент загружается (Еесли это динамический контент),\n     * нужно вывести пустую строку\n     */\n    if (value && value.dynamic) {\n      value = \"\";\n    }\n    let classLabel = \"\";\n    let styleLabel = {};\n    const content_label_position_type = this.props.element.getResponsiveSetting(\n      \"content_label_position_type\"\n    );\n    switch (content_label_position_type) {\n      case \"top\":\n        styleLabel = {\n          marginBottom: this.state.settings.label_style_spacing\n            ? this.state.settings.label_style_spacing.size +\n            this.state.settings.label_style_spacing.unit\n            : 2 + \"px\"\n        };\n        classLabel = \"\";\n        break;\n      case \"bottom\":\n        styleLabel = {\n          marginTop: this.state.settings.label_style_spacing\n            ? this.state.settings.label_style_spacing.size +\n            this.state.settings.label_style_spacing.unit\n            : 2 + \"px\"\n        };\n        classLabel = \"\";\n        break;\n      case \"left\":\n        styleLabel = {\n          marginRight: this.state.settings.label_style_spacing\n            ? this.state.settings.label_style_spacing.size +\n            this.state.settings.label_style_spacing.unit\n            : 2 + \"px\"\n        };\n        classLabel = \"altrp-field-label-container-left\";\n        break;\n      case \"absolute\":\n        styleLabel = {\n          position: \"absolute\",\n          zIndex: 2\n        };\n        classLabel = \"\";\n        break;\n    }\n\n    if (this.state.settings.content_label) {\n      label = (\n        <div\n          className={\"altrp-field-label-container \" + classLabel}\n          style={styleLabel}\n        >\n          <label\n            className={`altrp-field-label ${this.state.settings.content_required\n              ? \"altrp-field-label--required\"\n              : \"\"\n              }`}\n          >\n            {this.state.settings.content_label}\n          </label>\n          {label_icon && label_icon.assetType && (\n            <span className=\"altrp-label-icon\">\n              {renderAssetIcon(label_icon)}\n            </span>\n          )}\n        </div>\n      );\n    } else {\n      label = null;\n    }\n\n    let autocomplete = \"off\";\n    if (this.state.settings.content_autocomplete) {\n      autocomplete = \"on\";\n    } else {\n      autocomplete = \"off\";\n    }\n\n    const input = this.renderAcceptInput();\n\n    return (\n      <AltrpFieldContainer\n        settings={settings}\n        className={\"altrp-field-container \"}\n      >\n        {content_label_position_type === \"top\" ? label : \"\"}\n        {content_label_position_type === \"left\" ? label : \"\"}\n        {content_label_position_type === \"right\" ? label : \"\"}\n        {content_label_position_type === \"absolute\" ? label : \"\"}\n        {/* .altrp-field-label-container */}\n        {input}\n        {content_label_position_type === \"bottom\" ? label : \"\"}\n      </AltrpFieldContainer>\n    );\n  }\n  /**\n   * Выводит input type=accept\n   */\n  renderAcceptInput() {\n    let value = this.state.value;\n    let trueValue = this.props.element.getSettings(\"accept_checked\") || true;\n    let falseValue =\n      this.props.element.getSettings(\"accept_unchecked\") || false;\n    if (value === trueValue) {\n      value = true;\n    } else if (value === falseValue) {\n      value = false;\n    }\n    return (\n      <div className={`altrp-field-option ${value ? \"active\" : \"\"}`}>\n        <span className=\"altrp-field-option-span\">\n          <input\n            type=\"checkbox\"\n            name={`${this.props.element.getFormId()}[${this.props.element.getFieldId()}]`}\n            className={`altrp-field-option__input ${value ? \"active\" : \"\"}`}\n            onChange={this.onChange}\n            checked={!!value}\n            id={`${this.props.element.getFormId()}[${this.props.element.getFieldId()}]`}\n          />\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default InputAcceptWidget;\n"],"sourceRoot":""}