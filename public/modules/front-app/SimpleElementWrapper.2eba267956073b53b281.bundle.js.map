{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/components/widgets/styled-components/DiagramComponent.js","webpack:///./resources/modules/front-app/src/js/components/SimpleElementWrapper.js","webpack:///./resources/modules/front-app/src/js/store/elements-storage/actions.js"],"names":["DiagramComponent","settings","styledString","SimpleElementWrapper","props","updateStore","state","currentModel","appStore","getState","setState","currentUser","currentDataStorage","elementDisplay","element","getSettings","wrapper","elementWrapperRef","elementRef","React","createRef","dispatch","addElement","error","errorInfo","this","window","altrpHelpers","isEditor","frontApp","onWidgetMount","_","isFunction","update","updateFonts","checkElementDisplay","mountElementEvent","Event","getId","mountElementTypeEvent","getName","document","dispatchEvent","unmountElementEvent","unmountElementTypeEvent","get","stylesModule","stylesContainer","current","getElementsByClassName","prevProps","prevState","getProperty","title","currentTitle","replaceContentWithData","altrpPage","changeCurrentPageProperty","setTitle","updateToken","altrpRandomId","conditions","map","c","modelField","conditional_model_field","operator","conditional_other_operator","value","conditional_other_condition_value","conditionsChecker","getCurrentModel","formsStore","formId","logic","formConditions","display","forEach","altrpCompare","field_id","tooltip_position","getResponsiveSetting","tooltip_text","tooltip_minimal","tooltip_show_type","tooltip_horizontal_offset","tooltip_vertical_offset","className","getType","style","whiteSpace","toString","componentStack","styles","Number","width","CSSId","getData","ContentComponent","frontElementsManager","getComponentClass","content","createElement","ref","rootElement","ElementWrapper","children","getChildren","match","altrpresponses","altrpPageState","altrpMeta","currentScreen","baseRender","history","backend","HTML5Backend","WrapperComponent","Fragment","NavComponent","wrapperProps","elementId","indexOf","text","id","position","minimal","horizontal","vertical","Component","reactRedux","connect","hideTriggers","ADD_ELEMENT","CLEAR_ELEMENTS","elementComponent","type"],"mappings":"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","file":"SimpleElementWrapper.2eba267956073b53b281.bundle.js","sourcesContent":["import {getResponsiveSetting} from \"../../../../../../front-app/src/js/helpers\";\r\nimport {defaultStyled, sliderStyled, styledString} from \"../../../../../../front-app/src/js/helpers/styles\";\r\n\r\nexport default function DiagramComponent(settings) {\r\n  const styles = [\r\n    \"altrp-dashboard__tooltip--margin\",\r\n      [\"margin\", \"style_margin_tooltip\", \"dimensions\"],\r\n      [\"padding\", \"style_padding_tooltip\", \"dimensions\"],\r\n    \"}\",\r\n\r\n    \"altrp-dashboard__tooltip--width\",\r\n      [\"padding-top\", \"style_width_tooltip\"],\r\n    \"}\",\r\n\r\n    \"altrp-dashboard__tooltip--font\",\r\n      [\"\", \"style_font_tooltip\", \"typographic\"],\r\n    \"}\",\r\n\r\n    \"altrp-dashboard__tooltip--font-color\",\r\n      [\"color\", \"style_font_color_tooltip\", \"color\"],\r\n    \"}\",\r\n\r\n    \"altrp-dashboard__tooltip--label-background\",\r\n      [\"background-color\", \"style_background_color_tooltip\", \"color\"],\r\n    \"}\",\r\n\r\n    \"altrp-dashboard__tooltip--label-background-shadow\",\r\n      [\"background-color\", \"style_background_tooltip_shadow\", \"shadow\"],\r\n    \"}\",\r\n\r\n    \"altrp-dashboard__tooltip--border-type\",\r\n      [\"border-style\", \"border_type_tooltip\"],\r\n    \"}\",\r\n\r\n    \"altrp-dashboard__tooltip--border-width\",\r\n      [\"border-width\", \"border_width_tooltip\", \"dimensions\"],\r\n    \"}\",\r\n\r\n    \"altrp-dashboard__tooltip--border-color\",\r\n      [\"border-color\", \"border_color_tooltip\", \"color\"],\r\n    \"}\",\r\n\r\n    \"altrp-diagram\",\r\n      [\"width\", \"width\", \"slider\"],\r\n      [\"height\", \"height\", \"slider\"],\r\n    \"}\",\r\n\r\n    \"altrp-btn\",\r\n      [\"margin\", \"margin\", \"dimensions\"],\r\n    \"}\",\r\n  ];\r\n  return styledString(styles, settings)\r\n}\r\n","import { addElement } from \"../store/elements-storage/actions\";\nimport { changeCurrentPageProperty } from \"../store/current-page/actions\";\nimport AltrpTooltip from \"../../../../editor/src/js/components/altrp-tooltip/AltrpTooltip\";\nimport NavComponent from \"../../../../editor/src/js/components/widgets/styled-components/NavComponent\";\nimport DiagramComponent from \"../../../../editor/src/js/components/widgets/styled-components/DiagramComponent\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { DndProvider } from \"react-dnd\";\n\nclass SimpleElementWrapper extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      elementDisplay: !this.props.element.getSettings(\"default_hidden\")\n    };\n    props.element.wrapper = this;\n    this.elementWrapperRef = this.props.elementWrapperRef;\n    this.elementRef = React.createRef();\n    this.settings = props.element.getSettings();\n    appStore.dispatch(addElement(this));\n  }\n\n  /**\n   * Отлавливаем ошибки\n   * @param error\n   * @param errorInfo\n   */\n  componentDidCatch(error, errorInfo) {\n    this.setState(state => ({\n      ...state,\n      error: error,\n      errorInfo: errorInfo\n    }));\n  }\n\n  /**\n   * Иногда надо обновить элемент (FrontElement)\n   */\n  componentDidMount() {\n    !window.altrpHelpers.isEditor() && window?.frontApp?.onWidgetMount();\n    if (_.isFunction(this.props.element.update)) {\n      this.props.element.update();\n      this.props.element.updateFonts();\n    }\n    this.checkElementDisplay();\n    const {element} = this.props\n    const mountElementEvent = new Event(`altrp-mount-element:${element.getId()}` );\n    const mountElementTypeEvent = new Event(`altrp-mount-element:${element.getName()}` );\n    document.dispatchEvent(mountElementEvent)\n    document.dispatchEvent(mountElementTypeEvent)\n  }\n\n  componentWillUnmount() {\n\n    const {element} = this.props\n    const unmountElementEvent = new Event(`altrp-unmount-element:${element.getId()}` );\n    const unmountElementTypeEvent = new Event(`altrp-unmount-element:${element.getName()}` );\n    document.dispatchEvent(unmountElementEvent)\n    document.dispatchEvent(unmountElementTypeEvent)\n  }\n  /**\n   * Подписываемся на обновление store редакса\n   */\n  updateStore = () => {\n    if (this.state.currentModel !== appStore.getState().currentModel) {\n      this.setState(state => ({\n        ...state,\n        currentModel: appStore.getState().currentModel\n      }));\n    }\n    /**\n     * Обновляем пользователя\n     */\n    if (this.state.currentUser !== appStore.getState().currentUser) {\n      this.setState(state => ({\n        ...state,\n        currentModel: appStore.getState().currentUser\n      }));\n    }\n\n    /**\n     * Обновляем currentDataStorage\n     */\n    if (\n      this.state.currentDataStorage !== appStore.getState().currentDataStorage\n    ) {\n      this.setState(state => ({\n        ...state,\n        currentDataStorage: appStore.getState().currentDataStorage\n      }));\n    }\n  };\n\n  /**\n   * Вернет HTMLElement, в котором записаны css стили текущего компонента\n   * @return {null | HTMLElement}\n   */\n  getStylesHTMLElement() {\n    if (!_.get(window, \"stylesModule.stylesContainer.current\")) {\n      return null;\n    }\n\n    return (\n      window.stylesModule.stylesContainer.current.getElementsByClassName(\n        `altrp-styles${this.props.element.getId()}`\n      )[0] || null\n    );\n  }\n\n  /**\n   * Нужно ли обновить отображение обертки элементов\n   * @param {{}} prevProps\n   * @param {{}} prevState\n   */\n  componentDidUpdate(prevProps, prevState) {\n    this.checkElementDisplay();\n    if (\n      appStore.getState().currentModel.getProperty(\"altrpModelUpdated\") &&\n      appStore\n        .getState()\n        .currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\n      !window.altrpHelpers.isEditor() &&\n      this.props.element.getName() === \"section\"\n    ) {\n      let title = appStore.getState().currentTitle;\n      title = window.altrpHelpers.replaceContentWithData(title);\n      if (appStore.getState().altrpPage.getProperty(\"title\") !== title) {\n        appStore.dispatch(changeCurrentPageProperty(\"title\", title));\n      }\n      window.altrpHelpers.setTitle(title);\n    }\n  }\n  /**\n   * Обновить элемент изменив this.state.updateToken\n   */\n  updateElement() {\n    this.setState(state => ({\n      ...state,\n      updateToken: window.altrpHelpers.altrpRandomId()\n    }));\n  }\n\n  /**\n   * Проверка видимости элемента\n   * @param {{}} prevProps\n   * @param {{}} prevState\n   */\n  checkElementDisplay(prevProps, prevState) {\n    /**\n     * @member {FrontElement} element\n     */\n    const { element } = this.props;\n    if (!element.getSettings(\"conditional_other\")) {\n      return;\n    }\n    let conditions = element.getSettings(\"conditions\", []);\n    conditions = conditions.map(c => {\n      const {\n        conditional_model_field: modelField,\n        conditional_other_operator: operator,\n        conditional_other_condition_value: value\n      } = c;\n      return {\n        modelField,\n        operator,\n        value\n      };\n    });\n    let elementDisplay = window.altrpHelpers.conditionsChecker(\n      conditions,\n      element.getSettings(\"conditional_other_display\") === \"AND\",\n      this.props.element.getCurrentModel(),\n      true\n    );\n\n    if (this.state.elementDisplay === elementDisplay) {\n      return;\n    }\n\n    this.setState(state => ({\n      ...state,\n      elementDisplay\n    }));\n  }\n\n  /**\n   * Переключает видимость элемента\n   */\n  toggleElementDisplay() {\n    this.setState(state => ({\n      ...state,\n      elementDisplay: !state.elementDisplay\n    }));\n  }\n  /**\n   * Метод для проверки видимости поля формы\n   * @return {boolean}\n   */\n  inputIsDisplay() {\n    const { formsStore } = this.state;\n    const formId = this.props.element.getSettings(\"form_id\", \"\");\n    const logic = this.props.element.getSettings(\n      \"form_condition_display_on\",\n      \"AND\"\n    );\n    const formConditions = this.props.element.getSettings(\n      \"form_conditions\",\n      []\n    );\n    let display = true;\n    formConditions.forEach(c => {\n      if (logic === \"AND\") {\n        display *= window.altrpHelpers.altrpCompare(\n          _.get(formsStore, `${formId}.${c.field_id}`),\n          c.value,\n          c.operator\n        );\n      } else {\n        display += window.altrpHelpers.altrpCompare(\n          _.get(formsStore, `${formId}.${c.field_id}`),\n          c.value,\n          c.operator\n        );\n      }\n    });\n    return display;\n  }\n\n  render() {\n    const {\n    } = this.props.element.settings;\n\n    const tooltip_position = this.props.element.getResponsiveSetting('tooltip_position', 'bottom')\n    let tooltip_text = this.props.element.getResponsiveSetting('tooltip_text')\n    const tooltip_minimal = this.props.element.getResponsiveSetting('tooltip_minimal')\n    let tooltip_show_type = this.props.element.getResponsiveSetting('tooltip_show_type')\n    const tooltip_horizontal_offset = this.props.element.getResponsiveSetting('tooltip_horizontal_offset')\n    const tooltip_vertical_offset = this.props.element.getResponsiveSetting('tooltip_vertical_offset')\n\n\n    if (this.state.errorInfo) {\n      return (\n        <div className=\"altrp-error\" data-eltype={this.props.element.getType()}>\n          <h2>Something went wrong.</h2>\n          <details style={{ whiteSpace: \"pre-wrap\" }}>\n            {this.state.error && this.state.error.toString()}\n            <br />\n            {this.state.errorInfo.componentStack}\n          </details>\n        </div>\n      );\n    }\n    const styles = {};\n\n    if (this.props.element.getResponsiveSetting(\"layout_column_width\")) {\n      if (\n        Number(this.props.element.getResponsiveSetting(\"layout_column_width\"))\n      ) {\n        styles.width =\n          this.props.element.getResponsiveSetting(\"layout_column_width\") + \"%\";\n      } else {\n        styles.width = this.props.element.getResponsiveSetting(\n          \"layout_column_width\"\n        );\n      }\n    }\n    if (!this.state.elementDisplay) {\n      styles.display = \"none\";\n    }\n    let CSSId = this.props.element.getSettings(\"advanced_element_id\", \"\");\n    CSSId = window.altrpHelpers.replaceContentWithData(\n      CSSId,\n      this.props.element.getCurrentModel().getData()\n    );\n    if (this.CSSId !== CSSId) {\n      this.CSSId = CSSId;\n    }\n    let ContentComponent = frontElementsManager.getComponentClass(\n      this.props.element.getName()\n    );\n    let content = React.createElement(ContentComponent, {\n      ref: this.elementRef,\n      rootElement: this.props.rootElement,\n      ElementWrapper: this.props.ElementWrapper,\n      element: this.props.element,\n      children: this.props.element.getChildren(),\n      match: this.props.match,\n      currentModel: this.props.currentModel,\n      currentUser: this.props.currentUser,\n      currentDataStorage: this.props.currentDataStorage,\n      altrpresponses: this.props.altrpresponses,\n      formsStore: this.props.formsStore,\n      elementDisplay: this.state.elementDisplay,\n      altrpPageState: this.props.altrpPageState,\n      altrpMeta: this.props.altrpMeta,\n      updateToken: this.state.updateToken,\n      currentScreen: this.props.currentScreen,\n      baseRender: this.props.baseRender,\n      history: this.props.history,\n      appStore\n    });\n    if (this.props.element.getName() === \"table\") {\n      content = <DndProvider backend={HTML5Backend}>{content}</DndProvider>;\n    }\n    let WrapperComponent = React.Fragment;\n\n    switch (this.props.element.getName()) {\n      // case \"diagram\":\n      //   WrapperComponent = DiagramComponent;\n      //   break;\n      // case \"dashboards\":\n      // WrapperComponent = DashboardComponent;\n      // break;\n      case \"nav\":\n        WrapperComponent = NavComponent;\n        break;\n    }\n    tooltip_text = window.altrpHelpers.replaceContentWithData(\n      tooltip_text,\n      this.props.element.getCurrentModel().getData()\n    );\n    const wrapperProps = {\n      elementId: this.elementId,\n      settings: this.settings,\n      styles\n    };\n    if (WrapperComponent === React.Fragment) {\n      delete wrapperProps.elementId;\n      delete wrapperProps.settings;\n      delete wrapperProps.styles;\n      if (this.state.elementDisplay) {\n        this.elementWrapperRef.current.style.display = null;\n      } else {\n        this.elementWrapperRef.current.style.display = \"none\";\n      }\n    }\n    if(['column', 'section'].indexOf(this.props.element.getType()) !== -1){\n      tooltip_show_type = 'never'\n    }\n\n    return (\n      <WrapperComponent {...wrapperProps} >\n        {\n          tooltip_show_type && tooltip_show_type !== \"never\" ?\n            <AltrpTooltip\n              text={tooltip_text}\n              id={this.props.element.getId()}\n              state={tooltip_show_type}\n              position={tooltip_position}\n              minimal={tooltip_minimal}\n              horizontal={tooltip_horizontal_offset}\n              vertical={tooltip_vertical_offset}\n            >\n              {\n                content\n              }\n            </AltrpTooltip>\n            : content\n        }\n      </WrapperComponent>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    hideTriggers: state.hideTriggers,\n    altrpresponses: state.altrpresponses,\n    formsStore: state.formsStore,\n    currentDataStorage: state.currentDataStorage,\n    currentModel: state.currentModel,\n    currentUser: state.currentUser,\n    altrpMeta: state.altrpMeta,\n    altrpPageState: state.altrpPageState,\n    currentScreen: state.currentScreen\n  };\n}\n\nexport default window.reactRedux.connect(mapStateToProps)(SimpleElementWrapper);\n","export const ADD_ELEMENT = 'ADD_ELEMENT';\r\nexport const CLEAR_ELEMENTS = 'CLEAR_ELEMENTS';\r\n\r\n/**\r\n *\r\n * @param {React.Component}elementComponent\r\n * @return {{}} - {\r\n *     type: {string},\r\n *     sectionComponent: {React.Component},\r\n *   }\r\n */\r\nexport function addElement(elementComponent) {\r\n  return {\r\n    type: ADD_ELEMENT,\r\n    elementComponent\r\n  };\r\n}\r\n\r\n/**\r\n * Перед загрузкой новых данных, старые удаляем\r\n * @return {{type: string}}\r\n */\r\nexport function clearElements() {\r\n  return {\r\n    type: CLEAR_ELEMENTS,\r\n  };\r\n}\r\n\r\n"],"sourceRoot":""}