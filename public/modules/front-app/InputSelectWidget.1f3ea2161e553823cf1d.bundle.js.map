{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack:///./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack:///./node_modules/@babel/runtime/helpers/esm/inherits.js","webpack:///./node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","webpack:///./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack:///./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","webpack:///./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack:///./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack:///./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/editor/src/js/components/widgets/InputMultiSelectWidget.js","webpack:///./resources/modules/editor/src/js/components/widgets/InputSelectWidget.js","webpack:///./resources/modules/front-app/src/js/store/forms-data-storage/actions.js"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_assertThisInitialized","self","ReferenceError","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","TypeError","prototype","create","constructor","_iterableToArray","iter","Symbol","iterator","from","_possibleConstructorReturn","call","_setPrototypeOf","p","_taggedTemplateLiteral","strings","raw","slice","freeze","defineProperties","_toConsumableArray","isArray","arrayLikeToArray","iterableToArray","unsupportedIterableToArray","_typeof","_unsupportedIterableToArray","minLen","n","toString","name","test","AltrpModel","data","this","cloneDeep","clone","isEmpty","defaultValue","get","has","getData","set","unset","window","altrpHelpers","convertData","isEditor","parseOptionsFromSettings","parseParamsFromString","replaceContentWithData","renderAssetIcon","renderAsset","Resource","getDataFromLocalStorage","Button","altrpLibs","Blueprint","MenuItem","MultiSelect","BlueprintSelect","globalDefaults","push","AltrpFieldContainer","styled","div","settings","content_label_position_type","InputMultiSelectWidget","props","timeInput","onChange","e","element","getSettings","target","_","setState","state","indexOf","content_type","dispatchFieldValueToStore","handleTagRemove","item","idx","getValue","splice","map","v","userInput","formId","getFormId","fieldName","getFieldId","isObject","appStore","dispatch","changeFormFieldValue","change_actions","actionsManager","default","callAllWidgetActions","getIdForAction","getState","options","find","label","onClick","createNewItemFromQuery","title","createNewItemRenderer","query","active","handleClick","getResponsiveSetting","option","text","replace","getCurrentModel","icon","shouldDismissPopover","handleClear","onItemSelect","bind","component","elementDecorator","getContent","valueMustArray","paramsForUpdate","popoverProps","usePortal","position","minimal","portalClassName","getId","widgetDisabled","portalContainer","EditorFrame","contentWindow","document","body","altrpSelectRef","React","createRef","prevProps","prevState","model_for_options","route","getRoute","getAll","currentModel","getProperty","contentLoaded","currentDataStorage","url","content_options","isEqual","dynamic","formsStore","updateOptions","updateValue","content_calculation","altrpforms","prevContext","altrpdata","altrpmodel","altrpuser","currentUser","altrppagestate","altrpPageState","altrpresponses","altrpmeta","altrpMeta","context","currentDataStorageLoaded","changedField","altrpstorage","eval","console","error","message","path","formData","JSON","stringify","getQueried","filters","currentValue","create_url","params","resource","post","res","unshift","concat","optionsDynamicSetting","getDynamicSetting","sortBy","reverse","filter","getOptions","item1","item2","label_icon","classLabel","styleLabel","marginBottom","label_style_spacing","size","unit","marginTop","marginRight","zIndex","content_label","className","style","content_required","assetType","input","placeholder","content_readonly","no_results_text","itemsOptions","position_css_classes","position_css_id","selectedItems","clearButton","undefined","inputProps","itemsEqual","disabled","itemRenderer","modifiers","matchesPredicate","itemPredicate","toLowerCase","items","noResults","getName","tagInputProps","onRemove","rightElement","id","tagRenderer","tagRender","Component","Select","InputSelectWidget","renderRightIcon","right_icon","renderLeftIcon","left_icon","getCurrentLabel","rightIcon","CHANGE_FORM_FIELD_VALUE","CLEAR_FORM_FIELD_VALUE","type"],"mappings":"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","file":"InputSelectWidget.1f3ea2161e553823cf1d.bundle.js","sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","import _typeof from \"@babel/runtime/helpers/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","const {\n  convertData,\n  isEditor,\n  parseOptionsFromSettings,\n  parseParamsFromString,\n  replaceContentWithData,\n  renderAssetIcon,\n  renderAsset,\n  Resource,\n  getDataFromLocalStorage\n} = window.altrpHelpers;\nimport {changeFormFieldValue} from \"../../../../../front-app/src/js/store/forms-data-storage/actions\";\nimport AltrpModel from \"../../classes/AltrpModel\";\n\nconst Button = window.altrpLibs.Blueprint.Button;\nconst MenuItem = window.altrpLibs.Blueprint.MenuItem;\nconst MultiSelect = window.altrpLibs.BlueprintSelect.MultiSelect;\n\n(window.globalDefaults = window.globalDefaults || []).push(`\n\n.altrp-field {\n  border-style: solid;\n  width: 100%;\n}\n.altrp-field-file{\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n}\n.altrp-portal_input-select .bp3-menu{\n  max-height: 300px;\n  overflow: auto;\n}\n.altrp-widget_input-multi-select .bp3-icon_right{\n    margin:  0 0 0 7px;\n}\n.bp3-icon_text-widget img{\n  width: 16px;\n  height: 16px;\n  object-fit: contain;\n  pointer-events: none;\n}\n.bp3-icon_text-widget svg{\n  width: 16px;\n  height: 16px;\n  pointer-events: none;\n}\n.altrp-widget_input-multi-select.altrp-widget_input-multi-select .bp3-icon:first-child:last-child{\n   margin: 0;\n}\n.altrp-widget_input-multi-select .bp3-popover-wrapper{\n  display: flex;\n}\n.altrp-widget_input-multi-select .bp3-popover-target > div{\n  width: 100%;\n}\n.altrp-widget_input-multi-select .bp3-popover-target{\n  display: flex;\n  flex-grow: 1;\n}\n.altrp-widget_input-multi-select .bp3-popover-target .bp3-button{\n  justify-content: flex-end;\n}\n.altrp-widget_input-multi-select .bp3-popover-target .bp3-button .bp3-button-text{\n  flex-grow: 1;\n}\n.altrp-label-icon svg,\n.altrp-label-icon img {\n  width: 20px;\n}\n.altrp-label-icon svg{\n  height: 20px;\n}\n.altrp-field-file__field{\n  display: none;\n}\n.altrp-field-file__placeholder{\n  display: none;\n}\n.altrp-field-file_empty .altrp-field-file__placeholder{\n  display: block;\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n  background-color: rgb(52,59,76);\n  color: #fff;\n}\n.input-clear-btn {\n  background: transparent;\n  padding: 0;\n  position: absolute;\n  bottom: calc(50% - 7px);\n  right: 15px;\n  display: none;\n}\n.input-clear-btn:hover {\n  font-weight: bold;\n}\n.altrp-field:hover + .input-clear-btn, .input-clear-btn:hover {\n  display: block;\n}\n.altrp-input-wrapper, .altrp-field-select2 {\n  position: relative;\n  flex-grow: 1;\n}\n.altrp-field-label--required::after {\n  content: \"*\";\n  color: red;\n  font-size: inherit;\n  padding-left: 10px;\n}\n.altrp-field-label {\n  font-size: 16px;\n  font-family: \"Open Sans\";\n  line-height: 1.5;\n  letter-spacing: 0;\n}\n.altrp-field-select2__single-value, .altrp-field {\n  font-size: 16px;\n  font-family: \"Open Sans\";\n  line-height: 1.5;\n  letter-spacing: 0;\n}\n.altrp-field-select2__control, .altrp-field {\n  text-align: left;\n  padding-top: 2px;\n  padding-right: 2px;\n  padding-bottom: 2px;\n  padding-left: 2px;\n  border-width: 1px;\n}\n.altrp-field-select2__control:hover{\n  border-width: 1px;\n}\n.altrp-field-container {\n  margin: 0;\n}\n.altrp-field::placeholder, .altrp-field-select2__placeholder {\n  font-size: 13px;\n  font-family: \"Open Sans\";\n  line-height: 1.5;\n  letter-spacing: 0;\n}\n.altrp-image-select {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n.altrp-image-select img {\n  flex-grow: 1;\n  object-fit: contain;\n}\n.altrp-field {\n  overflow: hidden;\n  cursor: pointer;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n.altrp-field.active {\n  border-color: lightcoral;\n}\n.altrp-field-label {\n  text-align: center;\n  display: block;\n}\n.altrp-pagination__select-size .altrp-field-select2__single-value {\n  font-size: 14px;\n}\n.altrp-pagination__select-size .altrp-field-select2__indicator-separator {\n  display: none;\n}\n.altrp-pagination__select-size .altrp-field-select2__indicator {\n  align-items: center;\n}\n.altrp-pagination__select-size .altrp-field-select2__control {\n  width: 100px;\n  min-height: 32px;\n  padding: 0;\n  border-radius: 0;\n  outline: none;\n  border-color: rgb(142,148,170);\n  -webkit-box-shadow: none;\n  -moz-box-shadow: none;\n  box-shadow: none;\n}\n.altrp-pagination__select-size .altrp-field-select2__control input {\n  border: none;\n}\n.altrp-field-select2 {\n  position: relative;\n  box-sizing: border-box;\n  pointer-events: none;\n}\n.altrp-field-select2__control {\n  webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  background-color: hsl(0,0%,100%);\n  border-color: hsl(0,0%,80%);\n  border-style: solid;\n  border-width: 1px;\n  cursor: default;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-wrap: wrap;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  -webkit-box-pack: justify;\n  -webkit-justify-content: space-between;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n  min-height: 38px;\n  outline: 0 !important;\n  position: relative;\n  -webkit-transition: all 100ms;\n  transition: all 100ms;\n  box-sizing: border-box;\n}\n.altrp-field-select2__value-container {\n  -webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  -webkit-flex-wrap: wrap;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  padding: 2px 8px;\n  -webkit-overflow-scrolling: touch;\n  position: relative;\n  overflow: hidden;\n  box-sizing: border-box;\n}\n.altrp-field-select2__single-value {\n  color: hsl(0,0%,20%);\n  margin-left: 2px;\n  margin-right: 2px;\n  max-width: calc(100% - 8px);\n  overflow: hidden;\n  position: absolute;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  top: 50%;\n  -webkit-transform: translateY(-50%);\n  -ms-transform: translateY(-50%);\n  transform: translateY(-50%);\n  box-sizing: border-box;\n}\n.altrp-field-select2__indicators {\n  -webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-align-self: stretch;\n  -ms-flex-item-align: stretch;\n  align-self: stretch;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-shrink: 0;\n  -ms-flex-negative: 0;\n  flex-shrink: 0;\n  box-sizing: border-box;\n}\n.altrp-field-select2__indicator-separator {\n  -webkit-align-self: stretch;\n  -ms-flex-item-align: stretch;\n  align-self: stretch;\n  background-color: hsl(0,0%,80%);\n  margin-bottom: 8px;\n  margin-top: 8px;\n  width: 1px;\n  box-sizing: border-box;\n}\n.altrp-field-select2__indicator {\n  color: hsl(0,0%,80%);\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  padding: 8px;\n  -webkit-transition: color 150ms;\n  transition: color 150ms;\n  box-sizing: border-box;\n  justify-content: center;\n  align-items: center;\n}\n.tba-placeholder {\n  display: flex;\n  justify-content: center;\n  font-size: 28px;\n  font-weight: bold;\n}\n.altrp-field-subgroup {\n  display: flex;\n  flex-wrap: wrap;\n}\n.altrp-field-option {\n  display: flex;\n  padding: 10px;\n}\n.altrp-field-option__label {\n  cursor: pointer;\n}\ntextarea.altrp-field {\n  display: block;\n}\n.altrp-table__filter-select .altrp-field-select2__placeholder {\n  white-space: nowrap;\n}\n.altrp-table__filter-select .altrp-field-select2__single-value {\n  font-size: 14px;\n}\n.altrp-table__filter-select .altrp-field-select2__indicator-separator {\n  display: none;\n}\n.altrp-table__filter-select .altrp-field-select2__indicator {\n  align-items: center;\n}\n.altrp-table__filter-select .altrp-field-select2__control {\n  width: 100%;\n  min-height: 19px;\n  padding: 0;\n  border-radius: 0;\n  outline: none;\n  border-color: rgb(142, 148, 170);\n  -webkit-box-shadow: none;\n  -moz-box-shadow: none;\n  box-shadow: none;\n}\n.altrp-table__filter-select .altrp-field-select2__control input {\n  border: none;\n}\n.altrp-table__filter-select .altrp-field-select2__value-container {\n  padding-top: 0;\n  padding-bottom: 0;\n  line-height: 13px;\n}\n.altrp-field-required {\n  color: red;\n  font-size: 18px;\n  padding-left: 10px;\n}\n.altrp-field-container-label {\n  display: flex;\n  flex-direction: row;\n}\n\n.altrp-field-label-container-left {\n  display: flex;\n  align-items: center;\n}\n\n.altrp-field-label-container {\n  display: inline-flex;\n  align-items: center;\n}\n.altrp-field-select2__indicator.altrp-field-select2__dropdown-indicator {\n  padding: 0 8px;\n  max-height: 14px;\n  overflow: hidden;\n}\n.altrp-field-select2 .altrp-field-select2__value-container {\n  padding: 0px 8px;\n}\n.altrp-field-select2 .css-b8ldur-Input {\n  padding-bottom: 0px;\n  padding-top: 0px;\n  margin: 0 2px;\n}\n.altrp-field-select2 .altrp-field-select2__control {\n  min-height: 14px;\n}\n`)\n\nconst AltrpFieldContainer = styled.div`\n  ${({settings: {content_label_position_type}}) => {\n  switch (content_label_position_type) {\n    case \"left\": {\n      return \"display: flex\";\n    }\n    case \"right\": {\n      return \"display:flex;flex-direction:row-reverse;justify-content:flex-end;\";\n    }\n  }\n  return \"\";\n}}\n`;\n\nclass InputMultiSelectWidget extends Component {\n  timeInput = null;\n\n  constructor(props) {\n    super(props);\n    this.onItemSelect = this.onItemSelect.bind(this)\n    props.element.component = this;\n    if (window.elementDecorator) {\n      window.elementDecorator(this);\n    }\n    this.defaultValue =\n      this.getContent(\"content_default_value\") ||\n      (this.valueMustArray() ? [] : \"\");\n    if (this.valueMustArray() && !_.isArray(this.defaultValue)) {\n      this.defaultValue = [];\n    }\n    this.state = {\n      settings: {...props.element.getSettings()},\n      value: this.defaultValue,\n      options: parseOptionsFromSettings(\n        props.element.getSettings(\"content_options\")\n      ),\n      paramsForUpdate: null,\n    };\n    this.popoverProps = {\n      usePortal: true,\n      position: 'bottom',\n      minimal: props.element.getResponsiveSetting('minimal'),\n      // isOpen:true ,\n      portalClassName: `altrp-portal altrp-portal_input-select altrp-portal${this.props.element.getId()} ${this.state.widgetDisabled ? 'pointer-event-none' : ''}`,\n      portalContainer: window.EditorFrame ? window.EditorFrame.contentWindow.document.body : document.body,\n    };\n    this.altrpSelectRef = React.createRef();\n    if (this.getContent(\"content_default_value\")) {\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\n    }\n  }\n\n  /**\n   * В некоторых случаях значение поля должно быть массивом\n   * @return {boolean}\n   */\n  valueMustArray() {\n    return false;\n  }\n\n  /**\n   * Чистит значение\n   */\n  clearValue() {\n    let value = \"\";\n    this.onChange(value);\n    this.dispatchFieldValueToStore(value, true);\n  }\n\n\n  /**\n   * Загрузка виджета\n   * @param {{}} prevProps\n   * @param {{}} prevState\n   */\n  async _componentDidMount(prevProps, prevState) {\n    if (this.props.element.getSettings(\"content_options\")) {\n      let options = parseOptionsFromSettings(\n        this.props.element.getSettings(\"content_options\")\n      );\n\n      this.setState(state => ({...state, options}));\n    } else if (\n      this.state.settings.model_for_options\n    ) {\n      let options = await new Resource({route: this.getRoute()}).getAll();\n      options = !_.isArray(options) ? options.data : options;\n      options = _.isArray(options) ? options : [];\n      this.setState(state => ({...state, options}));\n    }\n    let value = this.state.value;\n\n    /**\n     * Если динамическое значение загрузилось,\n     * то используем this.getContent для получение этого динамического значения\n     * старые динамические данные\n     * */\n    if (\n      _.get(value, \"dynamic\") &&\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\n    ) {\n      value = this.getContent(\"content_default_value\");\n    }\n\n    /**\n     * Если модель обновилась при смене URL\n     */\n    if (\n      prevProps &&\n      !prevProps.currentModel.getProperty(\"altrpModelUpdated\") &&\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\n    ) {\n      value = this.getContent(\"content_default_value\");\n      this.setState(\n        state => ({...state, value, contentLoaded: true}),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n      return;\n    }\n    if (\n      this.props.currentModel.getProperty(\"altrpModelUpdated\") &&\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\n      !this.state.contentLoaded\n    ) {\n      value = this.getContent(\"content_default_value\");\n      this.setState(\n        state => ({...state, value, contentLoaded: true}),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n      return;\n    }\n    if (this.state.value !== value) {\n      this.setState(\n        state => ({...state, value}),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n    }\n  }\n\n  /**\n   * Получить url для запросов\n   */\n  getRoute() {\n    let url = this.props.element.getSettings(\"model_for_options\");\n\n    if (url.indexOf(\"/\") === -1) {\n      return `/ajax/models/${url}_options`;\n    }\n    if (url.indexOf(\"{{\") !== -1) {\n      url = replaceContentWithData(url);\n    }\n    return url;\n  }\n\n  /**\n   * Обновление виджета\n   */\n  async _componentDidUpdate(prevProps, prevState) {\n    const {content_options, model_for_options} = this.state.settings;\n    if (\n      prevProps &&\n      !prevProps.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\")\n    ) {\n      let value = this.getContent(\n        \"content_default_value\",\n        this.props.element.getSettings(\"select2_multiple\")\n      );\n      this.setState(\n        state => ({...state, value, contentLoaded: true}),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n    }\n    if (\n      this.props.element.getSettings(\"model_for_options\")\n    ) {\n      if (\n        !(\n          this.state.settings.model_for_options ===\n          prevProps.element.getSettings(\"model_for_options\")\n        )\n      ) {\n        let model_for_options = prevProps.element.getSettings(\n          \"model_for_options\"\n        );\n        let options = await new Resource({route: this.getRoute()}).getAll();\n        options = !_.isArray(options) ? options.data : options;\n        options = _.isArray(options) ? options : [];\n        this.setState(state => ({...state, options, model_for_options}));\n      }\n    }\n    /**\n     * Если обновилась модель, то пробрасываем в стор новое значение (старый источник диамических данных)\n     */\n    if (\n      !_.isEqual(this.props.currentModel, prevProps.currentModel) &&\n      this.state.value &&\n      this.state.value.dynamic\n    ) {\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\n    }\n\n    /**\n     * Если обновилось хранилище данных формы, currentDataStorage или модель, то получаем новые опции c сервера\n     */\n    if (\n      this.props.formsStore !== prevProps.formsStore ||\n      this.props.currentModel !== prevProps.currentModel ||\n      this.props.currentDataStorage !== prevProps.currentDataStorage\n    ) {\n      this.updateOptions();\n    }\n    // if (content_options && !model_for_options) {\n    //   let options = parseOptionsFromSettings(content_options);\n    //   if (!_.isEqual(options, this.state.options)) {\n    //     this.setState(state => ({...state, options}));\n    //   }\n    // }\n    this.updateValue(prevProps);\n  }\n\n  /**\n   * Обновить значение если нужно\n   * @param {{}} prevProps\n   */\n  updateValue(prevProps) {\n    if (isEditor()) {\n      return;\n    }\n    let content_calculation = this.props.element.getSettings(\n      \"content_calculation\"\n    );\n    const altrpforms = this.props.formsStore;\n    const fieldName = this.props.element.getFieldId();\n    const formId = this.props.element.getFormId();\n    if (!content_calculation) {\n      /**\n       * Обновить значение, если formsStore изменилось из другого компонента\n       */\n      const path = `${formId}.${fieldName}`;\n      if (\n        this.props.formsStore !== prevProps.formsStore &&\n        _.get(altrpforms, path) !== this.state.value\n      ) {\n        this.setState(state => ({\n          ...state,\n          value: _.get(altrpforms, path)\n        }));\n      }\n      return;\n    }\n\n    const prevContext = {};\n\n    const altrpdata = this.props.currentDataStorage.getData();\n    const altrpmodel = this.props.currentModel.getData();\n    const altrpuser = this.props.currentUser.getData();\n    const altrppagestate = this.props.altrpPageState.getData();\n    const altrpresponses = this.props.altrpresponses.getData();\n    const altrpmeta = this.props.altrpMeta.getData();\n    const context = this.props.element.getCurrentModel().getData();\n    if (content_calculation.indexOf(\"altrpdata\") !== -1) {\n      context.altrpdata = altrpdata;\n      if (!altrpdata.currentDataStorageLoaded) {\n        prevContext.altrpdata = altrpdata;\n      } else {\n        prevContext.altrpdata = prevProps.currentDataStorage.getData();\n      }\n    }\n    if (content_calculation.indexOf(\"altrpforms\") !== -1) {\n      context.altrpforms = altrpforms;\n      /**\n       * Не производим вычисления, если изменилось текущее поле\n       */\n      if (`${formId}.${fieldName}` === altrpforms.changedField) {\n        prevContext.altrpforms = altrpforms;\n      } else {\n        prevContext.altrpforms = prevProps.formsStore;\n      }\n    }\n    if (content_calculation.indexOf(\"altrpmodel\") !== -1) {\n      context.altrpmodel = altrpmodel;\n      prevContext.altrpmodel = prevProps.currentModel.getData();\n    }\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\n      context.altrpuser = altrpuser;\n      prevContext.altrpuser = prevProps.currentUser.getData();\n    }\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\n      context.altrpuser = altrpuser;\n      prevContext.altrpuser = prevProps.currentUser.getData();\n    }\n    if (content_calculation.indexOf(\"altrppagestate\") !== -1) {\n      context.altrppagestate = altrppagestate;\n      prevContext.altrppagestate = prevProps.altrpPageState.getData();\n    }\n    if (content_calculation.indexOf(\"altrpmeta\") !== -1) {\n      context.altrpmeta = altrpmeta;\n      prevContext.altrpmeta = prevProps.altrpMeta.getData();\n    }\n    if (content_calculation.indexOf(\"altrpresponses\") !== -1) {\n      context.altrpresponses = altrpresponses;\n      prevContext.altrpresponses = prevProps.altrpresponses.getData();\n    }\n\n    if (content_calculation.indexOf(\"altrpstorage\") !== -1) {\n      context.altrpstorage = getDataFromLocalStorage(\"altrpstorage\", {});\n    }\n\n    if (\n      _.isEqual(prevProps.currentDataStorage, this.props.currentDataStorage) &&\n      _.isEqual(prevProps.currentUser, this.props.currentUser) &&\n      _.isEqual(prevProps.formsStore, this.props.formsStore) &&\n      _.isEqual(prevProps.altrpPageState, this.props.altrpPageState) &&\n      _.isEqual(prevProps.altrpMeta, this.props.altrpMeta) &&\n      _.isEqual(prevProps.altrpresponses, this.props.altrpresponses) &&\n      _.isEqual(prevProps.currentModel, this.props.currentModel)\n    ) {\n      return;\n    }\n    if (\n      !_.isEqual(prevProps.formsStore, this.props.formsStore) &&\n      `${formId}.${fieldName}` === altrpforms.changedField\n    ) {\n      return;\n    }\n    let value = \"\";\n    try {\n      content_calculation = content_calculation\n        .replace(/}}/g, \"')\")\n        .replace(/{{/g, \"_.get(context, '\");\n      value = eval(content_calculation);\n      if (value === this.state.value) {\n        return;\n      }\n      this.setState(\n        state => ({...state, value}),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n    } catch (e) {\n      console.error(\n        \"Evaluate error in Input: '\" + e.message + \"'\",\n        this.props.element.getId()\n      );\n    }\n  }\n\n  /**\n   * Обновляет опции для селекта при обновлении данных, полей формы\n   */\n  async updateOptions() {\n    {\n      let formId = this.props.element.getFormId();\n      let paramsForUpdate = this.props.element.getSettings(\"params_for_update\");\n      let formData = _.get(this.props.formsStore, [formId], {});\n      paramsForUpdate = parseParamsFromString(\n        paramsForUpdate,\n        new AltrpModel(formData)\n      );\n      /**\n       * Сохраняем параметры запроса, и если надо обновляем опции\n       */\n      let options = [...this.state.options];\n      if (!_.isEqual(paramsForUpdate, this.state.paramsForUpdate)) {\n        if (!_.isEmpty(paramsForUpdate)) {\n          if (this.props.element.getSettings(\"params_as_filters\", false)) {\n            paramsForUpdate = JSON.stringify(paramsForUpdate);\n            options = await new Resource({\n              route: this.getRoute()\n            }).getQueried({filters: paramsForUpdate});\n          } else {\n            options = await new Resource({route: this.getRoute()}).getQueried(\n              paramsForUpdate\n            );\n          }\n          options = !_.isArray(options) ? options.data : options;\n          options = _.isArray(options) ? options : [];\n        } else if (this.state.paramsForUpdate) {\n          options = await new Resource({route: this.getRoute()}).getAll();\n          options = !_.isArray(options) ? options.data : options;\n          options = _.isArray(options) ? options : [];\n        }\n        this.setState(state => ({\n          ...state,\n          paramsForUpdate,\n          options\n        }));\n      }\n    }\n  }\n\n  /**\n   * Изменение значения в виджете\n   * @param e\n   */\n  onChange = (e) => {\n    let value = \"\";\n    let valueToDispatch;\n    const settings = this.props.element.getSettings();\n    value = e.target.value;\n\n    if (e && e.value) {\n      value = e.value;\n    }\n\n    if (_.isArray(e)) {\n      value = _.cloneDeep(e);\n    }\n    if (\n      this.props.element.getSettings(\"content_options_nullable\") &&\n      e &&\n      e.value === \"<null>\"\n    ) {\n      value = null;\n    }\n\n    this.setState(\n      state => ({\n        ...state,\n        value\n      }),\n      () => {\n\n        if (\n          [\"text\", \"email\", \"phone\", \"tel\", \"number\", \"password\"].indexOf(\n            this.state.settings.content_type\n          ) === -1\n        ) {\n          this.dispatchFieldValueToStore(\n            valueToDispatch !== undefined ? valueToDispatch : value,\n            true\n          );\n        }\n      }\n    );\n  }\n\n  /**\n   *\n   * @param item\n   * @param idx\n   */\n  handleTagRemove = (item, idx)=>{\n    let value = this.getValue()\n    value = [...value]\n    value.splice(idx, 1)\n    value = value.map(v=>v.value)\n    this.dispatchFieldValueToStore(value, true)\n  }\n\n  /**\n   *\n   * @param value\n   * @returns {Promise<void>}\n   */\n  async onItemSelect(value) {\n    const currentValue = this.getValue();\n    if (value.value) {\n      value = value.value;\n    }\n    const options = [...this.state.options];\n    const element = this.props.element;\n    if (!options.find(option => option.value === value)) {\n      const create_url = element.getResponsiveSetting('create_url');\n      if (element.getResponsiveSetting('create') && create_url) {\n        this.setState(state => ({...state, widgetDisabled: true}))\n        let params = element.getResponsiveSetting('create_params') || '';\n        params = params.replace(/\\{\\{__query__\\}\\}/g, value);\n        params = parseParamsFromString(params, element.getCurrentModel(), true)\n        const resource = new Resource({route: create_url});\n        try {\n          let res = await resource.post(params)\n          if (res.data) {\n            res = res.data\n          }\n          options.unshift(res)\n        } catch (e) {\n          console.error(e);\n        } finally {\n          this.setState(state => ({...state, widgetDisabled: false}))\n        }\n      } else {\n        options.unshift(arguments[0])\n      }\n    }\n\n    if(! options.find(o=>o.value === value)){\n      value = currentValue\n    } else if(! currentValue.find(v => v.value === value)){\n      value = currentValue.concat({value})\n    }\n    value = value.map(v => v.value)\n    this.setState(state => ({\n        ...state,\n        options,\n        value\n      }),\n      () => {\n        /**\n         * Обновляем хранилище\n         */\n        this.dispatchFieldValueToStore(\n          value,\n          true\n        );\n      })\n  }\n\n\n  /**\n   * получить опции\n   */\n  getOptions() {\n    let options = [...this.state.options];\n    const optionsDynamicSetting = this.props.element.getDynamicSetting(\n      \"content_options\"\n    );\n    if (optionsDynamicSetting) {\n      options = convertData(optionsDynamicSetting, options);\n    }\n    if (!this.props.element.getSettings(\"sort_default\")) {\n      options = _.sortBy(options, o => o && (o.label ? o.label.toString() : o));\n      if (this.props.element.getSettings(\"options_sorting\") === 'desc') {\n        options = _.reverse(options)\n      }\n    }\n    let value = this.getValue()\n    options = options.filter(o => {\n      return ! value.find(v => v.value === o.value)\n    })\n    return options;\n  }\n\n  /**\n   * Передадим значение в хранилище формы\n   * @param {*} value\n   * @param {boolean} userInput true - имзенилось пользователем\n   */\n  dispatchFieldValueToStore = async (value, userInput = false) => {\n    let formId = this.props.element.getFormId();\n    let fieldName = this.props.element.getFieldId();\n    if (fieldName.indexOf(\"{{\") !== -1) {\n      fieldName = replaceContentWithData(fieldName);\n    }\n    if (_.isObject(this.props.appStore) && fieldName && formId) {\n      this.props.appStore.dispatch(\n        changeFormFieldValue(fieldName, value, formId, userInput)\n      );\n      if (userInput) {\n        const change_actions = this.props.element.getSettings(\"change_actions\");\n\n        if (change_actions && !isEditor()) {\n          const actionsManager = (\n            await import(\n              /* webpackChunkName: 'ActionsManager' */\n              \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\n              )\n          ).default;\n          await actionsManager.callAllWidgetActions(\n            this.props.element.getIdForAction(),\n            \"change\",\n            change_actions,\n            this.props.element\n          );\n        }\n      }\n    }\n  };\n\n  /**\n   * Взовращает имя для атрибута name\n   * @return {string}\n   */\n  getName() {\n    return `${this.props.element.getFormId()}[${this.props.element.getFieldId()}]`;\n  }\n\n  escapeRegExpChars(text) {\n    return text.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n  }\n\n\n  /**\n   *\n   * @returns {[]}\n   */\n  getValue = () => {\n    let value;\n    let formId = this.props.element.getFormId();\n    let fieldName = this.props.element.getFieldId();\n    if (isEditor()) {\n      value = this.state.value;\n    } else {\n      value = _.get(appStore.getState(), `formsStore.${formId}.${fieldName}`, '')\n    }\n    if (value && !_.isArray(value)) {\n      value = [value];\n    }\n    if (!value) {\n      value = [];\n    }\n    let options = [...this.state.options]\n    value = value.map(v => {\n      let option = options.find(o => {\n        return o.value === v;\n      })\n      if (! option) {\n        return {value: v, label: v}\n      }\n      return  option;\n    })\n    return value;\n  }\n\n  /**\n   * @return {*}\n   */\n  getCurrentLabel() {\n    const value = this.getValue()\n    const options = this.getOptions() || []\n    return options.find(option => option.value === value)?.label || ''\n  }\n\n  /**\n   * Обработка клика по кнопке\n   * @return {Promise<void>}\n   */\n  onClick = async () => {\n    if (this.props.element.getSettings(\"click_actions\", []) && !isEditor()) {\n      const actionsManager = (\n        await import(\n          /* webpackChunkName: 'ActionsManager' */\n          \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\n          )\n      ).default;\n      await actionsManager.callAllWidgetActions(\n        this.props.element.getIdForAction(),\n        \"click\",\n        this.props.element.getSettings(\"click_actions\", []),\n        this.props.element\n      );\n    }\n  }\n  /**\n   * Создаем элемент из поисковой строки\n   * @param title\n   * @return {{label, value}}\n   */\n  createNewItemFromQuery = (title) => {\n    return {label: title, value: title};\n  }\n  /**\n   * отрисовываем создание нового элемента\n   * @param query\n   * @param active\n   * @param handleClick\n   * @return {JSX.Element|null}\n   */\n\n  createNewItemRenderer = (query,\n                           active,\n                           handleClick) => {\n    /**\n     * @type {FrontElement}\n     */\n    const {element} = this.props;\n\n    if (!element.getResponsiveSetting('create')) {\n      return null;\n    }\n    const {options} = this.state;\n    if (options.find(option => option.value === query)) {\n      return null\n    }\n    let text = element.getResponsiveSetting('create_text') || ''\n    text = text.replace('{{__query__}}', query)\n    text = replaceContentWithData(text, element.getCurrentModel().getData())\n    return (\n      <MenuItem\n        icon=\"add\"\n        text={text}\n        active={active}\n        onClick={handleClick}\n        shouldDismissPopover={false}\n      />)\n  }\n\n  /**\n   *\n   * @param {\n   *   {\n   *     label: string\n   *     value: string\n   *   }\n   * }value\n   * @returns {string}\n   */\n  tagRender(value) {\n    return value.label || ''\n  }\n\n  /**\n   *\n   * @param item1\n   * @param item2\n   * @returns {boolean}\n   */\n  itemsEqual(item1, item2) {\n    return item1?.value === item2?.value\n  }\n\n  /**\n   *\n   */\n  handleClear = ()=>{\n    this.dispatchFieldValueToStore([], true)\n  }\n  render() {\n    const element = this.props.element;\n    let label = null;\n    const settings = this.props.element.getSettings();\n    const {\n      label_icon\n    } = settings;\n\n    let classLabel = \"\";\n    let styleLabel = {};\n    const content_label_position_type = this.props.element.getResponsiveSetting(\n      \"content_label_position_type\"\n    ) || 'top';\n    switch (content_label_position_type) {\n      case \"top\":\n        styleLabel = {\n          marginBottom: this.state.settings.label_style_spacing\n            ? this.state.settings.label_style_spacing.size +\n            this.state.settings.label_style_spacing.unit\n            : 2 + \"px\"\n        };\n        classLabel = \"\";\n        break;\n      case \"bottom\":\n        styleLabel = {\n          marginTop: this.state.settings.label_style_spacing\n            ? this.state.settings.label_style_spacing.size +\n            this.state.settings.label_style_spacing.unit\n            : 2 + \"px\"\n        };\n        classLabel = \"\";\n        break;\n      case \"left\":\n        styleLabel = {\n          marginRight: this.state.settings.label_style_spacing\n            ? this.state.settings.label_style_spacing.size +\n            this.state.settings.label_style_spacing.unit\n            : 2 + \"px\"\n        };\n        classLabel = \"altrp-field-label-container-left\";\n        // this.label.current.classList.add(\"hello\")\n\n        break;\n      case \"absolute\":\n        styleLabel = {\n          position: \"absolute\",\n          zIndex: 2\n        };\n        classLabel = \"\";\n        break;\n    }\n    const content_label = this.getContent('content_label')\n    if (content_label) {\n      label = (\n        <div\n          className={\"altrp-field-label-container \" + classLabel}\n          style={styleLabel}\n        >\n          <label\n            className={`altrp-field-label ${this.state.settings.content_required\n              ? \"altrp-field-label--required\"\n              : \"\"\n            }`}\n          >\n            {content_label}\n          </label>\n          {label_icon && label_icon.assetType && (\n            <span className=\"altrp-label-icon\">\n              {renderAssetIcon(label_icon)}\n            </span>\n          )}\n        </div>\n      );\n    } else {\n      label = null;\n    }\n\n    const placeholder = element.getResponsiveSetting('content_placeholder');\n    const content_readonly = element.getResponsiveSetting('content_readonly');\n    const no_results_text = element.getResponsiveSetting('no_results_text');\n\n    const inputProps = {\n    };\n\n    let input = null;\n\n    let itemsOptions = this.getOptions();\n    const position_css_classes = element.getResponsiveSetting('position_css_classes', '', '')\n    const position_css_id = this.getContent('position_css_id')\n    const selectedItems = this.getValue()\n    const clearButton =\n      selectedItems.length > 0 ? <Button icon=\"cross\" minimal={true} className=\"altrp-clear\" onClick={this.handleClear} /> : undefined;\n    input = (\n      <MultiSelect\n        placeholder={placeholder}\n        inputProps={inputProps}\n        itemsEqual={this.itemsEqual}\n        disabled={content_readonly}\n        popoverProps={this.popoverProps}\n        createNewItemFromQuery={element.getResponsiveSetting('create') ? this.createNewItemFromQuery : null}\n        createNewItemRenderer={this.createNewItemRenderer}\n        itemRenderer={(item, {handleClick, modifiers, query}) => {\n          if (!modifiers.matchesPredicate) {\n            return null;\n          }\n          return <MenuItem\n            text={item.label}\n            key={item.value}\n            disabled={modifiers.disabled || item.disabled}\n            onClick={handleClick}\n          />\n        }}\n        itemPredicate={(query, item) => {\n          if (query === undefined || query.length === 0) {\n            return true\n          }\n          return `${item?.label?.toLowerCase() || ''}`.indexOf(query.toLowerCase()) >= 0;\n        }}\n        items={itemsOptions}\n        // itemRenderer={({label})=>label}\n        noResults={<MenuItem disabled={true} text={no_results_text}/>}\n        name={this.getName()}\n        onItemSelect={this.onItemSelect}\n        selectedItems={selectedItems}\n        tagInputProps={{\n          onRemove: this.handleTagRemove,\n          rightElement: clearButton,\n          // tagProps: getTagProps,\n        }}\n        id={position_css_id}\n        tagRenderer={this.tagRender}\n        className={`${position_css_classes} ${this.state.widgetDisabled ? 'pointer-event-none' : ''}`}\n      >\n      </MultiSelect>\n    );\n\n    return (\n      <AltrpFieldContainer\n        settings={settings}\n        className={\"altrp-field-container \"}\n      >\n        {content_label_position_type === \"top\" ? label : \"\"}\n        {content_label_position_type === \"left\" ? label : \"\"}\n        {content_label_position_type === \"right\" ? label : \"\"}\n        {content_label_position_type === \"absolute\" ? label : \"\"}\n        {/* .altrp-field-label-container */}\n        {input}\n        {content_label_position_type === \"bottom\" ? label : \"\"}\n      </AltrpFieldContainer>\n    );\n  }\n}\n\nexport default InputMultiSelectWidget;\n","const {\n  convertData,\n  isEditor,\n  parseOptionsFromSettings,\n  parseParamsFromString,\n  replaceContentWithData,\n  renderAssetIcon,\n  renderAsset,\n  Resource,\n  getDataFromLocalStorage\n} = window.altrpHelpers;\nimport {changeFormFieldValue} from \"../../../../../front-app/src/js/store/forms-data-storage/actions\";\nimport AltrpModel from \"../../classes/AltrpModel\";\nconst Button = window.altrpLibs.Blueprint.Button;\nconst MenuItem = window.altrpLibs.Blueprint.MenuItem;\nconst Select = window.altrpLibs.BlueprintSelect.Select;\n\n(window.globalDefaults = window.globalDefaults || []).push(`\n\n.altrp-field {\n  border-style: solid;\n  width: 100%;\n}\n.altrp-field-file{\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n}\n.altrp-portal_input-select .bp3-menu{\n  max-height: 300px;\n  overflow: auto;\n}\n.altrp-widget_input-select .bp3-icon_right{\n    margin:  0 0 0 7px;\n}\n.bp3-icon_text-widget img{\n  width: 16px;\n  height: 16px;\n  object-fit: contain;\n  pointer-events: none;\n}\n.bp3-icon_text-widget svg{\n  width: 16px;\n  height: 16px;\n  pointer-events: none;\n}\n.altrp-widget_input-select.altrp-widget_input-select .bp3-icon:first-child:last-child{\n   margin: 0;\n}\n.altrp-widget_input-select .bp3-popover-wrapper{\n  overflow: hidden;\n  display: flex;\n}\n.altrp-widget_input-select .bp3-popover-target > div{\n  width: 100%;\n}\n.altrp-widget_input-select .bp3-popover-target{\n  display: flex;\n  flex-grow: 1;\n}\n.altrp-widget_input-select .bp3-popover-target .bp3-button{\n  width: 100%;\n  justify-content: flex-end;\n  /*flex-direction: row-reverse;*/\n\n}\n.altrp-widget_input-select .bp3-popover-target .bp3-button .bp3-button-text{\n  flex-grow: 1;\n}\n.altrp-label-icon svg,\n.altrp-label-icon img {\n  width: 20px;\n}\n.altrp-label-icon svg{\n  height: 20px;\n}\n.altrp-field-file__field{\n  display: none;\n}\n.altrp-field-file__placeholder{\n  display: none;\n}\n.altrp-field-file_empty .altrp-field-file__placeholder{\n  display: block;\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n  background-color: rgb(52,59,76);\n  color: #fff;\n}\n.input-clear-btn {\n  background: transparent;\n  padding: 0;\n  position: absolute;\n  bottom: calc(50% - 7px);\n  right: 15px;\n  display: none;\n}\n.input-clear-btn:hover {\n  font-weight: bold;\n}\n.altrp-field:hover + .input-clear-btn, .input-clear-btn:hover {\n  display: block;\n}\n.altrp-input-wrapper, .altrp-field-select2 {\n  position: relative;\n  flex-grow: 1;\n}\n.altrp-field-label--required::after {\n  content: \"*\";\n  color: red;\n  font-size: inherit;\n  padding-left: 10px;\n}\n.altrp-field-label {\n  font-size: 16px;\n  font-family: \"Open Sans\";\n  line-height: 1.5;\n  letter-spacing: 0;\n}\n.altrp-field-select2__single-value, .altrp-field {\n  font-size: 16px;\n  font-family: \"Open Sans\";\n  line-height: 1.5;\n  letter-spacing: 0;\n}\n.altrp-field-select2__control, .altrp-field {\n  text-align: left;\n  padding-top: 2px;\n  padding-right: 2px;\n  padding-bottom: 2px;\n  padding-left: 2px;\n  border-width: 1px;\n}\n.altrp-field-select2__control:hover{\n  border-width: 1px;\n}\n.altrp-field-container {\n  margin: 0;\n}\n.altrp-field::placeholder, .altrp-field-select2__placeholder {\n  font-size: 13px;\n  font-family: \"Open Sans\";\n  line-height: 1.5;\n  letter-spacing: 0;\n}\n.altrp-image-select {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n.altrp-image-select img {\n  flex-grow: 1;\n  object-fit: contain;\n}\n.altrp-field {\n  overflow: hidden;\n  cursor: pointer;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n.altrp-field.active {\n  border-color: lightcoral;\n}\n.altrp-field-label {\n  text-align: center;\n  display: block;\n}\n.altrp-pagination__select-size .altrp-field-select2__single-value {\n  font-size: 14px;\n}\n.altrp-pagination__select-size .altrp-field-select2__indicator-separator {\n  display: none;\n}\n.altrp-pagination__select-size .altrp-field-select2__indicator {\n  align-items: center;\n}\n.altrp-pagination__select-size .altrp-field-select2__control {\n  width: 100px;\n  min-height: 32px;\n  padding: 0;\n  border-radius: 0;\n  outline: none;\n  border-color: rgb(142,148,170);\n  -webkit-box-shadow: none;\n  -moz-box-shadow: none;\n  box-shadow: none;\n}\n.altrp-pagination__select-size .altrp-field-select2__control input {\n  border: none;\n}\n.altrp-field-select2 {\n  position: relative;\n  box-sizing: border-box;\n  pointer-events: none;\n}\n.altrp-field-select2__control {\n  webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  background-color: hsl(0,0%,100%);\n  border-color: hsl(0,0%,80%);\n  border-style: solid;\n  border-width: 1px;\n  cursor: default;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-wrap: wrap;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  -webkit-box-pack: justify;\n  -webkit-justify-content: space-between;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n  min-height: 38px;\n  outline: 0 !important;\n  position: relative;\n  -webkit-transition: all 100ms;\n  transition: all 100ms;\n  box-sizing: border-box;\n}\n.altrp-field-select2__value-container {\n  -webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  -webkit-flex-wrap: wrap;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  padding: 2px 8px;\n  -webkit-overflow-scrolling: touch;\n  position: relative;\n  overflow: hidden;\n  box-sizing: border-box;\n}\n.altrp-field-select2__single-value {\n  color: hsl(0,0%,20%);\n  margin-left: 2px;\n  margin-right: 2px;\n  max-width: calc(100% - 8px);\n  overflow: hidden;\n  position: absolute;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  top: 50%;\n  -webkit-transform: translateY(-50%);\n  -ms-transform: translateY(-50%);\n  transform: translateY(-50%);\n  box-sizing: border-box;\n}\n.altrp-field-select2__indicators {\n  -webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-align-self: stretch;\n  -ms-flex-item-align: stretch;\n  align-self: stretch;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-shrink: 0;\n  -ms-flex-negative: 0;\n  flex-shrink: 0;\n  box-sizing: border-box;\n}\n.altrp-field-select2__indicator-separator {\n  -webkit-align-self: stretch;\n  -ms-flex-item-align: stretch;\n  align-self: stretch;\n  background-color: hsl(0,0%,80%);\n  margin-bottom: 8px;\n  margin-top: 8px;\n  width: 1px;\n  box-sizing: border-box;\n}\n.altrp-field-select2__indicator {\n  color: hsl(0,0%,80%);\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  padding: 8px;\n  -webkit-transition: color 150ms;\n  transition: color 150ms;\n  box-sizing: border-box;\n  justify-content: center;\n  align-items: center;\n}\n.tba-placeholder {\n  display: flex;\n  justify-content: center;\n  font-size: 28px;\n  font-weight: bold;\n}\n.altrp-field-subgroup {\n  display: flex;\n  flex-wrap: wrap;\n}\n.altrp-field-option {\n  display: flex;\n  padding: 10px;\n}\n.altrp-field-option__label {\n  cursor: pointer;\n}\ntextarea.altrp-field {\n  display: block;\n}\n.altrp-table__filter-select .altrp-field-select2__placeholder {\n  white-space: nowrap;\n}\n.altrp-table__filter-select .altrp-field-select2__single-value {\n  font-size: 14px;\n}\n.altrp-table__filter-select .altrp-field-select2__indicator-separator {\n  display: none;\n}\n.altrp-table__filter-select .altrp-field-select2__indicator {\n  align-items: center;\n}\n.altrp-table__filter-select .altrp-field-select2__control {\n  width: 100%;\n  min-height: 19px;\n  padding: 0;\n  border-radius: 0;\n  outline: none;\n  border-color: rgb(142, 148, 170);\n  -webkit-box-shadow: none;\n  -moz-box-shadow: none;\n  box-shadow: none;\n}\n.altrp-table__filter-select .altrp-field-select2__control input {\n  border: none;\n}\n.altrp-table__filter-select .altrp-field-select2__value-container {\n  padding-top: 0;\n  padding-bottom: 0;\n  line-height: 13px;\n}\n.altrp-field-required {\n  color: red;\n  font-size: 18px;\n  padding-left: 10px;\n}\n.altrp-field-container-label {\n  display: flex;\n  flex-direction: row;\n}\n\n.altrp-field-label-container-left {\n  display: flex;\n  align-items: center;\n}\n\n.altrp-field-label-container {\n  display: inline-flex;\n  align-items: center;\n}\n.altrp-field-select2__indicator.altrp-field-select2__dropdown-indicator {\n  padding: 0 8px;\n  max-height: 14px;\n  overflow: hidden;\n}\n.altrp-field-select2 .altrp-field-select2__value-container {\n  padding: 0px 8px;\n}\n.altrp-field-select2 .css-b8ldur-Input {\n  padding-bottom: 0px;\n  padding-top: 0px;\n  margin: 0 2px;\n}\n.altrp-field-select2 .altrp-field-select2__control {\n  min-height: 14px;\n}\n`)\n\nconst AltrpFieldContainer = styled.div`\n  ${({settings: {content_label_position_type}}) => {\n  switch (content_label_position_type) {\n    case \"left\": {\n      return \"display: flex\";\n    }\n    case \"right\": {\n      return \"display:flex;flex-direction:row-reverse;justify-content:flex-end;\";\n    }\n  }\n  return \"\";\n}}\n`;\n\nclass InputSelectWidget extends Component {\n  timeInput = null;\n\n  constructor(props) {\n    super(props);\n    props.element.component = this;\n    if (window.elementDecorator) {\n      window.elementDecorator(this);\n    }\n    this.defaultValue =\n      this.getContent(\"content_default_value\") ||\n      (this.valueMustArray() ? [] : \"\");\n    if (this.valueMustArray() && !_.isArray(this.defaultValue)) {\n      this.defaultValue = [];\n    }\n    this.state = {\n      settings: {...props.element.getSettings()},\n      value: this.defaultValue,\n      options: parseOptionsFromSettings(\n        props.element.getSettings(\"content_options\")\n      ),\n      paramsForUpdate: null,\n    };\n    this.popoverProps = {\n      usePortal: true,\n      position: 'bottom',\n      minimal: props.element.getResponsiveSetting('minimal'),\n      // isOpen:true ,\n      portalClassName: `altrp-portal altrp-portal_input-select altrp-portal${this.props.element.getId()} ${this.state.widgetDisabled ? 'pointer-event-none' : ''}`,\n      portalContainer: window.EditorFrame ? window.EditorFrame.contentWindow.document.body : document.body,\n    };\n    this.altrpSelectRef = React.createRef();\n    if (this.getContent(\"content_default_value\")) {\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\n    }\n  }\n\n  /**\n   * В некоторых случаях значение поля должно быть массивом\n   * @return {boolean}\n   */\n  valueMustArray() {\n    return false;\n  }\n\n  /**\n   * Чистит значение\n   */\n  clearValue() {\n    let value = \"\";\n    this.onChange(value);\n    this.dispatchFieldValueToStore(value, true);\n  }\n\n\n  /**\n   * Загрузка виджета\n   * @param {{}} prevProps\n   * @param {{}} prevState\n   */\n  async _componentDidMount(prevProps, prevState) {\n    if (this.props.element.getSettings(\"content_options\")) {\n      let options = parseOptionsFromSettings(\n        this.props.element.getSettings(\"content_options\")\n      );\n\n      this.setState(state => ({...state, options}));\n    } else if (\n      [\"input-select\"].indexOf(this.props.element.getName()) >= 0 &&\n      this.state.settings.model_for_options\n    ) {\n      let options = await new Resource({route: this.getRoute()}).getAll();\n      options = !_.isArray(options) ? options.data : options;\n      options = _.isArray(options) ? options : [];\n      this.setState(state => ({...state, options}));\n    }\n    let value = this.state.value;\n\n    /**\n     * Если динамическое значение загрузилось,\n     * то используем this.getContent для получение этого динамического значения\n     * старые динамические данные\n     * */\n    if (\n      _.get(value, \"dynamic\") &&\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\n    ) {\n      value = this.getContent(\"content_default_value\");\n    }\n\n    /**\n     * Если модель обновилась при смене URL\n     */\n    if (\n      prevProps &&\n      !prevProps.currentModel.getProperty(\"altrpModelUpdated\") &&\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\n    ) {\n      value = this.getContent(\"content_default_value\");\n      this.setState(\n        state => ({...state, value, contentLoaded: true}),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n      return;\n    }\n    if (\n      this.props.currentModel.getProperty(\"altrpModelUpdated\") &&\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\n      !this.state.contentLoaded\n    ) {\n      value = this.getContent(\"content_default_value\");\n      this.setState(\n        state => ({...state, value, contentLoaded: true}),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n      return;\n    }\n    if (this.state.value !== value) {\n      this.setState(\n        state => ({...state, value}),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n    }\n  }\n\n  /**\n   * Получить url для запросов\n   */\n  getRoute() {\n    let url = this.props.element.getSettings(\"model_for_options\");\n\n    if (url.indexOf(\"/\") === -1) {\n      return `/ajax/models/${url}_options`;\n    }\n    if (url.indexOf(\"{{\") !== -1) {\n      url = replaceContentWithData(url);\n    }\n    return url;\n  }\n\n  /**\n   * Обновление виджета\n   */\n  async _componentDidUpdate(prevProps, prevState) {\n    const {content_options, model_for_options} = this.state.settings;\n    if (\n      prevProps &&\n      !prevProps.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\")\n    ) {\n      let value = this.getContent(\n        \"content_default_value\",\n        this.props.element.getSettings(\"select2_multiple\")\n      );\n      this.setState(\n        state => ({...state, value, contentLoaded: true}),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n    }\n    if (\n      this.props.element.getName() === \"input-select\" &&\n      this.props.element.getSettings(\"model_for_options\")\n    ) {\n      if (\n        !(\n          this.state.settings.model_for_options ===\n          prevProps.element.getSettings(\"model_for_options\")\n        )\n      ) {\n        let model_for_options = prevProps.element.getSettings(\n          \"model_for_options\"\n        );\n        let options = await new Resource({route: this.getRoute()}).getAll();\n        options = !_.isArray(options) ? options.data : options;\n        options = _.isArray(options) ? options : [];\n        this.setState(state => ({...state, options, model_for_options}));\n      }\n    }\n    /**\n     * Если обновилась модель, то пробрасываем в стор новое значение (старый источник диамических данных)\n     */\n    if (\n      !_.isEqual(this.props.currentModel, prevProps.currentModel) &&\n      this.state.value &&\n      this.state.value.dynamic\n    ) {\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\n    }\n\n    /**\n     * Если обновилось хранилище данных формы, currentDataStorage или модель, то получаем новые опции c сервера\n     */\n    if (\n      this.props.formsStore !== prevProps.formsStore ||\n      this.props.currentModel !== prevProps.currentModel ||\n      this.props.currentDataStorage !== prevProps.currentDataStorage\n    ) {\n      this.updateOptions();\n    }\n    // if (content_options && !model_for_options) {\n    //   let options = parseOptionsFromSettings(content_options);\n    //   if (!_.isEqual(options, this.state.options)) {\n    //     this.setState(state => ({...state, options}));\n    //   }\n    // }\n    this.updateValue(prevProps);\n  }\n\n  /**\n   * Обновить значение если нужно\n   * @param {{}} prevProps\n   */\n  updateValue(prevProps) {\n    if (isEditor()) {\n      return;\n    }\n    let content_calculation = this.props.element.getSettings(\n      \"content_calculation\"\n    );\n    const altrpforms = this.props.formsStore;\n    const fieldName = this.props.element.getFieldId();\n    const formId = this.props.element.getFormId();\n    if (!content_calculation) {\n      /**\n       * Обновить значение, если formsStore изменилось из другого компонента\n       */\n      const path = `${formId}.${fieldName}`;\n      if (\n        this.props.formsStore !== prevProps.formsStore &&\n        _.get(altrpforms, path) !== this.state.value\n      ) {\n        this.setState(state => ({\n          ...state,\n          value: _.get(altrpforms, path)\n        }));\n      }\n      return;\n    }\n\n    const prevContext = {};\n\n    const altrpdata = this.props.currentDataStorage.getData();\n    const altrpmodel = this.props.currentModel.getData();\n    const altrpuser = this.props.currentUser.getData();\n    const altrppagestate = this.props.altrpPageState.getData();\n    const altrpresponses = this.props.altrpresponses.getData();\n    const altrpmeta = this.props.altrpMeta.getData();\n    const context = this.props.element.getCurrentModel().getData();\n    if (content_calculation.indexOf(\"altrpdata\") !== -1) {\n      context.altrpdata = altrpdata;\n      if (!altrpdata.currentDataStorageLoaded) {\n        prevContext.altrpdata = altrpdata;\n      } else {\n        prevContext.altrpdata = prevProps.currentDataStorage.getData();\n      }\n    }\n    if (content_calculation.indexOf(\"altrpforms\") !== -1) {\n      context.altrpforms = altrpforms;\n      /**\n       * Не производим вычисления, если изменилось текущее поле\n       */\n      if (`${formId}.${fieldName}` === altrpforms.changedField) {\n        prevContext.altrpforms = altrpforms;\n      } else {\n        prevContext.altrpforms = prevProps.formsStore;\n      }\n    }\n    if (content_calculation.indexOf(\"altrpmodel\") !== -1) {\n      context.altrpmodel = altrpmodel;\n      prevContext.altrpmodel = prevProps.currentModel.getData();\n    }\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\n      context.altrpuser = altrpuser;\n      prevContext.altrpuser = prevProps.currentUser.getData();\n    }\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\n      context.altrpuser = altrpuser;\n      prevContext.altrpuser = prevProps.currentUser.getData();\n    }\n    if (content_calculation.indexOf(\"altrppagestate\") !== -1) {\n      context.altrppagestate = altrppagestate;\n      prevContext.altrppagestate = prevProps.altrpPageState.getData();\n    }\n    if (content_calculation.indexOf(\"altrpmeta\") !== -1) {\n      context.altrpmeta = altrpmeta;\n      prevContext.altrpmeta = prevProps.altrpMeta.getData();\n    }\n    if (content_calculation.indexOf(\"altrpresponses\") !== -1) {\n      context.altrpresponses = altrpresponses;\n      prevContext.altrpresponses = prevProps.altrpresponses.getData();\n    }\n\n    if (content_calculation.indexOf(\"altrpstorage\") !== -1) {\n      context.altrpstorage = getDataFromLocalStorage(\"altrpstorage\", {});\n    }\n\n    if (\n      _.isEqual(prevProps.currentDataStorage, this.props.currentDataStorage) &&\n      _.isEqual(prevProps.currentUser, this.props.currentUser) &&\n      _.isEqual(prevProps.formsStore, this.props.formsStore) &&\n      _.isEqual(prevProps.altrpPageState, this.props.altrpPageState) &&\n      _.isEqual(prevProps.altrpMeta, this.props.altrpMeta) &&\n      _.isEqual(prevProps.altrpresponses, this.props.altrpresponses) &&\n      _.isEqual(prevProps.currentModel, this.props.currentModel)\n    ) {\n      return;\n    }\n    if (\n      !_.isEqual(prevProps.formsStore, this.props.formsStore) &&\n      `${formId}.${fieldName}` === altrpforms.changedField\n    ) {\n      return;\n    }\n    let value = \"\";\n    try {\n      content_calculation = content_calculation\n        .replace(/}}/g, \"')\")\n        .replace(/{{/g, \"_.get(context, '\");\n      value = eval(content_calculation);\n      if (value === this.state.value) {\n        return;\n      }\n      this.setState(\n        state => ({...state, value}),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n    } catch (e) {\n      console.error(\n        \"Evaluate error in Input: '\" + e.message + \"'\",\n        this.props.element.getId()\n      );\n    }\n  }\n\n  /**\n   * Обновляет опции для селекта при обновлении данных, полей формы\n   */\n  async updateOptions() {\n    {\n      let formId = this.props.element.getFormId();\n      let paramsForUpdate = this.props.element.getSettings(\"params_for_update\");\n      let formData = _.get(this.props.formsStore, [formId], {});\n      paramsForUpdate = parseParamsFromString(\n        paramsForUpdate,\n        new AltrpModel(formData)\n      );\n      /**\n       * Сохраняем параметры запроса, и если надо обновляем опции\n       */\n      let options = [...this.state.options];\n      if (!_.isEqual(paramsForUpdate, this.state.paramsForUpdate)) {\n        if (!_.isEmpty(paramsForUpdate)) {\n          if (this.props.element.getSettings(\"params_as_filters\", false)) {\n            paramsForUpdate = JSON.stringify(paramsForUpdate);\n            options = await new Resource({\n              route: this.getRoute()\n            }).getQueried({filters: paramsForUpdate});\n          } else {\n            options = await new Resource({route: this.getRoute()}).getQueried(\n              paramsForUpdate\n            );\n          }\n          options = !_.isArray(options) ? options.data : options;\n          options = _.isArray(options) ? options : [];\n        } else if (this.state.paramsForUpdate) {\n          options = await new Resource({route: this.getRoute()}).getAll();\n          options = !_.isArray(options) ? options.data : options;\n          options = _.isArray(options) ? options : [];\n        }\n        this.setState(state => ({\n          ...state,\n          paramsForUpdate,\n          options\n        }));\n      }\n    }\n  }\n\n  /**\n   * Изменение значения в виджете\n   * @param e\n   */\n  onChange = (e)=> {\n    let value = \"\";\n    let valueToDispatch;\n    const settings = this.props.element.getSettings();\n    value = e.target.value;\n\n    if (e && e.value) {\n      value = e.value;\n    }\n\n    if (_.isArray(e)) {\n      value = _.cloneDeep(e);\n    }\n    if (\n      this.props.element.getSettings(\"content_options_nullable\") &&\n      e &&\n      e.value === \"<null>\"\n    ) {\n      value = null;\n    }\n\n    this.setState(\n      state => ({\n        ...state,\n        value\n      }),\n      () => {\n\n        if (\n          [\"text\", \"email\", \"phone\", \"tel\", \"number\", \"password\"].indexOf(\n            this.state.settings.content_type\n          ) === -1\n        ) {\n          this.dispatchFieldValueToStore(\n            valueToDispatch !== undefined ? valueToDispatch : value,\n            true\n          );\n        }\n      }\n    );\n  }\n\n  async onItemSelect(value) {\n    if (value.value) {\n      value = value.value;\n    }\n    const options = [...this.state.options];\n    const element = this.props.element;\n    if(! options.find(option => option.value === value)){\n      const create_url = element.getResponsiveSetting('create_url');\n      if(element.getResponsiveSetting('create') && create_url){\n        this.setState(state =>({...state, widgetDisabled: true}))\n        let params = element.getResponsiveSetting('create_params') || '';\n        params = params.replace(/\\{\\{__query__\\}\\}/g, value);\n        params = parseParamsFromString(params, element.getCurrentModel(), true)\n        const resource = new Resource({route: create_url});\n        try{\n          let res = await resource.post(params)\n          if(res.data){\n            res = res.data\n          }\n          options.unshift(res)\n        } catch (e) {\n\n        }finally {\n          this.setState(state =>({...state, widgetDisabled: false}))\n        }\n      } else {\n        options.unshift(arguments[0])\n      }\n    }\n    this.setState(state => ({\n        ...state,\n        options,\n        value\n      }),\n      () => {\n        /**\n         * Обновляем хранилище\n         */\n        this.dispatchFieldValueToStore(\n          value,\n          true\n        );\n      })\n  }\n\n\n  /**\n   * получить опции\n   */\n  getOptions() {\n    let options = [...this.state.options];\n    const optionsDynamicSetting = this.props.element.getDynamicSetting(\n      \"content_options\"\n    );\n    if (optionsDynamicSetting) {\n      options = convertData(optionsDynamicSetting, options);\n    }\n    if (!this.props.element.getSettings(\"sort_default\")) {\n      options = _.sortBy(options, o => o && (o.label ? o.label.toString() : o));\n      if(this.props.element.getSettings(\"options_sorting\") === 'desc'){\n        options = _.reverse(options)\n      }\n    }\n    return options;\n  }\n\n  /**\n   * Передадим значение в хранилище формы\n   * @param {*} value\n   * @param {boolean} userInput true - имзенилось пользователем\n   */\n  dispatchFieldValueToStore = async (value, userInput = false) => {\n    let formId = this.props.element.getFormId();\n    let fieldName = this.props.element.getFieldId();\n    if (fieldName.indexOf(\"{{\") !== -1) {\n      fieldName = replaceContentWithData(fieldName);\n    }\n    if (_.isObject(this.props.appStore) && fieldName && formId) {\n      this.props.appStore.dispatch(\n        changeFormFieldValue(fieldName, value, formId, userInput)\n      );\n      if (userInput) {\n        const change_actions = this.props.element.getSettings(\"change_actions\");\n\n        if (change_actions && !isEditor()) {\n          const actionsManager = (\n            await import(\n              /* webpackChunkName: 'ActionsManager' */\n              \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\n              )\n          ).default;\n          await actionsManager.callAllWidgetActions(\n            this.props.element.getIdForAction(),\n            \"change\",\n            change_actions,\n            this.props.element\n          );\n        }\n      }\n    }\n  };\n\n  /**\n   * Взовращает имя для атрибута name\n   * @return {string}\n   */\n  getName() {\n    return `${this.props.element.getFormId()}[${this.props.element.getFieldId()}]`;\n  }\n\n  escapeRegExpChars(text) {\n    return text.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n  }\n\n\n  /**\n   *\n   * @returns {*}\n   */\n  getValue = () => {\n    let value;\n    let formId = this.props.element.getFormId();\n    let fieldName = this.props.element.getFieldId();\n    if (isEditor()) {\n      value = this.state.value;\n    } else {\n      value = _.get(appStore.getState(), `formsStore.${formId}.${fieldName}`, '')\n    }\n\n    return value;\n  }\n\n  /**\n   * @return {*}\n   */\n  getCurrentLabel() {\n    const value = this.getValue()\n    const options = this.getOptions() || []\n    return options.find(option => option.value === value)?.label || ''\n  }\n\n  /**\n   *\n   * @return {JSX.Element|string}\n   */\n  renderRightIcon = ()=>{\n    const right_icon = this.props.element.getResponsiveSetting('right_icon')\n    if(_.isEmpty(right_icon)){\n      return 'caret-down'\n    }\n    return <span className=\"bp3-icon bp3-icon_text-widget bp3-icon_right\" >\n      {renderAsset(right_icon )}\n    </span>\n  }\n  /**\n   *\n   * @return {JSX.Element|null}\n   */\n  renderLeftIcon = ()=>{\n    const left_icon = this.props.element.getResponsiveSetting('left_icon')\n    if(_.isEmpty(left_icon)){\n      return null\n    }\n    return <span className=\"bp3-icon bp3-icon_text-widget bp3-icon_left\" >\n      {renderAsset(left_icon)}\n    </span>\n  }\n  /**\n   * Обработка клика по кнопке\n   * @return {Promise<void>}\n   */\n  onClick = async ()=>{\n    if (this.props.element.getSettings(\"click_actions\", []) && !isEditor()) {\n      const actionsManager = (\n        await import(\n          /* webpackChunkName: 'ActionsManager' */\n          \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\n          )\n      ).default;\n      await actionsManager.callAllWidgetActions(\n        this.props.element.getIdForAction(),\n        \"click\",\n        this.props.element.getSettings(\"click_actions\", []),\n        this.props.element\n      );\n    }\n  }\n  /**\n   * Создаем элемент из поисковой строки\n   * @param title\n   * @return {{label, value}}\n   */\n  createNewItemFromQuery = (title) => {\n    return{label: title,value: title};\n  }\n  /**\n   * отрисовываем создание нового элемента\n   * @param query\n   * @param active\n   * @param handleClick\n   * @return {JSX.Element|null}\n   */\n\n  createNewItemRenderer = ( query,\n                         active,\n                         handleClick) => {\n    /**\n     * @type {FrontElement}\n     */\n    const {element} = this.props;\n    // console.log(query,\n    //   active,\n    //   handleClick);\n    if(! element.getResponsiveSetting('create')){\n      return null;\n    }\n    const {options} = this.state;\n    if(options.find(option => option.value === query)) {\n      return null\n    }\n      let text = element.getResponsiveSetting('create_text') || ''\n    text = text.replace('{{__query__}}', query)\n    text = replaceContentWithData(text, element.getCurrentModel().getData())\n    return (\n      <MenuItem\n        icon=\"add\"\n        text={text}\n        active={active}\n        onClick={handleClick}\n        shouldDismissPopover={false}\n      />)\n  }\n\n  render() {\n    const element = this.props.element;\n    let label = null;\n    const settings = this.props.element.getSettings();\n    let value = this.getCurrentLabel();\n\n    const {\n      label_icon\n    } = settings;\n\n    let classLabel = \"\";\n    let styleLabel = {};\n    const content_label_position_type = this.props.element.getResponsiveSetting(\n      \"content_label_position_type\"\n    ) || 'top';\n    switch (content_label_position_type) {\n      case \"top\":\n        styleLabel = {\n          marginBottom: this.state.settings.label_style_spacing\n            ? this.state.settings.label_style_spacing.size +\n            this.state.settings.label_style_spacing.unit\n            : 2 + \"px\"\n        };\n        classLabel = \"\";\n        break;\n      case \"bottom\":\n        styleLabel = {\n          marginTop: this.state.settings.label_style_spacing\n            ? this.state.settings.label_style_spacing.size +\n            this.state.settings.label_style_spacing.unit\n            : 2 + \"px\"\n        };\n        classLabel = \"\";\n        break;\n      case \"left\":\n        styleLabel = {\n          marginRight: this.state.settings.label_style_spacing\n            ? this.state.settings.label_style_spacing.size +\n            this.state.settings.label_style_spacing.unit\n            : 2 + \"px\"\n        };\n        classLabel = \"altrp-field-label-container-left\";\n        // this.label.current.classList.add(\"hello\")\n\n        break;\n      case \"absolute\":\n        styleLabel = {\n          position: \"absolute\",\n          zIndex: 2\n        };\n        classLabel = \"\";\n        break;\n    }\n    const content_label = this.getContent('content_label')\n    if (content_label) {\n      label = (\n        <div\n          className={\"altrp-field-label-container \" + classLabel}\n          style={styleLabel}\n        >\n          <label\n            className={`altrp-field-label ${this.state.settings.content_required\n              ? \"altrp-field-label--required\"\n              : \"\"\n            }`}\n          >\n            {content_label}\n          </label>\n          {label_icon && label_icon.assetType && (\n            <span className=\"altrp-label-icon\">\n              {renderAssetIcon(label_icon)}\n            </span>\n          )}\n        </div>\n      );\n    } else {\n      label = null;\n    }\n\n    const placeholder = element.getResponsiveSetting('content_placeholder');\n    const content_readonly = element.getResponsiveSetting('content_readonly');\n    const no_results_text = element.getResponsiveSetting('no_results_text');\n\n    const inputProps = {\n      placeholder,\n      className: element.getResponsiveSetting('hide_search') ? 'altrp-hidden' : '',\n    };\n\n    let input = null;\n\n    let itemsOptions = this.getOptions();\n    const position_css_classes = element.getResponsiveSetting('position_css_classes', '', '')\n    const position_css_id = this.getContent('position_css_id')\n\n    input = (\n        <Select\n          inputProps={inputProps}\n          disabled={content_readonly}\n          popoverProps={this.popoverProps}\n          createNewItemFromQuery={element.getResponsiveSetting('create') ? this.createNewItemFromQuery : null}\n          createNewItemRenderer={this.createNewItemRenderer}\n          itemRenderer={(item, {handleClick, modifiers, query}) => {\n            if (!modifiers.matchesPredicate) {\n              return null;\n            }\n            return <MenuItem\n              text={item.label}\n              key={item.value}\n              active={item.value === value}\n              disabled={modifiers.disabled || item.disabled}\n              onClick={handleClick}\n            />\n          }}\n          itemPredicate={(query, item) => {\n            if (query === undefined || query.length === 0) {\n              return true\n            }\n            return `${item?.label?.toLowerCase() || ''}`.indexOf(query.toLowerCase()) >= 0;\n          }}\n          items={itemsOptions}\n          // itemRenderer={({label})=>label}\n          noResults={<MenuItem disabled={true} text={no_results_text}/>}\n          name={this.getName()}\n          onItemSelect={item => this.onItemSelect(item)}\n          id={position_css_id}\n          className={`${position_css_classes} ${this.state.widgetDisabled ? 'pointer-event-none' : ''}`}\n        >\n          <Button\n            text={value}\n            disabled={content_readonly}\n            onClick={this.onClick}\n            icon={this.renderLeftIcon()}\n            rightIcon={this.renderRightIcon()}\n          />\n        </Select>\n    );\n\n    return (\n      <AltrpFieldContainer\n        settings={settings}\n        className={\"altrp-field-container \"}\n      >\n        {content_label_position_type === \"top\" ? label : \"\"}\n        {content_label_position_type === \"left\" ? label : \"\"}\n        {content_label_position_type === \"right\" ? label : \"\"}\n        {content_label_position_type === \"absolute\" ? label : \"\"}\n        {/* .altrp-field-label-container */}\n        {input}\n        {content_label_position_type === \"bottom\" ? label : \"\"}\n      </AltrpFieldContainer>\n    );\n  }\n}\n\nexport default InputSelectWidget;\n","export const CHANGE_FORM_FIELD_VALUE = 'CHANGE_FORM_FIELD_VALUE';\nexport const CLEAR_FORM_FIELD_VALUE = 'CHANGE_FORM_FIELD_VALUE';\n\n/**\n * Получает данные поля формы и сохраняет в хранилище\n * @param {string}fieldName\n * @param {*}value\n * @param {string}formId\n * @param {boolean}userInput\n * @return {{type: string, fieldName: *, value: *, formId: *}}\n */\nexport function changeFormFieldValue(fieldName, value, formId, userInput) {\n  return {\n    type: CHANGE_FORM_FIELD_VALUE,\n    fieldName,\n    value,\n    formId,\n    changedField: userInput ? `${formId}.${fieldName}` : null,\n  };\n}\n/**\n * Очистить данные поля формы и сохраняет в хранилище\n * @param {string | null}formId\n * @return {{type: string, fieldName: *, value: *, formId: *}}\n */\nexport function clearFormStorage(formId = null) {\n  return {\n    type: CLEAR_FORM_FIELD_VALUE,\n    formId,\n  };\n}\n\n"],"sourceRoot":""}