{"version":3,"sources":["webpack:///./resources/modules/front-app/src/js/constants/INPUT_WIDGETS.js","webpack:///./resources/modules/front-app/src/js/classes/FrontElement.js","webpack:///./resources/modules/front-app/src/js/store/fonts-storage/actions.js"],"names":["data","withoutComponent","this","name","settings","lazySection","children","cssClassStorage","type","id","window","frontElementsManager","componentClass","getComponentClass","getName","parent","forms","component","root","modelsList","getId","appStore","dispatch","addSettings","length","console","error","findClosestByType","getType","indexOf","updateStyles","widgetsForForm","INPUT_WIDGETS","getSettings","getFormId","formInit","actionsRegistered","actionsManager","default","registerWidgetActions","getIdForAction","formsIsInit","formsManager","method","addForm","registerForm","modelName","getModelName","afterLoginRedirect","afterLogoutRedirect","getForms","forEach","form","addSubmitButton","addField","push","idForAction","altrpRandomId","settingName","_default","_","get","cloneDeep","stylesModulePromise","then","stylesModule","addElementStyles","getStringifyStyles","styles","screens","CONSTANTS","splice","breakpoint","rules","hasOwnProperty","selector","concat","join","screen","isObject","mediaQuery","stringStyles","log","has","getValue","maskIsValid","props","elementDisplay","elementIsDisplay","value","state","dynamic","getContent","isArray","trueValue","falseValue","valueReplacement","getRoot","getModelsList","modelInfo","related","_modelInfo","modelsStorage","modelCallbacksStorage","callback","changeCss","toPairs","classStorage","element","model","index","rootElement","cardModel","isCard","AltrpModel","Number","hasCardModel","getCardModel","getState","currentModel","setting","fieldId","replaceContentWithData","getCurrentModel","getData","formId","fonts","font","addFont","dynamicSettingName","elementState","getResponsiveSetting","templateType","newSettings","assign","set","setState","ADD_FONT","REMOVE_FONT","elementId","controllerName","fontName"],"mappings":"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","file":"7576.08fbe0850ec19b9dd217.bundle.js","sourcesContent":["const INPUT_WIDGETS = [\n  'input',\n  'input-select',\n  'input-multi-select',\n  'input-select2',\n  'input-switch',\n  'input-wysiwyg',\n  'input-checkbox',\n  'input-radio',\n  'input-image-select',\n  'input-file',\n  'input-gallery',\n  'input-accept',\n  'input-date',\n  'input-textarea',\n  'input-slider',\n  'input-text-common',\n  'input-password',\n  'input-tel',\n  'input-number',\n  'input-email',\n  'input-date',\n  'input-hidden',\n];\nexport default INPUT_WIDGETS;\n","import CONSTANTS from \"../../../../editor/src/js/consts\";\nimport {\n  altrpRandomId,\n  getResponsiveSetting,\n  replaceContentWithData,\n  valueReplacement\n} from \"../helpers\";\nimport AltrpModel from \"../../../../editor/src/js/classes/AltrpModel\";\nimport {addFont} from \"../store/fonts-storage/actions\";\nimport {addSettings} from \"../store/elements-settings/actions\";\nimport INPUT_WIDGETS from \"../constants/INPUT_WIDGETS\";\n\nclass FrontElement {\n\n  constructor(data = {}, withoutComponent = false){\n    this.name = data.name;\n    this.settings = data.settings;\n    this.lazySection = data.lazySection;\n    this.children = data.children;\n    this.cssClassStorage = data.cssClassStorage;\n    this.type = data.type;\n    this.id = data.id;\n    if(window.frontElementsManager && ! withoutComponent){\n      this.componentClass = window.frontElementsManager.getComponentClass(this.getName());\n    }\n    this.parent = null;\n    /**\n     * Список форм для текущего элемента (кнопки, интпута)\n     * @type {AltrpForm[]}\n     */\n    this.forms = [];\n    /**\n     * Ссылка на компонент\n     * @type {React.Component | null}\n     */\n    this.component = null;\n\n    /**\n     * Ссылка на родителя\n     * @type {FrontElement}\n     */\n    /**\n     * Ссылка на корневой элемент шаблона\n     * @type {FrontElement}\n     */\n    this.root = null;\n\n    /**\n     * Список данных моделей для текущего шаблона. Например:\n     *  {\n     *      modelName: string\n     *      modelId: 1,\n     *  }\n     *  Для каждого шаблона типа content устанавливается одна обязательная модель Page\n     *  Для шаблонов header и footer нужно предусмотреть изменение данных моджели типа Page\n     *  (при смене страницы header footer могут не меняться)\n     *  * @type {array}\n     */\n    this.modelsList = []\n    if(this.getId()){\n      appStore.dispatch(addSettings(this.getId(), this.getName(), {...this.settings}, this?.children?.length || 0))\n    }\n  }\n\n  /**\n   * Устанавливаем ссылку на элемент-родитель\n   * @param {FrontElement} parent\n   */\n  setParent(parent){\n    if(! parent){\n      console.error(this);\n    }\n    this.parent = parent;\n  }\n\n\n  /**\n   * Возвращает ссылку на корневой элемент шаблона\n   * @return {FrontElement}\n   */\n  getRoot(){\n    if(!this.root){\n      this.root = this.findClosestByType('root-element')\n    }\n    return this.root;\n  }\n\n  /**\n   * Возвращает ссылку на первый элемент указанного типа (поиск идет к корню дерева)\n   * @param {string} type\n   * @return {FrontElement}\n   */\n  findClosestByType(type){\n    if(type === 'widget' && (this.getType() !== 'widget')){\n      return null;\n    }\n    if(type === 'column' && (['root-element', 'section', ].indexOf(this.getType()) !== -1)){\n      return null;\n    }\n    if(type === 'section' && (this.getType() === 'root-element')){\n      return null;\n    }\n    if (this.getType() === type){\n      return this;\n    }\n    if(! this.parent){\n      return null;\n      // console.log(type);\n      // console.log(this);\n    }\n    return this.parent.findClosestByType(type)\n  }\n\n  /**\n   * Вызывается для обновления элемента\n   */\n  update(){\n    this.updateStyles();\n\n    let widgetsForForm = [\n        'button',\n      ...INPUT_WIDGETS\n    ];\n    let widgetsWithActions = [\n        'button',\n      ...INPUT_WIDGETS\n    ];\n    /**\n     * Инициация событий в первую очередь\n     */\n    if(widgetsWithActions.indexOf(this.getName()) >= 0 && this.getSettings('actions', []).length){\n      try{\n        // this.registerActions();\n      } catch(e){\n        console.error(e);\n      }\n      // if(this.getName() === 'button'){\n      //   return;\n      // }\n    }\n\n    if(widgetsForForm.indexOf(this.getName()) >= 0 && this.getFormId()){\n      this.formInit();\n      return;\n    }\n    if(widgetsForForm.indexOf(this.getName()) >= 0 && this.getSettings('form_actions') === 'delete'){\n      this.formInit();\n      return;\n    }\n  }\n  async registerActions(){\n    if(this.actionsRegistered){\n      return;\n    }\n    /**\n     * @member {ActionsManager|*} actionsManager\n     */\n    const actionsManager = (await import(/* webpackChunkName: 'ActionsManager' */'./modules/ActionsManager.js')).default;\n    switch (this.getName()){\n      case 'button':{\n        actionsManager.registerWidgetActions(this.getIdForAction(), this.getSettings('actions', []), 'click', this);\n      }\n      break;\n      case 'input':{\n        actionsManager.registerWidgetActions(this.getIdForAction(), this.getSettings('actions', []), 'blur', this);\n      }\n    }\n\n    this.actionsRegistered = true;\n  }\n  /**\n   * Если элемент поле или кнопка нужно инициализирваоть форму в FormsManager\n   */\n  async formInit(){\n    /**\n     * @member {FormsManager} formsManager\n     */\n    if(! this.component){\n      return;\n    }\n    if(this.formsIsInit){\n      return\n    }\n    this.formsIsInit = true;\n    let formsManager = await import(/* webpackChunkName: 'FormsManager' */'../../../../editor/src/js/classes/modules/FormsManager.js');\n    formsManager = formsManager.default;\n\n    switch (this.getName()) {\n      case 'button': {\n        let method = 'POST';\n        switch (this.getSettings('form_actions')){\n          case 'add_new':{\n            this.addForm(formsManager.registerForm(this.getFormId(), this.getSettings('choose_model'), method));\n          }\n          break;\n          case 'delete':{\n            method = 'DELETE';\n            let modelName = this.getModelName();\n            if(modelName){\n              this.addForm(formsManager.registerForm(this.getId(), modelName, method));\n            }\n          }\n          break;\n          case 'edit':{\n            method = 'PUT';\n            let modelName = this.getModelName();\n            if(modelName){\n              this.addForm(formsManager.registerForm(this.getFormId(), modelName, method));\n            }\n          }\n          break;\n          case 'login':{\n            method = 'POST';\n            this.addForm(formsManager.registerForm(this.getFormId(),\n                'login',\n                method,\n                {afterLoginRedirect:this.getSettings('redirect_after')}));\n          }\n          break;\n          case 'logout':{\n            method = 'POST';\n            this.addForm(formsManager.registerForm(this.getFormId(),\n                'logout',\n                method,\n                {afterLogoutRedirect:this.getSettings('redirect_after')}\n              ));\n          }\n          break;\n          case 'email':{\n            method = 'POST';\n            this.addForm(formsManager.registerForm(this.getFormId(),\n                'email',\n                method,\n                {afterLogoutRedirect:this.getSettings('redirect_after')}\n              ));\n          }\n          break;\n        }\n        this.getForms().forEach(form=>{\n          form.addSubmitButton(this);\n        });\n      }\n      break;\n      case 'input-select':\n      case 'input-multi-select':\n      case 'input-select2':\n      case 'input-switch':\n      case 'input-wysiwyg':\n      case 'input-checkbox':\n      case 'input-radio':\n      case 'input-image-select':\n      case 'input-file':\n      case 'input-gallery':\n      case 'input-accept':\n      case 'input-date':\n      case 'input-textarea':\n      case 'input-password':\n      case 'input-email':\n      case 'input-tel':\n      case 'input-number':\n      case 'input-hidden':\n      case 'input-text':\n      case 'input-text-common':\n      case 'input': {\n        formsManager.addField(this.getFormId(), this);\n      }\n      break;\n    }\n  }\n\n  /**\n   *\n   * @return {AltrpForm[]}\n   */\n  getForms(){\n    return this.forms;\n  }\n\n  /**\n   *\n   * @param {AltrpForm} form\n   */\n  addForm(form){\n    this.forms.push(form);\n  }\n  /**\n   * Возвращает массив потомков текущего элемента\n   * @return {array}\n   */\n\n  getChildren(){\n    return this.children;\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  getId(){\n    return this.id;\n  }\n\n  /**\n   * id для повторяющихся виджетов с действиями\n   * @return {string}\n   */\n  getIdForAction(){\n    if(! this.idForAction){\n      this.idForAction = altrpRandomId();\n    }\n    return this.idForAction;\n    let id = this.getId();//todo: delete this\n    if(this.getCurrentModel().getProperty('altrpIndex') !== ''){\n      id += `_${this.getCurrentModel().getProperty('altrpIndex')}`;\n    }\n    return id;\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  getName(){\n    return this.name;\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  getType(){\n    return this.type;\n  }\n\n  /**\n   * Получить настройку или все настройки\n   * @param {string} settingName\n   * @param {*} _default\n   * @return {*}\n   */\n  getSettings(settingName, _default = ''){\n    if(! settingName)\n    {\n      return _.cloneDeep(this.settings);\n    }\n    if(_.get(this.settings, settingName) === false || _.get(this.settings, settingName) === 0){\n      return _.get(this.settings, settingName);\n    }\n    return _.get(this.settings, settingName) || _default;\n  }\n  updateStyles(){\n    window.stylesModulePromise.then(stylesModule => {\n      /**\n       * @member {Styles} stylesModule\n       * */\n      // console.log(this.id);\n      // console.log(this.getId());\n      // console.log(this.getName());\n      // console.log(this.getType());\n      stylesModule.addElementStyles(this.getId(), this.getStringifyStyles());\n    });\n  }\n\n  /**\n   * Возвращает CSS-стили в виде строки\n   * для вставки в тег style текущего элемента\n   * @return {string}\n   */\n  getStringifyStyles(){\n    let styles = '';\n    if(typeof this.settings.styles !== 'object'){\n      return styles\n    }\n    /**\n     * Чтобы сохранить последовательность медиа-запросов в CSS,\n     * добавлять будем в первоначальной последовательности.\n     * Для этого сначала создадим копию массива со всеми настройками экранов\n     * @type {{}}\n     */\n    let screens = _.cloneDeep(CONSTANTS.SCREENS);\n    /**\n     * Удалим дефолтный - он не нужен\n     * @type {{}}\n     */\n    screens.splice(0,1);\n    for(let breakpoint in this.settings.styles){\n      let rules = {};\n      if(this.settings.styles.hasOwnProperty(breakpoint)){\n        for(let settingName in this.settings.styles[breakpoint]){\n          if(this.settings.styles[breakpoint].hasOwnProperty(settingName)) {\n            for(let selector in this.settings.styles[breakpoint][settingName]){\n              if(this.settings.styles[breakpoint][settingName].hasOwnProperty(selector)) {\n                rules[selector] = rules[selector] || [];\n                // console.log(this.settings.styles[breakpoint][settingName][selector]);\n                rules[selector] = rules[selector].concat(this.settings.styles[breakpoint][settingName][selector])\n              }\n            }\n          }\n        }\n        /**\n         * Оборачиваем в медиа запрос при необходимости\n         *\n         */\n        if(breakpoint === CONSTANTS.DEFAULT_BREAKPOINT){\n          for(let selector in rules){\n            if(rules.hasOwnProperty(selector)){\n              styles += `${selector} {` + rules[selector].join('') + '}';\n            }\n          }\n        } else {\n          // styles += `${getMediaQueryByName(breakpoint)}{`;\n          // for(let selector in rules){\n          //   if(rules.hasOwnProperty(selector)){\n          //     styles += `${selector} {` + rules[selector].join('') + '}';\n          //   }\n          // }\n          // styles += `}`;\n          screens.forEach(screen=>{\n            /**\n             * Для каждого breakpoint сохраним\n             * в соответствующей настройке экрана css правила\n             */\n            if(screen.name === breakpoint){\n              screen.rules = rules;\n            }\n          });\n        }\n      }\n    }\n\n    screens.forEach(screen=>{\n\n      /**\n       * Если rules записаны, то добавим в styles в нужном порядке\n       */\n      if(!_.isObject(screen.rules)){\n        return;\n      }\n      styles += `${screen.mediaQuery}{`;\n      for(let selector in screen.rules){\n        if(screen.rules.hasOwnProperty(selector)){\n          styles += `${selector} {` + screen.rules[selector].join('') + '}';\n        }\n      }\n      styles += `}`;\n    });\n    styles += this.settings.stringStyles || '';\n    if(this.settings.stringStyles){\n      console.log(this.settings.stringStyles);\n    }\n    return styles;\n  }\n\n  /**\n   * Возвращает css-селектор в виде строки\n   * @return {string}\n   */\n  getSelector(){\n    if(this.type === 'root-element'){\n      return `.altrp-template-root${this.getId()}`;\n    }\n    return `.altrp-element${this.getId()}`;\n  }\n\n  /**\n   * Возвращает количестве колонок в секции\n   * @return {*}\n   */\n  getColumnsCount(){\n    return this.children.length;\n  }\n\n  /**\n   *  Проводит валидацию поля, если это виджет input,\n   *  если другой виджет, то просто возвращает true\n   *  @return {boolean}\n   */\n  fieldValidate(){\n    if(INPUT_WIDGETS.indexOf(this.getName()) === -1){\n      return true;\n    }\n    if(! this.getSettings('content_required')){\n      return true;\n    }\n    if(_.has(this, 'maskIsValid')){\n      return this.getValue() && this.maskIsValid;\n    }\n    return this.getValue();\n  }\n\n  /**\n   * Проверяет рекурсивно (проверяет всех предков) виден ли элемент свойство elementDisplay пропсов компонента\n   * @return {boolean}\n   */\n  elementIsDisplay(){\n    let display = true;\n    if(this.getName() === 'root-element'){\n      return true;\n    }\n    if(this.component.props.elementDisplay || this.getSettings('conditional_ignore_in_forms')){\n      display = this.parent ? this.parent.elementIsDisplay() : true;\n    } else {\n      return false;\n    }\n    return display;\n  }\n\n  /**\n   * Возвращает значение если виджет input, если другое, то null\n   */\n  getValue(){\n\n    if(INPUT_WIDGETS.indexOf(this.getName()) === -1){\n      return null;\n    }\n    if(! this.elementIsDisplay()){\n      return null;\n    }\n    const settings = this.getSettings();\n    let value = this.component.state.value;\n    /**\n     * Если значение динамическое и не менялось в виджете,\n     * то используем метод this.getContent для получения значения, а не динмического объекта\n     */\n    if(value && value.dynamic){\n      value = this.getContent('content_default_value')\n    }\n    switch (this.getSettings('content_type')){\n      /**\n       * Если нужен массив\n       */\n      case 'checkbox':{\n        value = _.isArray(value) ? value : (value ? [value] : []);\n      }\n        break;\n      case 'accept':{\n        let trueValue = this.getSettings('accept_checked') || true;\n        let falseValue = this.getSettings('accept_unchecked') || false;\n        falseValue = valueReplacement(falseValue);\n        trueValue = valueReplacement(trueValue);\n        value = value ? trueValue : falseValue;\n      }\n        break;\n\n    }\n    return value;\n  }\n\n  /**\n   * Список моделей для шаблона включая модель Page\n   * @return {AltrpModelUpdater[]}\n   */\n  getModelsList(){\n    return this.getRoot().modelsList || [];\n  }\n\n  /**\n   * Имя модели\n   * из списка моделей извлекает имя модели не являющейся Page и возращает и это имя\n   * @return {string | null}\n   */\n  getModelName(){\n    let modelName = null;\n    this.getModelsList().forEach(modelInfo=>{\n      if(modelInfo.modelName!=='page' && ! modelInfo.related){\n        modelName = modelInfo.modelName\n      }\n    });\n    return modelName;\n  }\n\n  /**\n   * Получаем данные о модели (modelName и modelId) из корневого элемента по названию модели\n   * @param {string} modelName\n   * @return {{}}\n   */\n  getModelsInfoByModelName(modelName){\n    let modelsList = this.getModelsList();\n    let modelInfo = null;\n    modelsList.forEach(_modelInfo=>{\n      if(_modelInfo.modelName === modelName){\n        modelInfo = _modelInfo;\n      }\n    });\n    return modelInfo\n  }\n\n  /**\n   * @param {AltrpModelUpdater[]} modelsList\n   */\n  setModelsList(modelsList){\n    this.getRoot().modelsList = modelsList;\n  }\n  /**\n   * Добавляет информацию о модели в список моделей\n   * @param {{}} modelInfo\n   */\n  addModelInfo(modelInfo){\n    this.getRoot().modelsList = this.getRoot().modelsList || [];\n    this.getRoot().modelsList.push({...modelInfo})\n  }\n\n  /**\n   * Задайет id для всех моделей корневого элемента не являющихся моделью страницы (page)\n   * todo: нужно вызывать в элементе при смене роута в том случае если роут имеет id\n   * @param {int} id\n   */\n  setModelsIds(id){\n\n  }\n\n  /**\n   * Получает данные для контента элемента\n   * делегирует на this.component\n   * @param {string} settingName\n   * @return {*}\n   */\n  getContent(settingName){\n    if(this.component){\n      return this.component.getContent(settingName)\n    }\n    return'';\n  }\n\n  /**\n   * Сохраняет данные модели\n   * @param modelName\n   * @param data\n   */\n  setModelData(modelName, data){\n    this.modelsStorage = this.modelsStorage || {};\n    this.modelsStorage[modelName] = {...data};\n    if(this.modelCallbacksStorage && this.modelCallbacksStorage[modelName]){\n      this.modelCallbacksStorage[modelName](this.modelsStorage[modelName]);\n    }\n  }\n  /**\n   * Подписывает на изменения модели\n   */\n  onUpdateModelStorage(modelName, callback){\n    this.modelCallbacksStorage = this.modelCallbacksStorage || {};\n    this.modelCallbacksStorage[modelName] = callback;\n    if(this.modelsStorage && this.modelsStorage[modelName]){\n      callback(this.modelsStorage[modelName]);\n    }\n  }\n  /**\n   * Парсит объект и извлекает из него строку со всеми классами у которых есть свойство prefixClass\n   * @return {string}\n   */\n\n  getPrefixClasses() {\n    let changeCss = _.toPairs(this.cssClassStorage);\n    let classStorage = ' ';\n    changeCss.forEach(element => {\n      classStorage += `${element[1]} `;\n    });\n    return classStorage;\n  }\n\n  /**\n   * Модель для карточки внутри виджетов\n   * @param {AltrpModel} model\n   * @param {null | int} index\n   */\n  setCardModel(model, index = null) {\n    let rootElement = this.getRoot();\n    if(! model){\n      rootElement.cardModel = null;\n      rootElement.isCard = false;\n      return;\n    }\n    if(! model instanceof AltrpModel){\n      model = new AltrpModel(model);\n    }\n    index = Number(index);\n    // model.setProperty('altrpIndex', index);\n    rootElement.cardModel = model;\n    rootElement.isCard = true;\n  }\n\n  /**\n   * Есть ли данные модели для карточки\n   * @return {boolean}\n   */\n  hasCardModel(){\n    let rootElement = this.getRoot();\n    if(! rootElement){\n      return false;\n    }\n    return ! ! (rootElement.cardModel && rootElement.isCard)\n  }\n  /**\n   * Получить данные модели для карточки\n   * @return {AltrpModel}\n   */\n  getCardModel(){\n    let model;\n    if(this.getType() === 'root-element'){\n      model = this.cardModel;\n    } else {\n      model = this.getRoot().cardModel;\n    }\n    if(! model instanceof AltrpModel){\n      model = new AltrpModel(model);\n    }\n    return model;\n  }\n\n\n  /**\n   * Возвращает текущую модель для элемента\n   * (для карточки на странице будут свои модели)\n   * @return {AltrpModel}\n   */\n  getCurrentModel(){\n    return this.hasCardModel() ? this.getCardModel() : (appStore.getState().currentModel || new AltrpModel);\n  }\n\n  /**\n   * Получить id поля\n   * @param {string} setting если конртоллер имеет кастомное имя\n   */\n  getFieldId(setting=\"field_id\"){\n    let fieldId = this.getSettings(setting);\n    if(! fieldId){\n      return fieldId;\n    }\n    if(fieldId.indexOf('{{') !== -1){\n      fieldId = replaceContentWithData(fieldId, this.getCurrentModel().getData());\n    }\n    return fieldId;\n  }\n  /**\n   * Получить id поля\n   * @param {string} setting если конртоллер имеет кастомное имя\n   */\n  getFormId(setting=\"form_id\"){\n    let formId = this.getSettings(setting);\n    if(! formId){\n      return formId;\n    }\n    if(formId.indexOf('{{') !== -1 && this.component){\n      formId = replaceContentWithData(formId, this.getCurrentModel().getData());\n    }\n    return formId;\n  }\n\n  updateFonts(){\n    let fonts = _.get(this.settings,'__altrpFonts__',{});\n\n    fonts = _.toPairs(fonts);\n    fonts.forEach(([settingName, font])=>{\n      appStore.dispatch(addFont(this.getId(), settingName, font));\n    });\n  }\n\n  /**\n   * Получить данные динамических настроек\n   * @param {string} dynamicSettingName\n   * @return {{} | null}\n   */\n  getDynamicSetting(dynamicSettingName){\n    return _.get(this.settings, `altrpDynamicSetting.${dynamicSettingName}`, null);\n  }\n\n  /**\n   * значение настройки в зависимости от разрешения\n   * @param {string} settingName\n   * @param {string} elementState\n   * @param _default\n   * @return {*}\n   */\n  getResponsiveSetting(settingName, elementState = '', _default){\n    return getResponsiveSetting(this.getSettings(), settingName, elementState, _default)\n  }\n\n  /**\n   * Возвращает текущий тип шаблона\n   * @return {string}\n   */\n  getTemplateType(){\n    const rootElement = this.getRoot();\n    return rootElement ? (rootElement.templateType || 'content') : 'content';\n  }\n\n  /**\n   * Обновляем настройки элемента на фронте с обновлением компонента\n   * @param value\n   * @param settingName\n   */\n  updateSetting(value, settingName = ''){\n    let newSettings;\n    if(! settingName && _.isObject(value)){\n       newSettings = {..._.assign(this.settings, value)};\n    }\n    if(settingName){\n      newSettings = {...this.settings};\n      _.set(newSettings, settingName, value);\n    }\n    if(newSettings){\n      this.settings = newSettings;\n      if(this.component){\n        this.component.setState(state => ({...state, settings: newSettings}));\n      }\n    }\n  }\n}\n\nexport default FrontElement\n","export const ADD_FONT = 'ADD_FONT';\r\nexport const REMOVE_FONT = 'REMOVE_FONT';\r\n\r\n/**\r\n *\r\n * @param {string} elementId\r\n * @param {string} controllerName\r\n * @param {string} fontName\r\n * @return {{}} -\r\n *   {\r\n *     type: {string},\r\n *     metaValue: {},\r\n *     metaName: {string},\r\n *   }\r\n */\r\nexport function addFont(elementId, controllerName, fontName) {\r\n  return {\r\n    type: ADD_FONT,\r\n    elementId,\r\n    controllerName,\r\n    fontName\r\n  };\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} elementId\r\n * @param {string} controllerName\r\n * @return {{}} -\r\n *   {\r\n *     type: {string},\r\n *     metaValue: {},\r\n *     metaName: {string},\r\n *   }\r\n */\r\nexport function removeFont(elementId, controllerName, ) {\r\n  return {\r\n    type: REMOVE_FONT,\r\n    elementId,\r\n    controllerName,\r\n\r\n  };\r\n}\r\n"],"sourceRoot":""}