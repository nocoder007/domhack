{"version":3,"sources":["webpack:///./resources/modules/front-app/src/js/helpers.js","webpack:///./resources/modules/front-app/src/js/store/altrp-page-state-storage/actions.js","webpack:///./resources/modules/front-app/src/js/store/current-user/actions.js","webpack:///./resources/modules/front-app/src/js/store/responses-storage/actions.js"],"names":["defaultTitle","getRoutes","isSSR","window","SSR","e","iconsManager","setTitle","title","titleElement","document","innerHTML","isEditor","path","location","pathname","includes","parseOptionsFromSettings","string","options","split","_optionsFromData","getDataByPath","extractPathFromString","_","isArray","map","option","value","valuePath","trim","label","isString","labelPath","getMediaQueryByName","screenSettingName","mediaQuery","CONSTANTS","screen","name","getMediaSettingsByName","_screen","getCurrentBreakpoint","currentWidth","getWindowWidth","item","size","Number","width","breakpoint","parseURLTemplate","URLTemplate","object","url","protocol","assign","cloneDeep","currentRouterMatch","getProperty","indexOf","replaceContentWithData","replace","idTemplates","match","forEach","idTemplate","RegExp","getElementById","offsetWidth","renderAssetIcon","asset","props","type","assetType","renderIcon","React","createElement","src","renderAsset","isEmpty","dataUrl","rawSVG","File","refImg","createRef","fr","FileReader","readAsDataURL","onload","current","result","alt","ref","style","backgroundImage","undefined","parseParamsFromString","context","allowObject","replaceRight","AltrpModel","params","urlParams","lines","line","left","right","isObject","conditionsChecker","conditions","AND","model","dataByPath","length","each","c","conditionChecker","operator","modelField","altrpCompare","setDataByPath","dispatch","oldValue","appStore","getState","altrpPageState","isEqual","isFunction","changePageState","altrpMeta","changeAltrpMeta","currentUser","changeCurrentUserProperty","formId","fieldName","formsStore","get","changeFormFieldValue","pathElements","elementId","updateType","propName","component","getComponentByElementId","join","element","updateSetting","settings","mutate","addSettings","getId","getName","areaName","area","page_areas","find","id","Area","setSetting","currentStorage","getDataFromLocalStorage","set","saveDataToLocalStorage","trueValue","falseValue","_default","altrpCheck","_path","_right","currentModel","currentDataStorage","altrpresponses","altrpPage","queryData","queryString","href","query","getData","getTimeValue","getSettings","getSetting","getObjectByPrefix","prefix","key","mbParseJSON","JSON","parse","leftValue","rightValue","CONDITIONS_OPTIONS","isElementTopInViewport","top","scrollTop","clientHeight","getTopPosition","offsetTop","offsetParent","defaultValue","now","startOfMonth","Date","startOfYear","getPrevWeekStart","getNextWeekStart","getWeekStart","moment","altrpHelpers","format","date","monthShift","getFullYear","getMonth","yearShift","startOfWeek","weekShift","getDate","firstDayOfWeek","getCurrentStoreState","scrollToElement","scrollbars","container","HTMLElement","scroll","getOffsetTopInElement","parent","getHTMLElementById","elements","el","elementWrapperRef","toString","getWrapperHTMLElementByElement","today","daystoMonday","isoWeekday","add","subtract","daystoLastMonday","clearEmptyProps","content","modelContext","paths","escapeRegExp","printElements","myWindow","open","write","headContent","bodyContent","HTMLHeadElement","outerHTML","close","head","body","focus","delay","then","print","elementsToPdf","filename","html2pdf","default","success","Promise","resolve","reject","from","save","dataFromTable","data","headers","querySelectorAll","table","querySelector","ths","th","push","innerText","rows","row","cells","part","header","idx","dataToCSV","toPairs","csvContent","h","stringify","blob","Blob","charset","link","setAttribute","URL","createObjectURL","appendChild","click","removeChild","dataToXLS","templateName","formData","FormData","append","fetch","method","response","dataToXML","altrpLogin","Resource","route","post","res","status","__status","addResponseData","_token","getAll","changeCurrentUser","routes","routesData","pages","_data","Route","changeAppRoutes","console","error","altrpLogout","cutString","maxLength","slice","sortOptions","sortDirection","sort","a","b","toLowerCase","reverse","recurseCount","count","array","getAppContext","currentModelData","setProperty","storeWidgetState","widgetId","state","getWidgetState","localStorage","setItem","getItem","scrollbarWidth","scrollDiv","clientWidth","setAltrpIndex","altrpIndex","renderFontLink","font","altrpFontsSet","GOOGLE_FONT","fontUrl","encodeURI","rel","isAltrpTestMode","altrpRandomId","Math","random","substr","generateButtonsArray","pageIndex","pageCount","first_last_buttons_count","middle_buttons_count","buttonsSum","lastButtons","Array","i","middleButtons","floor","keys","isValueMatchMask","mask","every","char","index","getConverter","data_type","ArrayConverter","DataConverter","convertData","converter","isHidden","icon","defaultIcon","className","redirect","linkSettings","frontAppRouter","history","goBack","back","preventDefault","stopPropagation","openInNew","tag","validateEmail","email","test","String","getResponsiveSetting","settingName","currentScreen","elementState","trace","_settingName","setting","suffix","valueReplacement","ms","setTimeout","prepareURLForEmail","origin","parseIDFromYoutubeURL","youtubeURL","startIndex","endIndex","substring","prepareContext","altrpdata","altrpmodel","altrpuser","altrppagestate","altrpmeta","isJSON","JSONString","parseStringValue","getBreadcrumbsItems","breadcrumbsItems","items","currentId","page_id","currentPageId","appRoutes","breadcrumbsClone","idCurrent","parent_page_id","getParent","parentId","altrphelpers","sumFields","sum","this","CHANGE_PAGE_STATE","CLEAR_PAGE_STATE","stateName","stateValue","clearPageState","CHANGE_CURRENT_USER","SET_NOTICE_FOR_USER","SET_USERS_ONLINE","CHANGE_CURRENT_USER_PROPERTY","user","setUserNotice","notice","setUsersOnline","members","ADD_RESPONSE_DATA","CLEAR_ALL_RESPONSE_DATA","clearAllResponseData"],"mappings":"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","file":"6593.5e61037a68b0e496c5d1.bundle.js","sourcesContent":["import CONSTANTS from \"../../../editor/src/js/consts\";\nimport AltrpModel from \"../../../editor/src/js/classes/AltrpModel\";\nimport Resource from \"../../../editor/src/js/classes/Resource\";\nimport { changeCurrentUser } from \"./store/current-user/actions\";\nimport { changeCurrentUserProperty } from \"./store/current-user/actions\";\nimport { changeAppRoutes } from \"./store/routes/actions\";\nimport Route from \"./classes/Route\";\nimport { changePageState } from \"./store/altrp-page-state-storage/actions\";\nimport { changeAltrpMeta } from \"./store/altrp-meta-storage/actions\";\nimport queryString from \"query-string\";\nimport AltrpSVG from \"../../../editor/src/js/components/altrp-svg/AltrpSVG\";\nimport ArrayConverter from \"./classes/converters/ArrayConverter\";\nimport DataConverter from \"./classes/converters/DataConverter\";\nimport { changeFormFieldValue } from \"./store/forms-data-storage/actions\";\nimport { addResponseData } from \"./store/responses-storage/actions\";\nimport {getOffsetTopInElement} from \"./helpers/elements\";\nimport Area from \"./classes/Area\";\nimport {altrpFontsSet, GOOGLE_FONT} from \"./constants/fonts\";\nimport {addSettings} from \"./store/elements-settings/actions\";\nimport mutate from \"dot-prop-immutable\";\nexport function getRoutes() {\n\n  return import(/* webpackChunkName: 'Routes' */\"./classes/Routes.js\");\n}\n\nexport function isSSR(){\n  try {\n    return window.SSR;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * @return {IconsManager}\n * */\nexport function iconsManager() {\n  return window.iconsManager;\n}\n\n/**\n * Устанавливает заголовок страницы на фронтенде\n * @param {string} title\n */\nexport function setTitle(title) {\n  let titleElement = document.title;\n  if (!defaultTitle) {\n    defaultTitle = titleElement.innerHTML;\n  }\n  if (!title) {\n    title = defaultTitle;\n  }\n  if (document.title !== title) {\n    document.title = title;\n  }\n}\n\n/**\n * @return {boolean}\n * */\nexport function isEditor() {\n  const path = window.location?.pathname;\n  return path?.includes(\"/admin/editor\") || false;\n}\n\n/**\n * Переменная, в которой храниться изначальный заголовок\n * @let {string}\n */\nlet defaultTitle;\n\n/**\n * Парсит стрку вводимую пользователем для опций селекта\n * @param string\n */\nexport function parseOptionsFromSettings(string) {\n  if (!string) {\n    return [];\n  }\n  let options = string.split(\"\\n\");\n  let path = extractPathFromString(string);\n  let _optionsFromData = getDataByPath(path);\n  if (_.isArray(_optionsFromData)) {\n    return _optionsFromData;\n  }\n  options = options.map(option => {\n    let value = option.split(\"|\")[0];\n    value = value.trim();\n    let valuePath = extractPathFromString(value);\n    if (valuePath) {\n      value = getDataByPath(valuePath);\n    }\n    let label = option.split(\"|\")[1] || value || \"\";\n    !_.isString(label) && (label = \"\");\n    label = label.trim();\n    let labelPath = extractPathFromString(label);\n    if (labelPath) {\n      label = getDataByPath(labelPath);\n    }\n    return {\n      value,\n      label\n    };\n  });\n  return options;\n}\n\n/**\n * Получает медиа запрос для css по имени настройки\n * @param {string} screenSettingName\n * @return {string}\n */\nexport function getMediaQueryByName(screenSettingName) {\n  let mediaQuery = \"\";\n  CONSTANTS.SCREENS.forEach(screen => {\n    if (screen.name === screenSettingName) {\n      mediaQuery = screen.mediaQuery;\n    }\n  });\n  return mediaQuery;\n}\n/**\n * Получает медиа запрос для css по имени настройки\n * @param {string} screenSettingName\n * @return {string}\n */\nexport function getMediaSettingsByName(screenSettingName) {\n  let screen = CONSTANTS.SCREENS[0];\n  CONSTANTS.SCREENS.forEach(_screen => {\n    if (_screen.name === screenSettingName) {\n      screen = _screen;\n    }\n  });\n  return screen;\n}\n\n/**\n * Возвращает брейкпоинт относительно текущего размера экрана\n */\nexport function getCurrentBreakpoint() {\n  const currentWidth = getWindowWidth();\n  const breakPoints = CONSTANTS.SCREENS;\n  const breakPointsSizes = breakPoints.map(item => ({\n    name: item.name,\n    size: Number(item.width.split(\"px\")[0])\n  }));\n  for (let breakpoint of breakPointsSizes) {\n    if (breakpoint.size < currentWidth) {\n      return breakpoint.name;\n    }\n  }\n}\n/**\n *@param {string} URLTemplate\n *@param {{} | null} object\n */\nexport function parseURLTemplate(URLTemplate = \"\", object = null) {\n  let url = URLTemplate;\n  let protocol = \"\";\n  if (!isEditor()) {\n    object = _.assign(\n      _.cloneDeep(currentRouterMatch.getProperty(\"params\")),\n      object\n    );\n  }\n  url = url.trim();\n  if (url.indexOf(\"{{\") !== -1) {\n    url = replaceContentWithData(url, object);\n  }\n  if (url.indexOf(\"https://\") === 0) {\n    protocol = \"https://\";\n    url = url.replace(\"https://\", \"\");\n  }\n  if (url.indexOf(\"http://\") === 0) {\n    protocol = \"http://\";\n    url = url.replace(\"http://\", \"\");\n  }\n  if (url.indexOf(\"mailto:\") === 0) {\n    protocol = \"mailto:\";\n    url = url.replace(\"mailto:\", \"\");\n  }\n  if (url.indexOf(\"tel:\") === 0) {\n    protocol = \"tel:\";\n    url = url.replace(\"tel:\", \"\");\n  }\n  // columnEditUrl = columnEditUrl.replace(':id', row.original.id);\n  let idTemplates = url.match(/:([\\s\\S]+?)(\\/|$)/g);\n  if (!idTemplates) {\n    return protocol + url;\n  }\n  idTemplates.forEach(idTemplate => {\n    let replace = object[idTemplate.replace(/:|\\//g, \"\")] || \"\";\n    idTemplate = idTemplate.replace(\"/\", \"\");\n    url = url.replace(new RegExp(idTemplate, \"g\"), replace);\n  });\n  return protocol + url;\n}\n\nexport function getWindowWidth() {\n  let window;\n  if (isEditor()) {\n    window = document.getElementById(\"editorWindow\").offsetWidth;\n  } else {\n    window = document.getElementById(\"front-app\").offsetWidth;\n  }\n  return window;\n}\n\nexport function renderAssetIcon(asset, props = null) {\n  if (asset) {\n    if (asset.url && asset.type === \"svg\") {\n      return <AltrpSVG {...props} url={asset.url} />;\n    }\n    switch (asset.assetType) {\n      case \"icon\": {\n        return iconsManager().renderIcon(asset.name);\n      }\n      case \"image\": {\n        return React.createElement(\"img\", { ...props, src: asset.url });\n      }\n      case \"media\": {\n        return React.createElement(\"img\", { ...props, src: asset.url });\n      }\n    }\n  }\n  return \"\";\n}\n\n/**\n * @param {object} asset\n * @param {object} props\n * @return {React.DetailedReactHTMLElement<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> | React.DetailedReactHTMLElement<React.HTMLAttributes<T>, HTMLElement> | React.ReactSVGElement | React.DOMElement<React.DOMAttributes<T>, Element> | React.FunctionComponentElement<{}> | React.CElement<{}, React.ClassicComponent<{}, React.ComponentState>> | React.CElement<{}, React.Component<P, React.ComponentState>> | React.ReactElement<{}> | string}\n * @throws Исключение если иконка не найдена\n * */\nexport function renderAsset(asset, props = null) {\n  if(_.isEmpty(asset)){\n    return  ''\n  }\n  if(asset.type === 'image' && asset.dataUrl){\n    return React.createElement(\"img\", {\n      ...props,\n      src: asset.dataUrl,\n    });\n  }\n  if (asset.url && asset.type === \"svg\") {\n    return <AltrpSVG {...props} url={asset.url} rawSVG={asset.rawSVG} />;\n  }\n  if (! isSSR() && asset instanceof File) {\n    let refImg = React.createRef();\n    let fr = new FileReader();\n    fr.readAsDataURL(asset);\n    fr.onload = () => {\n      if (refImg.current) {\n        refImg.current.src = fr.result;\n        refImg.current.alt = asset.name;\n      }\n    };\n    return React.createElement(\"img\", {\n      ...props,\n      src: asset.url,\n      ref: refImg\n    });\n  }\n  switch (asset.assetType) {\n    case \"icon\": {\n      return iconsManager().renderIcon(asset.name, props);\n    }\n    case \"image\": {\n      return React.createElement(\"img\", { ...props, src: asset.url });\n    }\n    case \"media\": {\n      return React.createElement(\"img\", { ...props, src: asset.url });\n    }\n    case \"mediaBackground\": {\n      return React.createElement(\"div\", {\n        ...props,\n        style: { backgroundImage: `url(${asset.url})` }\n      });\n    }\n    case undefined: {\n      return React.createElement(\"img\", {\n        ...props,\n        src: \"/img/nullImage.png\"\n      });\n    }\n  }\n  return \"\";\n}\n\n/**\n * Парсим данный из строки в объект, если значение - путь, то берем значение из context\n * (если в context нет свойства, то не записываем)\n * @param {string} string\n * @param {AltrpModel} context\n * @param {boolean} allowObject\n * @param {boolean} replaceRight - нужно ли подставлять в значение параметра данные или оставить сырой шаблон\n * @param {boolean} replace - нужно ли подставлять в значение параметра данные или оставить сырой шаблон\n * @return {{}}\n */\nexport function parseParamsFromString(\n  string,\n  context = {},\n  allowObject = false,\n  replaceRight = true,\n  replace = true,\n) {\n  if (!(context instanceof AltrpModel)) {\n    context = new AltrpModel(context);\n  }\n  const params = {};\n  const urlParams =\n    window.currentRouterMatch instanceof AltrpModel\n      ? window.currentRouterMatch.getProperty(\"params\")\n      : {};\n\n  if (!string) {\n    return params;\n  }\n  const lines = string.split(\"\\n\");\n  lines.forEach(line => {\n    let [left, right] = line.split(\"|\");\n    if (!left || !right) {\n      return;\n    }\n    left = left.trim();\n    right = right.trim();\n    if (replace && left.indexOf(\"{{\") !== -1) {\n      left = replaceContentWithData(left);\n    }\n    if (replace && right.match(/{{([\\s\\S]+?)(?=}})/g)) {\n      if (\n        context.getProperty(\n          right.match(/{{([\\s\\S]+?)(?=}})/g)[0].replace(\"{{\", \"\")\n        ) ||\n        getDataByPath(right.match(/{{([\\s\\S]+?)(?=}})/g)[0].replace(\"{{\", \"\"))\n      ) {\n        //todo ошибка в IOS\n        params[left] =\n          context.getProperty(\n            right.match(/{{([\\s\\S]+?)(?=}})/g)[0].replace(\"{{\", \"\")\n          ) ||\n          getDataByPath(\n            right.match(/{{([\\s\\S]+?)(?=}})/g)[0].replace(\"{{\", \"\")\n          ) ||\n          \"\";\n      } else {\n        replaceRight\n          ? (params[left] = urlParams[\n              right.match(/{{([\\s\\S]+?)(?=}})/g)[0].replace(\"{{\", \"\")\n            ]\n              ? urlParams[\n                  right.match(/{{([\\s\\S]+?)(?=}})/g)[0].replace(\"{{\", \"\")\n                ]\n              : \"\")\n          : (params[left] = right);\n      }\n    } else {\n      params[left] = right;\n    }\n    if (!allowObject && _.isObject(params[left])) {\n      delete params[left];\n    }\n  });\n  return params;\n}\n\n/**\n * Функция для проверки условий\n * @param {array} conditions\n * @param {boolean} AND - логичекое И или ИЛИ\n * @param {AltrpModel} model\n * @param {boolean} dataByPath - брать ли данные из getDataByPath\n * @return {boolean}\n */\nexport function conditionsChecker(\n  conditions = [],\n  AND = true,\n  model,\n  dataByPath = true\n) {\n  if (!conditions.length) {\n    return true;\n  }\n  let result = AND;\n  _.each(conditions, c => {\n    if (AND) {\n      result *= conditionChecker(c, model, dataByPath);\n    } else {\n      result += conditionChecker(c, model, dataByPath);\n    }\n  });\n  return !!result;\n}\n\n/**\n * Функция для проверки одного условия\n * @param c\n * @param {AltrpModel} model\n * @param {boolean} dataByPath - брать ли данный из getDataByPath\n * @return {boolean}\n */\nfunction conditionChecker(c, model, dataByPath = true) {\n  let result = 0;\n  const { operator } = c;\n  let { modelField: left, value } = c;\n  if (dataByPath) {\n    value = getDataByPath(value, \"\", model, true);\n    left = getDataByPath(left, \"\", model);\n    return altrpCompare(left, value, operator);\n  }\n  return altrpCompare(model.getProperty(left), value, operator);\n  switch (operator) {\n    case \"empty\": {\n      return !model.getProperty(modelField, \"\");\n    }\n    case \"not_empty\": {\n      return !!model.getProperty(modelField, \"\");\n    }\n    case \"==\": {\n      return _.isEqual(model.getProperty(modelField, \"\"), value);\n    }\n    case \"<>\": {\n      return !_.isEqual(model.getProperty(modelField, \"\"), value);\n    }\n    case \">\": {\n      return Number(model.getProperty(modelField, \"\")) > Number(value);\n    }\n    case \">=\": {\n      return Number(model.getProperty(modelField, \"\")) >= Number(value);\n    }\n    case \"<\": {\n      return Number(model.getProperty(modelField, \"\")) < Number(value);\n    }\n    case \"<=\": {\n      return Number(model.getProperty(modelField, \"\")) <= Number(value);\n    }\n  }\n  return result;\n}\n\n/**\n * Установить данные\n * @param {string} path\n * @param {*} value\n * @param {function | null} dispatch\n * @return {boolean}\n */\nexport function setDataByPath(path = \"\", value, dispatch = null) {\n  if (!path) {\n    return false;\n  }\n  if (path.indexOf(\",\") !== -1) {\n    let result = path\n      .split(\",\")\n      .map(path => setDataByPath(path, value, dispatch));\n    return true;\n  }\n  path = path.replace(\"{{\", \"\").replace(\"}}\", \"\");\n  path = path.trim();\n  switch (value) {\n    case \"true\":\n      value = true;\n      break;\n    case \"false\":\n      value = false;\n      break;\n    case \"null\":\n      value = null;\n      break;\n    case \"undefined\":\n      value = undefined;\n      break;\n  }\n\n  if (path.indexOf(\"altrppagestate.\") === 0) {\n    path = path.replace(\"altrppagestate.\", \"\");\n    if (!path) {\n      return false;\n    }\n    const oldValue = appStore.getState().altrpPageState.getProperty(path);\n    if (_.isEqual(oldValue, value)) {\n      return true;\n    }\n    if (_.isFunction(dispatch)) {\n      dispatch(changePageState(path, value));\n    } else {\n      appStore.dispatch(changePageState(path, value));\n    }\n    return true;\n  }\n  if (path.indexOf(\"altrpmeta.\") === 0) {\n    path = path.replace(\"altrpmeta.\", \"\");\n    if (!path) {\n      return false;\n    }\n    const oldValue = appStore.getState().altrpMeta.getProperty(path);\n    if (_.isEqual(oldValue, value)) {\n      return true;\n    }\n    if (_.isFunction(dispatch)) {\n      dispatch(changeAltrpMeta(path, value));\n    } else {\n      appStore.dispatch(changeAltrpMeta(path, value));\n    }\n    return true;\n  }\n  if (path.indexOf(\"altrpuser.local_storage.\") === 0) {\n    path = path.replace(\"altrpuser.\", \"\");\n    if (!path) {\n      return false;\n    }\n    const oldValue = appStore.getState().currentUser.getProperty(path);\n    if (_.isEqual(oldValue, value)) {\n      return true;\n    }\n    if (_.isFunction(dispatch)) {\n      dispatch(changeCurrentUserProperty(path, value));\n    } else {\n      appStore.dispatch(changeCurrentUserProperty(path, value));\n    }\n    return true;\n  }\n  if (path.indexOf(\"altrpforms.\") === 0) {\n    path = path.replace(\"altrpforms.\", \"\");\n    if (!path) {\n      return false;\n    }\n    const [formId, fieldName] = path.split(\".\");\n    const { formsStore } = appStore.getState();\n\n    const oldValue = _.get(formsStore, path);\n    if (_.isEqual(oldValue, value)) {\n      return true;\n    }\n    if (_.isFunction(dispatch)) {\n      dispatch(changeFormFieldValue(path, value));\n    } else {\n      appStore.dispatch(changeFormFieldValue(fieldName, value, formId, true));\n    }\n  } else\n  if (path.indexOf(\"altrpelements.\") === 0) {\n    const pathElements = path.split(\".\");\n    let [prefix, elementId, updateType, ...propName] = pathElements;\n    const component = getComponentByElementId(elementId);\n    if (!component) {\n      return true;\n    }\n    propName =  propName.join('.');\n    switch (updateType) {\n      case \"settings\": {\n        component.props.element.updateSetting(value, propName);\n        if(window['h-altrp']){\n          let settings = component.props.element.settings;\n          settings = mutate.set(settings, propName, value)\n          appStore.dispatch(addSettings(component.props.element.getId(), component.props.element.getName(), settings));\n        }\n        return true;\n      }\n      default: {\n        return true;\n      }\n    }\n  } else\n  if (path.indexOf(\"altrpareas.\") === 0) {\n    const pathElements = path.split(\".\");\n    const [prefix,  areaName,  updateType, propName] = pathElements;\n    let area = window.page_areas.find(area => area.id === areaName);\n    if(area && updateType === 'settings'){\n      if(! (area instanceof Area)){\n        area = Area.areaFactory(area);\n      }\n      area.setSetting(propName, value);\n    }\n  } else\n  if (path.indexOf(\"altrpstorage.\") === 0) {\n    path = path.replace(\"altrpstorage.\", \"\");\n    const currentStorage = getDataFromLocalStorage(\"altrpstorage\", {});\n    _.set(currentStorage, path, value);\n    saveDataToLocalStorage(\"altrpstorage\", currentStorage);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Получить данные из окружения\n * @param {string} path\n * @param {*} _default\n * @param {{} | AltrpModel | null} context\n * @param {boolean} altrpCheck - проверять ли altrp\n * @return {*}\n */\nexport function getDataByPath(\n  path = \"\",\n  _default = null,\n  context = null,\n  altrpCheck = false\n) {\n  if (!path) {\n    return _default;\n  }\n  if (path.indexOf(\"{{\") !== -1) {\n    path = replaceContentWithData(path, context);\n  }\n  /**\n   * проверим путь\n   */\n  if (altrpCheck && path.trim().indexOf(\"altrp\") !== 0) {\n    return path;\n  }\n  path = path.trim();\n  let trueValue, falseValue;\n  if (path.indexOf(\"?\") !== -1 && path.indexOf(\":\") !== -1) {\n    let [_path, _right] = path.split(\"?\");\n    [trueValue, falseValue] = _right.split(\":\");\n    trueValue = trueValue.trim();\n    if (trueValue.indexOf(\".\") !== -1) {\n      trueValue = getDataByPath(trueValue, _default, context);\n    }\n\n    falseValue = falseValue.trim();\n    if (falseValue.indexOf(\".\") !== -1) {\n      falseValue = getDataByPath(falseValue, _default, context);\n    }\n    path = _path.trim();\n  }\n  /**\n   * @type {AltrpModel} currentModel\n   */\n  let {\n    currentModel,\n    currentDataStorage,\n    altrpresponses,\n    formsStore,\n    altrpPageState,\n    altrpPage,\n    currentUser,\n    altrpMeta\n  } = appStore.getState();\n  if (context) {\n    currentModel =\n      context instanceof AltrpModel ? context : new AltrpModel(context);\n  }\n  let urlParams =\n    window.currentRouterMatch instanceof AltrpModel\n      ? window.currentRouterMatch.getProperty(\"params\")\n      : {};\n\n  let queryData = queryString.parseUrl(window.location.href).query;\n\n  urlParams = _.assign(queryData, urlParams);\n\n  let value = _default;\n  if (!_.isString(path)) {\n    return value;\n  }\n  if (path.indexOf(\"altrpdata.\") === 0) {\n    path = path.replace(\"altrpdata.\", \"\");\n    value = currentDataStorage\n      ? currentDataStorage.getProperty(path, _default)\n      : \"\";\n  } else if (path.indexOf(\"altrpresponses.\") === 0) {\n    path = path.replace(\"altrpresponses.\", \"\");\n    value = altrpresponses ? altrpresponses.getProperty(path, _default) : \"\";\n  } else if (path.indexOf(\"altrpmeta.\") === 0) {\n    path = path.replace(\"altrpmeta.\", \"\");\n    value = altrpMeta ? altrpMeta.getProperty(path, _default) : \"\";\n  } else if (path.indexOf(\"altrppagestate.\") === 0) {\n    path = path.replace(\"altrppagestate.\", \"\");\n    value = altrpPageState ? altrpPageState.getProperty(path, _default) : \"\";\n  } else if (path.indexOf(\"altrpuser.\") === 0) {\n    path = path.replace(\"altrpuser.\", \"\");\n    value = currentUser ? currentUser.getProperty(path, _default) : \"\";\n  } else if (path === \"altrpuser\") {\n    value = currentUser.getData();\n  } else if (path === \"altrpmodel\") {\n    value = currentModel.getData();\n  } else if (path.indexOf(\"altrptime.\") === 0) {\n    value = getTimeValue(path.replace(\"altrptime.\", \"\"));\n  } else if (path.indexOf(\"altrpforms.\") === 0) {\n    value = _.get(formsStore, path.replace(\"altrpforms.\", \"\"), _default);\n  } else if (path.indexOf(\"altrppage.\") === 0) {\n    value = altrpPage\n      ? altrpPage.getProperty(path.replace(\"altrppage.\", \"\"), _default)\n      : \"\";\n  } else if (path.indexOf(\"altrpelements.\") === 0) {\n    const pathElements = path.split(\".\");\n    const [prefix, elementId, updateType, propName] = pathElements;\n    const component = getComponentByElementId(elementId);\n    if (!component) {\n      value = \"\";\n    } else {\n      switch (updateType) {\n        case \"settings\":\n          {\n            value = component.props.element.getSettings(propName);\n          }\n          break;\n        default: {\n          value = \"\";\n        }\n      }\n    }\n  } else if (path.indexOf(\"altrpstorage.\") === 0) {\n    path = path.replace(\"altrpstorage.\", \"\");\n    value = getDataFromLocalStorage(\"altrpstorage\", {});\n    value = _.get(value, path, _default);\n  } else if (path.indexOf(\"altrpareas.\") === 0) {\n    const pathElements = path.split(\".\");\n    const [prefix,  areaName,  updateType, propName] = pathElements;\n    let area = window.page_areas.find(area => area.id === areaName);\n    if(area && updateType === 'settings'){\n      if(! (area instanceof Area)){\n        area = Area.areaFactory(area);\n      }\n      value = area.getSetting(propName, _default);\n    }\n  } else {\n    value = currentModel.getProperty(path)\n      ? currentModel.getProperty(path)\n      : urlParams[path];\n    if (!value) {\n      value = _default;\n    }\n  }\n  if (trueValue || falseValue) {\n    value = value ? trueValue : falseValue;\n  }\n  return value;\n}\n\n/**\n * Извелкает путь из строки\n * @param {string} string\n * @return {string}\n */\nexport function extractPathFromString(string = \"\") {\n  let path = \"\";\n  if (_.isString(string)) {\n    // path = string.match(/(?<={{)([\\s\\S]+?)(?=}})/g)[0]\n    path = _.get(string.match(/{{([\\s\\S]+?)(?=}})/g), \"0\", \"\").replace(\n      \"{{\",\n      \"\"\n    );\n  }\n  return path;\n}\n/**\n * Возвращает новый объект из свояств объекта, в именах которых присутствует префикс prefix\n * @param {string} prefix - строка для поиска (например 'test')\n * @param {{}} object - если в объекте есть свойство test__test то вернет {test: test__test_value}\n * @return {{}}\n */\nexport function getObjectByPrefix(prefix = \"\", object = {}) {\n  let result = {};\n  if (!prefix) {\n    return result;\n  }\n  _.forEach(object, (value, key) => {\n    if (key.indexOf(`${prefix}__`, \"\") === 0) {\n      result[key.replace(`${prefix}__`, \"\")] = value;\n    }\n  });\n  return result;\n}\n\n/**\n * Возвращает объект из json-строки если возможно\n * @param {string} string\n * @param {*} _default\n * @return {*}\n */\nexport function mbParseJSON(string, _default = null) {\n  try {\n    return JSON.parse(string);\n  } catch (e) {\n    return _default === null ? string : _default;\n  }\n}\n\n/**\n * Функция для сравнения значений\n * @param leftValue\n * @param rightValue\n * @param operator\n * @return {boolean}\n */\nexport function altrpCompare(\n  leftValue = \"\",\n  rightValue = \"\",\n  operator = \"empty\"\n) {\n  switch (operator) {\n    case \"empty\": {\n      return _.isEmpty(leftValue);\n    }\n    case \"not_empty\": {\n      return !_.isEmpty(leftValue);\n    }\n    case \"null\": {\n      return !leftValue;\n    }\n    case \"not_null\": {\n      return !!leftValue;\n    }\n    case \"==\": {\n      if (!leftValue && !rightValue) {\n        return true;\n      }\n      if (!(_.isObject(leftValue) || _.isObject(rightValue))) {\n        return leftValue == rightValue;\n      } else {\n        return _.isEqual(leftValue, rightValue);\n      }\n    }\n    case \"===\": {\n      return _.isEqual(leftValue, rightValue);\n    }\n    case \"<>\": {\n      return !_.isEqual(leftValue, rightValue);\n    }\n    case \">\": {\n      return Number(leftValue) > Number(rightValue);\n    }\n    case \">=\": {\n      return Number(leftValue) >= Number(rightValue);\n    }\n    case \"<\": {\n      return Number(leftValue) < Number(rightValue);\n    }\n    case \"<=\": {\n      return Number(leftValue) <= Number(rightValue);\n    }\n    case \"in\": {\n      if (_.isString(rightValue)) {\n        return rightValue.indexOf(leftValue) !== -1;\n      }\n      if (!_.isArray(rightValue)) {\n        return false;\n      }\n      let result = false;\n      rightValue.forEach(item => {\n        if (!result) {\n          result = altrpCompare(leftValue, item, \"==\");\n        }\n      });\n      return result;\n    }\n    case \"not_in\": {\n      return !altrpCompare(leftValue, rightValue, \"in\");\n    }\n    case \"contain\": {\n      if (_.isString(leftValue)) {\n        return leftValue.indexOf(rightValue) !== -1;\n      }\n      if (!_.isArray(leftValue)) {\n        return false;\n      }\n      let result = false;\n      leftValue.forEach(item => {\n        if (!result) {\n          result = altrpCompare(rightValue, item, \"contain\");\n        }\n      });\n      return result;\n    }\n    case \"not_contain\": {\n      return !altrpCompare(leftValue, rightValue, \"contain\");\n    }\n  }\n}\n\nexport const CONDITIONS_OPTIONS = [\n  {\n    value: \"empty\",\n    label: \"Empty\"\n  },\n  {\n    value: \"not_empty\",\n    label: \"Not Empty\"\n  },\n  {\n    value: \"null\",\n    label: \"Null\"\n  },\n  {\n    value: \"not_null\",\n    label: \"Not Null\"\n  },\n  {\n    value: \"==\",\n    label: \"Equals\"\n  },\n  {\n    value: \"<>\",\n    label: \"Not Equals\"\n  },\n  {\n    value: \"between\",\n    label: \"Between\"\n  },\n  {\n    value: \">\",\n    label: \">\"\n  },\n  {\n    value: \">=\",\n    label: \">=\"\n  },\n  {\n    value: \"<\",\n    label: \"<\"\n  },\n  {\n    value: \"<=\",\n    label: \"<=\"\n  },\n  {\n    value: \"in\",\n    label: \"In\"\n  },\n  {\n    value: \"not_in\",\n    label: \"Not In\"\n  },\n  {\n    value: \"contain\",\n    label: \"Contain\"\n  },\n  {\n    value: \"not_contain\",\n    label: \"Not Contain\"\n  }\n];\n\nexport function isElementTopInViewport(top, scrollTop, clientHeight) {\n  return top > scrollTop && top < scrollTop + clientHeight;\n}\n\nexport function getTopPosition(element) {\n  let top = element.offsetTop;\n\n  while (element.offsetParent) {\n    element = element.offsetParent;\n    top += element.offsetTop;\n  }\n\n  return top;\n}\n\n/**\n * Получить какое-то время по шаблону `YYYY-MM-DD`\n * @param {string} path\n * @param {string | null} defaultValue\n */\nexport function getTimeValue(path, defaultValue = null) {\n  let value = defaultValue;\n\n  switch (path) {\n    case \"now\":\n      {\n        value = _.now();\n      }\n      break;\n    case \"month_start\":\n      {\n        value = startOfMonth(new Date());\n      }\n      break;\n    case \"prev_month_start\":\n      {\n        value = startOfMonth(new Date(), -1);\n      }\n      break;\n    case \"year_start\":\n      {\n        value = startOfYear(new Date());\n      }\n      break;\n    case \"prev_year_start\":\n      {\n        value = startOfYear(new Date(), -1);\n      }\n      break;\n    case \"prev_week_start\":\n      {\n        value = getPrevWeekStart();\n      }\n      break;\n    case \"next_week_start\":\n      {\n        value = getNextWeekStart();\n      }\n      break;\n    case \"week_start\":\n      {\n        value = getWeekStart();\n      }\n      break;\n  }\n  const {moment} = window.altrpHelpers;\n  value = moment(value).format(\"YYYY-MM-DD\");\n  return value;\n}\n\n/**\n * Получить начало месяца\n * @param {Date} date\n * @param {int} monthShift\n * @return {Date}\n */\nexport function startOfMonth(date, monthShift = 0) {\n  return new Date(date.getFullYear(), date.getMonth() + monthShift, 1);\n}\n/**\n * Получить начало месяца\n * @param {Date} date\n * @param {int} yearShift\n * @return {Date}\n */\nexport function startOfYear(date, yearShift = 0) {\n  return new Date(date.getFullYear() + yearShift, 0, 1);\n}\n/**\n * Получить начало месяца\n * @param {Date} date\n * @param {int} weekShift\n * @return {Date}\n */\nexport function startOfWeek(date, weekShift = 0) {\n  const {moment} = window.altrpHelpers;\n  return moment(\n    new Date(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate() + weekShift * 7\n    )\n  ).firstDayOfWeek();\n}\n\n/**\n * Получить ссылку на состояние хранилища\n * @return {*}\n */\nexport function getCurrentStoreState() {\n  return appStore.getState();\n}\n\n/**\n * Скроллит к элементу\n * @param {{} | HTMLElement}scrollbars\n * @param {{}}element\n */\nexport function scrollToElement(scrollbars, element) {\n  let { container } = scrollbars;\n  if(scrollbars instanceof HTMLElement){\n    container = scrollbars;\n    let scroll = getOffsetTopInElement(element, scrollbars);\n    if(scroll){\n      scrollbars.scrollTop =scroll;\n    }\n\n  }\n  /**\n   * @member {HTMLElement} container\n   */\n  if (!container) {\n    return;\n  }\n  if (!_.isFunction(scrollbars.scrollTop)) {\n    return;\n  }\n\n  let parent = element.offsetParent;\n  let top = element.offsetTop;\n\n  while (parent !== container) {\n    if (! parent) {\n      /**\n       * ушли в самый корень ДОМ и контейнер не встретился\n       */\n      return;\n    }\n    top += parent.offsetTop;\n    parent = parent.offsetParent;\n  }\n  /**\n   * не получили каеое-либо значение\n   */\n  if (! top) {\n    return;\n  }\n  scrollbars.scrollTop(top);\n}\n\n/**\n * Вернет HTML элемент React компонента, у которого id = elementId\n * @param {string} elementId\n * @return {null | HTMLElement}\n */\nexport function getHTMLElementById(elementId = \"\") {\n  let HTMLElement = null;\n  if (!elementId || !elementId.trim()) {\n    return HTMLElement;\n  }\n  elementId = elementId.trim();\n  appStore.getState().elements.forEach(el => {\n    if (!el.elementWrapperRef.current) {\n      return;\n    }\n    if (!el.elementWrapperRef.current.id) {\n      return;\n    }\n    if (\n      el.elementWrapperRef.current.id\n        .toString()\n        .split(\" \")\n        .indexOf(elementId) !== -1\n    ) {\n      HTMLElement = el.elementWrapperRef.current;\n    }\n  });\n  return HTMLElement;\n}\n\n/**\n * Вернет HTML  React компонента, у которого props.element = element\n * @param {FrontElement} element\n * @return {null | HTMLElement}\n */\nexport function getWrapperHTMLElementByElement(element) {\n  if (!element) {\n    return null;\n  }\n  let HTMLElement = null;\n  appStore.getState().elements.forEach(el => {\n    if (element === el.props.element) {\n      HTMLElement = el.elementWrapperRef.current;\n    }\n  });\n  return HTMLElement;\n}\n/**\n * Вернет HTML  React компонент, у которого elementWrapperRef.current.id = elementId\n * @param {string} elementId\n * @return {null | HTMLElement}\n */\nexport function getComponentByElementId(elementId = \"\") {\n  let component = null;\n  if (!elementId || !elementId.trim()) {\n    return component;\n  }\n  elementId = elementId.trim();\n  appStore.getState().elements.forEach(el => {\n    if (!el.elementWrapperRef.current) {\n      return;\n    }\n    if (!el.elementWrapperRef.current.id) {\n      return;\n    }\n    if (\n      el.elementWrapperRef.current.id\n        .toString()\n        .split(\" \")\n        .indexOf(elementId) !== -1\n    ) {\n      component = el;\n    }\n  });\n  return component;\n}\n\n/**\n * Начало следующей недели\n * @return {moment.Moment}\n */\nfunction getNextWeekStart() {\n  const {moment} = window.altrpHelpers;\n  let today = moment();\n  let daystoMonday = 7 - (today.isoWeekday() - 1);\n  return today.add(daystoMonday, \"days\");\n}\n\n/**\n * Начало текущей недели\n * @return {moment.Moment}\n */\nfunction getWeekStart() {\n  const {moment} = window.altrpHelpers;\n  let today = moment();\n  let daystoMonday = today.isoWeekday() - 1;\n  return today.subtract(daystoMonday, \"days\");\n}\n\n/**\n * Конец Следующей недели\n * @return {moment.Moment}\n */\nfunction getNextWeekEnd() {\n  let nextMonday = getNextWeekStart();\n  return nextMonday.add(\"days\", 6);\n}\n\n/**\n * Начало предыдущей недели\n * @return {moment.Moment}\n */\nfunction getPrevWeekStart() {\n  const {moment} = window.altrpHelpers;\n  let today = moment();\n  let daystoLastMonday = today.isoWeekday() - 1 + 7;\n  return today.subtract(daystoLastMonday, \"days\");\n}\n\n/**\n * Конец предыдущей недели\n * @return {moment.Moment}\n */\nfunction getPrevWeekEnd() {\n  let lastMonday = getPrevWeekStart();\n  return lastMonday.add(\"days\", 6);\n}\n\n/**\n * Удаляет пустые свойства в объектах\n */\nexport function clearEmptyProps() {}\n\n/**\n * Заменяет в тексте конструкции типа {{altrpdata...}} на данные\n * @param content\n * @param {{} | null} modelContext\n */\n\nexport function replaceContentWithData(content = \"\", modelContext = null) {\n  if(window.SSR){\n    return  content;\n  }\n  let paths = _.isString(content) ? content.match(/{{([\\s\\S]+?)(?=}})/g) : null;\n  if (_.isArray(paths)) {\n    paths.forEach(path => {\n      path = path.replace(\"{{\", \"\");\n      let value = getDataByPath(path, \"\", modelContext);\n      if (value === 0) {\n        value = \"0\";\n      }\n      path = escapeRegExp(path);\n      content = content.replace(new RegExp(`{{${path}}}`, \"g\"), value || \"\");\n    });\n  }\n  return content;\n}\n\n/**\n * Вспомогательные функции для работы с данными виджетов\n */\nwindow.altrphelpers = {\n  /**\n   * Возвращает сумму полей в массиве объектов\n   * @param {string}fieldName\n   * @return {number}\n   */\n  sumFields: function sumFields(fieldName) {\n    let sum = 0;\n    if (!_.isObject(this.context)) {\n      return sum;\n    }\n    if (!_.isArray(this.context)) {\n      this.context = [this.context];\n    }\n    this.context.forEach(c => {\n      sum += Number(_.get(c, fieldName)) || 0;\n    });\n    return sum;\n  }\n};\n\n/**\n * Функция выводит определенный элемент на печать\n * @params {HTMLElement[]} elements\n * @params {null || HTMLElement} stylesTag\n */\nexport function printElements(elements, title = \"\") {\n  let myWindow = window.open(\"\", \"my div\", \"height=400,width=1200\");\n  myWindow.document.write(`<html><head><title>${title}</title></head>`);\n  myWindow.document.write(\"<body >\");\n  elements = _.isArray(elements) ? elements : [elements];\n  let headContent = '';\n  myWindow.document.write(\"</body></html>\");\n  let bodyContent = '';\n  elements.forEach(element => {\n    if(element instanceof HTMLHeadElement){\n      headContent = element.innerHTML;\n      return\n    }\n    bodyContent += element.outerHTML;\n  });\n  myWindow.document.close(); // necessary for IE >= 10\n  myWindow.document.head.innerHTML = headContent;\n  bodyContent = bodyContent\n    .replace(/<tr/g, '<div className=\"altrp-table-tr\"')\n    .replace(/<th/g, '<div')\n    .replace(/<\\/tr>/g, '</div>')\n    .replace(/<\\/th>/g, '</div>')\n  myWindow.document.body.innerHTML = bodyContent;\n  myWindow.focus(); // necessary for IE >= 10\n  delay(250).then(()=>{\n    myWindow.print();\n    myWindow.close();\n  })\n  return true;\n}\n\n/**\n * Функция конвертирует HTML в PDF\n * @params {HTMLElement[]} element\n * @params {string} filename\n */\nexport async function elementsToPdf(elements, filename = \"\") {\n  let html2pdf = (await import(/* webpackChunkName: 'html2pdf' */\"html2pdf.js\")).default;\n  elements = elements.body ? elements.body : elements;\n  if (!elements) {\n    return {\n      success: true\n    };\n  }\n  let myWindow = window.open(\"\", \"my div\", \"height=400,width=1440\");\n  myWindow.document.write(`<html><head><title></title></head>`);\n  myWindow.document.write(\"</head><body >\");\n  elements = _.isArray(elements) ? elements : [elements];\n  elements.forEach(element => {\n    myWindow.document.write(element.outerHTML);\n  });\n  myWindow.document.write(\"</body></html>\");\n  return new Promise((resolve, reject) => {\n    html2pdf()\n      .from(myWindow.document.body)\n      .save(filename);\n    myWindow.close();\n    resolve({ success: true });\n  });\n}\n\n/**\n * Забирает данные из HTML таблицы\n * @param {{}}HTMLElement\n */\nexport function dataFromTable(HTMLElement) {\n  const data = [];\n  const headers = [];\n  if (!(HTMLElement && HTMLElement.querySelectorAll)) {\n    return data;\n  }\n  let table = HTMLElement.querySelector(\".altrp-table\");\n  if (!table && HTMLElement.querySelector(\".altrp-table-tr\")) {\n    table = HTMLElement;\n  }\n  if (!table) {\n    return data;\n  }\n  const ths = table.querySelectorAll(\".altrp-table-th\");\n  _.each(ths, th => {\n    // if (th.innerText) {\n    headers.push(th.innerText || \"\");\n    // }\n  });\n  const rows = table.querySelectorAll(\".altrp-table-tbody .altrp-table-tr\");\n  _.each(rows, row => {\n    const cells = row.querySelectorAll(\".altrp-table-td\");\n    const part = {};\n    headers.forEach((header, idx) => {\n      if (!header) {\n        return;\n      }\n      part[header] = cells[idx].innerText || \"\";\n    });\n    data.push(part);\n  });\n  return data;\n}\n\n/**\n * Создать csv-файл из данных и скачать\n * @param {{}} data\n * @param {string} filename\n */\nexport async function dataToCSV(data = {}, filename) {\n  filename = filename || \"File\";\n  if (!data) {\n    return { success: false };\n  }\n  if (_.isObject() && !_.isArray(data)) {\n    data = [data];\n  }\n  if (!_.isArray(data)) {\n    return { success: false };\n  }\n\n  let headers = _.toPairs(data[0]).map(([name, value]) => name);\n  let csvContent =\n    // 'data:text/csv;charset=utf-8,'\n    \"\" +\n    headers.join(\";\") +\n    \"\\n\" +\n    data\n      .map(item => {\n        let line = \"\";\n        headers.forEach((h, idx) => {\n          let value = _.get(item, h) || \"\";\n          if (_.isObject(value)) {\n            value = JSON.stringify(value);\n          }\n\n          line +=\n            (_.isString(value) ? value.replace(/\\s/g, \" \") : value) +\n            (headers.length === idx + 1 ? \"\" : \";\");\n        });\n        return line;\n      })\n      .join(\"\\n\");\n  let blob = new Blob([csvContent], {\n    type: \"text/csv\",\n    charset: \"windows-1251\"\n    // charset: 'utf-8',\n  });\n  let link = document.createElement(\"a\");\n  link.setAttribute(\"href\", window.URL.createObjectURL(blob));\n  link.setAttribute(\"download\", filename + \".csv\");\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  return { success: true };\n}\n\n/**\n * Генерация и загрузка XLS-файла\n * @param {Object data} Объект данных\n * @param {String} filename Имя файла\n */\nexport async function dataToXLS(data, filename = \"table\", templateName = \"\") {\n  const formData = new FormData();\n  formData.append(\"filename\", filename);\n  formData.append(\"data\", JSON.stringify(data));\n  formData.append(\"template\", templateName);\n\n  const response = await fetch(\"/api/export-excel\", {\n    method: \"POST\",\n    body: formData\n  });\n\n  return await response.blob();\n}\n\n/**\n * Генерация и загрузка XML-файла\n * @param {Object data} Объект данных\n * @param {String} filename Имя файла\n */\nexport async function dataToXML(data, filename = \"table\") {\n  const formData = new FormData();\n  formData.append(\"filename\", filename);\n  formData.append(\"data\", JSON.stringify(data));\n\n  const response = await fetch(\"/api/export-xml\", {\n    method: \"POST\",\n    body: formData\n  });\n\n  return await response.blob();\n}\n\n/**\n * Логиним пользователя\n * @param {{}} data\n * @param {string} formId\n * @return {Promise<{}>}\n */\nexport async function altrpLogin(data = {}, formId = \"login\") {\n  data.altrpLogin = true;\n  let res;\n  try {\n    res = await new Resource({ route: \"/login\" }).post(data);\n  } catch (error) {\n    let status = error.status;\n    if (error.res instanceof Promise) {\n      res = await error.res;\n    }\n    if (error instanceof Promise) {\n      res = await error;\n    }\n    res = mbParseJSON(res, {});\n    status && (res.__status = status);\n  }\n  appStore.dispatch(addResponseData(formId, res));\n  if (!(res.success || res._token)) {\n    return {\n      success: false\n    };\n  }\n  _token = res._token;\n\n  let currentUser = await new Resource({\n    route: \"/ajax/current-user\"\n  }).getAll();\n  currentUser = currentUser.data;\n  appStore.dispatch(changeCurrentUser(currentUser));\n  let routes = [];\n  try {\n    let routesData = await new Resource({\n      route: \"/ajax/routes\"\n    }).getAll();\n\n    for (let _data of routesData.pages) {\n      routes.push(Route.routeFabric(_data));\n    }\n    appStore.dispatch(changeAppRoutes(routes));\n  } catch (err) {\n    console.error(err);\n    return { success: false };\n  }\n  return { success: true };\n}\n\n/**\n * Выход\n * @return {Promise<{}>}\n */\nexport async function altrpLogout() {\n  let res = await new Resource({ route: \"/logout\" }).post();\n  if (!(res.success || res._token)) {\n    return {\n      success: false\n    };\n  }\n  _token = res._token;\n\n  let currentUser = await new Resource({\n    route: \"/ajax/current-user\"\n  }).getAll();\n  currentUser = currentUser.data;\n  appStore.dispatch(changeCurrentUser(currentUser));\n  let routes = [];\n  try {\n    let routesData = await new Resource({\n      route: \"/ajax/routes\"\n    }).getAll();\n\n    for (let _data of routesData.pages) {\n      routes.push(Route.routeFabric(_data));\n    }\n    appStore.dispatch(changeAppRoutes(routes));\n  } catch (err) {\n    console.error(err);\n    return { success: false };\n  }\n  return { success: true };\n}\n\nexport function cutString(string, maxLength = 80) {\n  if (string.length <= maxLength) return string;\n  return string.slice(0, maxLength) + \"...\";\n}\n\nexport function sortOptions(options, sortDirection) {\n  options.sort((a, b) =>\n    a.label.toLowerCase() > b.label.toLowerCase()\n      ? 1\n      : b.label.toLowerCase() > a.label.toLowerCase()\n      ? -1\n      : 0\n  );\n  return sortDirection === \"asc\" ? options : options.reverse();\n}\n/**\n * рекурсивно считает общую длину по пути\n * @param {{}} object\n * @param {string} path\n * @return {number}\n */\nexport function recurseCount(object = {}, path = \"\") {\n  let count = 0;\n  if (!path) {\n    return count;\n  }\n  let array = _.get(object, path, []);\n  if (!array.length) {\n    count++;\n    return count;\n  }\n  array.forEach(item => {\n    count += recurseCount(item, path);\n  });\n  return count;\n}\n\n/**\n * Вовращает AltrpModel, в котором храняться все источники данных на странице\n * @param {{}} model\n * @return {AltrpModel}\n */\nexport function getAppContext(model = null) {\n  const { currentModel } = appStore.getState();\n  if(model instanceof AltrpModel){\n    model = model.getData();\n  }\n  const currentModelData = model ? model : currentModel.getData();\n  const urlParams = _.cloneDeep(\n    window.currentRouterMatch instanceof AltrpModel\n      ? window.currentRouterMatch.getProperty(\"params\")\n      : {}\n  );\n  const context = new AltrpModel(_.assign(urlParams, currentModelData));\n  const {\n    altrpPageState,\n    altrpPage,\n    altrpMeta,\n    currentDataStorage,\n    currentUser,\n    altrpresponses,\n    formsStore\n  } = appStore.getState();\n\n  context.setProperty(\"altrpdata\", currentDataStorage);\n  context.setProperty(\"altrppagestate\", altrpPageState);\n  context.setProperty(\"altrpmeta\", altrpMeta);\n  context.setProperty(\"altrpuser\", currentUser);\n  context.setProperty(\"altrpresponses\", altrpresponses);\n  context.setProperty(\"altrpforms\", formsStore);\n  context.setProperty(\"altrppage\", altrpPage);\n  return context;\n}\n\n/**\n * Сохраняет состояние виджет в localStorage\n * Для виджетов ,которые могут сохранять состояния при смене страниц\n * @param {string} widgetId\n * @param {*} state\n * @return {boolean}\n */\nexport function storeWidgetState(widgetId, state = null) {\n  if (!widgetId) {\n    return false;\n  }\n  const path = `widget_state${widgetId}`;\n  return saveDataToLocalStorage(path, state);\n}\n/**\n * Забирает состояние из localStorage\n * Для виджетов ,которые могут сохранять состояния при смене страниц\n * @param {string} widgetId\n * @param {*} _default\n * @return {boolean}\n */\nexport function getWidgetState(widgetId, _default = null) {\n  if (!widgetId) {\n    return _default;\n  }\n  const path = `widget_state${widgetId}`;\n  return getDataFromLocalStorage(path, _default);\n}\n\n/**\n * Сохранить данные в localStorage\n * @param {string} name\n * @param {*} data\n * @return {boolean}\n */\nexport function saveDataToLocalStorage(name, data) {\n  if (!name) {\n    return false;\n  }\n  if (_.isObject(data)) {\n    data = JSON.stringify(data);\n  }\n  try {\n    localStorage.setItem(name, data);\n  } catch (e) {\n    return true;\n  }\n  return true;\n}\n/**\n * Сохранить данные в localStorage\n * @param {string} name\n * @param {*} _default\n * @return {*}\n */\nexport function getDataFromLocalStorage(name, _default = undefined) {\n  if (!name) {\n    return _default;\n  }\n  let value\n  try {\n    value = localStorage.getItem(name);\n    if (!value) {\n      return _default;\n    }\n    value = JSON.parse(value);\n  } catch (error) {\n  }\n  if (_.isString(value) && Number(value)) {\n    value = Number(value);\n  }\n  return value || _default;\n}\nexport function scrollbarWidth() {\n  // thanks too https://davidwalsh.name/detect-scrollbar-width\n  const scrollDiv = document.createElement(\"div\");\n  scrollDiv.setAttribute(\n    \"style\",\n    \"width: 100px; height: 100px; overflow: scroll; position:absolute; top:-9999px;\"\n  );\n  document.body.appendChild(scrollDiv);\n  const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n  document.body.removeChild(scrollDiv);\n  return scrollbarWidth;\n}\n\n/**\n * Добавляем свойство altrpIndex для всех эементов-объектов массива\n * для их идентификации внутри повторяющихся карточек\n * @param {[]} array\n */\nexport function setAltrpIndex(array = []) {\n  if (!_.isArray(array)) {\n    return;\n  }\n  array.forEach((item, idx) => {\n    if (!_.isObject(item)) {\n      return;\n    }\n    if (item instanceof AltrpModel) {\n      item.setProperty(\"altrpIndex\", idx);\n      return;\n    }\n    item.altrpIndex = idx;\n  });\n}\n\n/**\n *\n * @param {string} font\n * @return {*}\n */\nexport function renderFontLink(font) {\n  if (altrpFontsSet[font] !== GOOGLE_FONT) {\n    return null;\n  }\n  font = font.replace(/ /g, \"+\");\n  font +=\n    \":100,100italic,200,200italic,300,300italic,400,400italic,500,500italic,600,600italic,700,700italic,800,800italic,900,900italic\";\n  let fontUrl =\n    \"https://fonts.googleapis.com/css?family=\" + font + \"&subset=cyrillic\";\n  fontUrl = encodeURI(fontUrl);\n  return <link rel=\"stylesheet\" key={fontUrl} href={fontUrl} />;\n}\n\n/**\n * Включен ли режим тестирования\n */\nexport function isAltrpTestMode() {\n  return window.location.href.indexOf(\"altrp-test=true\") > 0;\n}\n\n/**\n * случайная строка\n * @return {string}\n */\nexport function altrpRandomId() {\n  return Math.random()\n    .toString(36)\n    .substr(2, 9);\n}\n\n/**\n * Кнопки для пагинации\n * @param pageIndex\n * @param pageCount\n * @param first_last_buttons_count\n * @param middle_buttons_count\n * @return {*[]}\n */\nexport function generateButtonsArray(\n  pageIndex,\n  pageCount,\n  first_last_buttons_count,\n  middle_buttons_count\n) {\n  const buttonsSum = first_last_buttons_count + middle_buttons_count;\n  const lastButtons = Array.from(\n    { length: first_last_buttons_count },\n    (_, i) => pageCount - i - 1\n  ).reverse();\n  const middleButtons = Array.from(\n    { length: middle_buttons_count },\n    (_, i) => pageIndex - Math.floor(middle_buttons_count / 2) + i\n  );\n\n  if (pageIndex + 1 < buttonsSum) {\n    return [...Array(buttonsSum).keys(), \"ellipsis\", ...lastButtons];\n  }\n  if (\n    pageIndex >=\n    pageCount -\n      first_last_buttons_count -\n      1 -\n      Math.floor(middle_buttons_count / 2)\n  ) {\n    return [\n      ...Array(first_last_buttons_count).keys(),\n      \"ellipsis\",\n      ...Array.from(\n        { length: first_last_buttons_count + middle_buttons_count },\n        (_, i) => pageCount - i - 1\n      ).reverse()\n    ];\n  }\n\n  return [\n    ...Array(first_last_buttons_count).keys(),\n    \"ellipsis\",\n    ...middleButtons,\n    \"ellipsis\",\n    ...lastButtons\n  ];\n}\n\n/**\n * Проверяем текст на соответствие маске\n * @param {string} value\n * @param {[]} mask\n * @return {boolean}\n */\nexport function isValueMatchMask(value, mask) {\n  if (!value || value.length !== mask.length) {\n    return false;\n  }\n  return (\n    value.length &&\n    value\n      .split(\"\")\n      .every((char, index) => char === mask[index] || char.match(mask[index]))\n  );\n}\n\n/**\n * Вернуть экземпляр конвертера необходимого типа (array - ArrayConverter и т. д.)\n * @return {DataConverter}\n */\nexport function getConverter(data) {\n  switch (data.data_type) {\n    case \"array\":\n      return new ArrayConverter(data);\n  }\n  return new DataConverter();\n}\n\n/**\n * Конвертируются данные\n * @param {{} | []} settings\n * @param {*} data\n */\nexport function convertData(settings, data) {\n  if (_.isArray(settings)) {\n    settings.forEach(item => {\n      const converter = getConverter(item);\n      data = converter.convertData(data);\n    });\n  }\n  if (settings.data_type) {\n    const converter = getConverter(settings);\n    data = converter.convertData(data);\n  }\n  return data;\n}\nexport function renderIcon(isHidden, icon, defaultIcon, className) {\n  if (isHidden) return null;\n\n  return (\n    <span className={className}>\n      {icon && icon.assetType ? renderAssetIcon(icon) : defaultIcon}\n    </span>\n  );\n  // if()\n}\n\n/**\n * Перенаправление на другую страницу по настройкам LinkController\n * @param {{}} linkSettings\n * @param {{}} e\n * @param {{}} context\n */\nexport function redirect(linkSettings, e, context = {}) {\n  if (_.get(linkSettings, \"toPrevPage\")) {\n    if(window.frontAppRouter){\n      frontAppRouter.history.goBack();\n    } else {\n      history.back();\n    }\n    return;\n  }\n  if (!_.get(linkSettings, \"url\")) {\n    return;\n  }\n  e.preventDefault();\n  e.stopPropagation();\n  let { url } = linkSettings;\n  url = replaceContentWithData(url, context);\n  if (linkSettings.openInNew) {\n    window.open(url, \"_blank\");\n    return;\n  }\n  if (linkSettings.tag === \"a\" || ! window.frontAppRouter) {\n    window.location.assign(url);\n  } else {\n    frontAppRouter.history.push(url);\n  }\n\n}\n\nexport function validateEmail(email) {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@']+(\\.[^<>()[\\]\\\\.,;:\\s@']+)*)|('.+'))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}\n\n/**\n * значение настройки в зависимости от разрешения можно использовать вне виджетов с объектом настроек\n * @param {{}} settings - объект настроек\n * @param {string} settingName\n * @param {string} elementState\n * @param {*} _default\n * @return {*}\n */\nexport function getResponsiveSetting(\n  settings,\n  settingName,\n  elementState = \"\",\n  _default = null\n) {\n  let  currentScreen\n  try{\n    currentScreen = window.parent.appStore.getState().currentScreen\n  } catch(e){\n    console.trace(e);\n    currentScreen = window.appStore.getState().currentScreen\n  }\n  let _settingName = `${settingName}_${elementState}_`;\n  if (currentScreen.name === CONSTANTS.DEFAULT_BREAKPOINT) {\n    let setting = settings[_settingName];\n\n    if (setting === undefined) {\n      if(elementState){\n        return undefined\n      }\n      setting = _.get(settings, settingName, _default);\n    }\n    return setting;\n  }\n  let suffix = currentScreen.name;\n  _settingName = `${settingName}_${elementState}_${suffix}`;\n  let setting = settings[_settingName];\n  if (setting === undefined) {\n    for (let screen of [...CONSTANTS.SCREENS].reverse()) {\n      if (\n        currentScreen.id < screen.id ||\n        screen.name === CONSTANTS.DEFAULT_BREAKPOINT\n      ) {\n        continue;\n      }\n\n      _settingName = `${settingName}_${elementState}_${screen.name}`;\n\n      if (settings[_settingName] !== undefined) {\n        setting = settings[_settingName];\n        break;\n      }\n    }\n  }\n\n\n\n  if (setting === undefined) {\n    if(elementState){\n      return undefined\n    }\n    setting = _.get(settings, settingName, _default);\n  }\n  return setting;\n}\n\n/**\n * Заменяет false, null, true в строке на соответствующие значения\n * @param {string} value\n * @return {*}\n */\nexport function valueReplacement(value) {\n  switch (value) {\n    case \"true\":\n      return true;\n    case \"false\":\n      return false;\n    case \"null\":\n      return null;\n  }\n  return value;\n}\n\n/**\n * Задержка и с интерфейсом промиса\n * @param ms\n * @return {Promise}\n */\nexport function delay(ms) {\n  if (_.isString(ms)) {\n    ms = Number(ms);\n  }\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, ms);\n  });\n}\n\n/**\n * Подготавливает URL для шаблона письма\n * @param {string} url\n * @param {{} | null} context\n * @return {string}\n */\nexport function prepareURLForEmail(url, context = null) {\n  if (!_.isString(url) || !url) {\n    return url;\n  }\n  url = url.trim();\n  if (url.indexOf(\"http\") !== 0) {\n    url = location.origin + url;\n  }\n  return parseURLTemplate(url, context);\n}\n\nexport function parseIDFromYoutubeURL(youtubeURL) {\n  const startIndex = youtubeURL.indexOf(\"v=\") + 2;\n  const endIndex = youtubeURL.indexOf(\"&\", startIndex);\n\n  return youtubeURL.substring(startIndex, endIndex);\n}\n\n/**\n *\n * @param {{}} context\n * @return {{}}\n */\nexport function prepareContext(context) {\n  context.altrpdata = appStore.getState().currentDataStorage.getData();\n  context.altrpmodel = appStore.getState().currentModel.getData();\n  context.altrpuser = appStore.getState().currentUser.getData();\n  context.altrppagestate = appStore.getState().altrpPageState.getData();\n  context.altrpresponses = appStore.getState().altrpresponses.getData();\n  context.altrpmeta = appStore.getState().altrpMeta.getData();\n  return context;\n}\n\n/**\n *\n * Определеят явлется ли строка валидным JSON\n * @param {string} JSONString\n * @return {boolean}\n */\nexport function isJSON(JSONString = \"\") {\n  try {\n    JSON.parse(JSONString);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Парсит xml строку в объект\n * @param xml\n * @param arrayTags\n */\nfunction parseXml(xml, arrayTags) {\n  let dom = null;\n  if (window.DOMParser) dom = new DOMParser().parseFromString(xml, \"text/xml\");\n  else if (window.ActiveXObject) {\n    dom = new ActiveXObject(\"Microsoft.XMLDOM\");\n    dom.async = false;\n    if (!dom.loadXML(xml))\n      throw dom.parseError.reason + \" \" + dom.parseError.srcText;\n  } else throw new Error(\"cannot parse xml string!\");\n\n  function parseNode(xmlNode, result) {\n    if (xmlNode.nodeName === \"#text\") {\n      let v = xmlNode.nodeValue;\n      if (v.trim()) result[\"#text\"] = v;\n      return;\n    }\n\n    let jsonNode = {},\n      existing = result[xmlNode.nodeName];\n    if (existing) {\n      if (!Array.isArray(existing))\n        result[xmlNode.nodeName] = [existing, jsonNode];\n      else result[xmlNode.nodeName].push(jsonNode);\n    } else {\n      if (arrayTags && arrayTags.indexOf(xmlNode.nodeName) !== -1)\n        result[xmlNode.nodeName] = [jsonNode];\n      else result[xmlNode.nodeName] = jsonNode;\n    }\n\n    if (xmlNode.attributes)\n      for (let attribute of xmlNode.attributes)\n        jsonNode[attribute.nodeName] = attribute.nodeValue;\n\n    for (let node of xmlNode.childNodes) parseNode(node, jsonNode);\n  }\n\n  let result = {};\n  for (let node of dom.childNodes) parseNode(node, result);\n\n  return result;\n}\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n}\n\n/**\n * Вернуть значение из строки\n * @param string\n */\nexport function parseStringValue(string) {\n  let value = string;\n\n  if (Number(value)) {\n    return Number(value);\n  }\n  switch (value) {\n    case \"true\": {\n      return true;\n    }\n    case \"false\": {\n      return false;\n    }\n    case \"null\": {\n      return null;\n    }\n    case \"undefined\": {\n      return undefined;\n    }\n    case \"0\": {\n      return 0;\n    }\n  }\n  return value;\n}\n\n/**\n *\n * @return {*[]}\n */\nexport function getBreadcrumbsItems(){\n  if(window['h-altrp'] && window.breadcrumbsItems){\n    return window.breadcrumbsItems;\n  }\n  let items = [];\n  if(isEditor(0)){\n    return items;\n  }\n  const currentId = window['h-altrp'] ? window.page_id : window.currentPageId\n  const {routes} = appStore.getState().appRoutes\n  let breadcrumbsClone = [];\n  let idCurrent = 0;\n  routes.forEach((route, idx) => {\n    if(currentId === route.id) {\n      idCurrent = idx\n    }\n  })\n\n  breadcrumbsClone.push(routes[idCurrent])\n\n  function getParent(parentId) {\n    routes.forEach(route => {\n      if(route.id === parentId) {\n        breadcrumbsClone.push(route)\n        if(route.parent_page_id) {\n          getParent(route.parent_page_id)\n        }\n      }\n    })\n  }\n\n  if(routes[idCurrent].parent_page_id) {\n    getParent(routes[idCurrent].parent_page_id)\n  }\n\n  items = breadcrumbsClone.reverse()\n  if(window['h-altrp']){\n    window.breadcrumbsItems = items;\n  }\n  return items;\n}\n","export const CHANGE_PAGE_STATE = 'CHANGE_PAGE_STATE';\r\nexport const CLEAR_PAGE_STATE = 'CLEAR_PAGE_STATE';\r\n\r\n/**\r\n *\r\n * @param {string}stateName\r\n * @param {*} stateValue\r\n * @return {{}} -\r\n *   {\r\n *     type: {string},\r\n *     stateValue: {},\r\n *     stateName: {string},\r\n *   }\r\n */\r\nexport function changePageState(stateName, stateValue = {}) {\r\n  return {\r\n    type: CHANGE_PAGE_STATE,\r\n    stateName,\r\n    stateValue\r\n  };\r\n}\r\n/**\r\n * Очищает состояние страницы\r\n */\r\nexport function clearPageState() {\r\n  return {\r\n    type: CLEAR_PAGE_STATE,\r\n  };\r\n}\r\n","export const CHANGE_CURRENT_USER = 'CHANGE_CURRENT_USER';\r\nexport const SET_NOTICE_FOR_USER = 'SET_NOTICE_FOR_USER';\r\nexport const SET_USERS_ONLINE = 'SET_USERS_ONLINE';\r\nexport const CHANGE_CURRENT_USER_PROPERTY = \"CHANGE_CURRENT_USER_PROPERTY\";\r\n\r\nexport function changeCurrentUser(user) {\r\n  return {\r\n    type: CHANGE_CURRENT_USER,\r\n    user: user || {}\r\n  };\r\n}\r\n\r\nexport function setUserNotice(notice){\r\n  return { type: SET_NOTICE_FOR_USER, notice }\r\n}\r\n\r\nexport function setUsersOnline(members){\r\n  return { type: SET_USERS_ONLINE, members }\r\n}\r\n\r\nexport function changeCurrentUserProperty(path, value) {\r\n  return {\r\n    type: CHANGE_CURRENT_USER_PROPERTY,\r\n    path: path || \"\",\r\n    value: value || \"\"\r\n  };\r\n}\r\n","export const ADD_RESPONSE_DATA = 'ADD_RESPONSE_DATA';\r\nexport const CLEAR_ALL_RESPONSE_DATA = 'CLEAR_ALL_RESPONSE_DATA';\r\n\r\n/**\r\n * Сохраняет ответ сервера при отправке формы в хранилище\r\n * @param {string}formId\r\n * @param {{}} data\r\n * @return {{}} -\r\n *   {\r\n *     type: {string},\r\n *     dataStorage: {object},\r\n *     dataStorageName: {string},\r\n *   }\r\n */\r\nexport function addResponseData(formId, data = {}) {\r\n  if(data.data) {\r\n    data = data.data;\r\n  }\r\n  return {\r\n    type: ADD_RESPONSE_DATA,\r\n    data,\r\n    formId\r\n  };\r\n}\r\n\r\n\r\n/**\r\n * Очищает хранилище\r\n * @return {{type: string}}\r\n */\r\nexport function clearAllResponseData(){\r\n  return {\r\n    type: CLEAR_ALL_RESPONSE_DATA,\r\n  };\r\n}\r\n\r\n"],"sourceRoot":""}