{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/editor/src/js/components/altrp-image-select/AltrpImageSelect.js","webpack:///./resources/modules/editor/src/js/components/widgets/InputImageSelectWidget.js"],"names":["AltrpModel","data","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","value","getData","set","unset","window","AltrpImageSelect","props","options","changeHandler","isMultiple","className","map","option","key","id","includes","onClick","filter","item","image","src","url","width","label","Component","moment","altrpHelpers","globalDefaults","push","AltrpFieldContainer","styled","div","settings","content_label_position_type","InputImageSelectWidget","timeInput","handleEnter","e","keyCode","preventDefault","inputs","Array","from","document","querySelectorAll","index","indexOf","target","undefined","focus","element","getSettings","create_allowed","create_label","create_url","createItem","debounceDispatch","_","debounce","dispatchFieldValueToStore","onFocus","focus_actions","isEditor","actionsManager","default","callAllWidgetActions","getIdForAction","onBlur","editor","userInput","formId","getFormId","fieldName","getFieldId","replaceContentWithData","isObject","appStore","dispatch","changeFormFieldValue","change_actions","inputValue","create_data","select2_multiple","currentModel","getCurrentModel","parseParamsFromString","parseURLTemplate","setState","state","isDisabled","resource","Resource","route","post","res","success","newOption","unshift","selectStateManager","menuIsOpen","console","error","component","elementDecorator","onChange","bind","getContent","valueMustArray","isArray","parseOptionsFromSettings","paramsForUpdate","altrpSelectRef","React","createRef","optionsDynamicSetting","getDynamicSetting","convertData","prevProps","prevState","getProperty","contentLoaded","currentDataStorage","content_options","model_for_options","isEqual","dynamic","formsStore","updateOptions","updateValue","content_calculation","altrpforms","prevContext","altrpdata","altrpmodel","altrpuser","currentUser","altrppagestate","altrpPageState","altrpresponses","altrpmeta","altrpMeta","context","currentDataStorageLoaded","changedField","altrpstorage","getDataFromLocalStorage","replace","eval","message","getId","path","formData","JSON","stringify","getRoute","getQueried","filters","getAll","valueToDispatch","change_change_end","change_change_end_delay","clearTimeout","setTimeout","sortBy","o","toString","image_select_options","options_sorting","content_readonly","label_icon","classLabel","styleLabel","getResponsiveSetting","marginBottom","label_style_spacing","size","unit","marginTop","marginRight","position","zIndex","content_label","style","content_required","assetType","renderAssetIcon","content_autocomplete","input"],"mappings":"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","file":"InputImageSelect.c5873f5a5241bbc9236f.bundle.js","sourcesContent":["/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","import React, { Component } from 'react';\r\n\r\nclass AltrpImageSelect extends Component {\r\n  render() {\r\n    const { options, changeHandler, isMultiple, value } = this.props;\r\n\r\n    return <div className=\"altrp-image-select\">\r\n      {options?.map(option => <div key={option.id}\r\n        className={`altrp-field altrp-field-container \r\n          ${(isMultiple && value.includes(option.value) || value === option.value ? \"active\" : \"\")}`}\r\n        onClick={() => changeHandler(isMultiple ?\r\n          value.includes(option.value) ? value.filter(item => item !== option.value) : [...value, option.value] :\r\n          option.value)}\r\n      >\r\n        {option.image && <img src={option.image.url} width={\"100%\"} />}\r\n        <div className=\"altrp-image-select__label\">{option.label}</div>\r\n      </div>)}\r\n    </div>\r\n  }\r\n}\r\nexport default AltrpImageSelect;\r\n","import {\n  convertData,\n  isEditor,\n  parseOptionsFromSettings,\n  parseParamsFromString,\n  parseURLTemplate,\n  replaceContentWithData,\n  renderAssetIcon,\n  valueReplacement,\n  getDataFromLocalStorage\n} from \"../../../../../front-app/src/js/helpers\";\nimport Resource from \"../../classes/Resource\";\nimport { changeFormFieldValue } from \"../../../../../front-app/src/js/store/forms-data-storage/actions\";\nimport AltrpModel from \"../../classes/AltrpModel\";\nimport AltrpImageSelect from \"../altrp-image-select/AltrpImageSelect\";\n\nconst { moment } = window.altrpHelpers;\n(window.globalDefaults = window.globalDefaults || []).push(`\n.altrp-field {\n  border-style: solid;\n  width: 100%;\n}\n.altrp-field-file{\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n}\n\n.altrp-label-icon svg,\n.altrp-label-icon img {\n  width: 20px;\n}\n.altrp-label-icon svg{\n  height: 20px;\n}\n.altrp-field-file__field{\n  display: none;\n}\n.altrp-field-file__placeholder{\n  display: none;\n}\n.altrp-field-file_empty .altrp-field-file__placeholder{\n  display: block;\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n  background-color: rgb(52,59,76);\n  color: #fff;\n}\n.input-clear-btn {\n  background: transparent;\n  padding: 0;\n  position: absolute;\n  bottom: calc(50% - 7px);\n  right: 15px;\n  display: none;\n}\n.input-clear-btn:hover {\n  font-weight: bold;\n}\n.altrp-field:hover + .input-clear-btn, .input-clear-btn:hover {\n  display: block;\n}\n.altrp-input-wrapper, .altrp-field-select2 {\n  position: relative;\n  flex-grow: 1;\n}\n.altrp-field-label--required::after {\n  content: \"*\";\n  color: red;\n  font-size: inherit;\n  padding-left: 10px;\n}\n.altrp-field-label {\n  font-size: 16px;\n  font-family: \"Open Sans\";\n  line-height: 1.5;\n  letter-spacing: 0;\n}\n.altrp-field-select2__single-value, .altrp-field {\n  font-size: 16px;\n  font-family: \"Open Sans\";\n  line-height: 1.5;\n  letter-spacing: 0;\n}\n.altrp-field-select2__control, .altrp-field {\n  text-align: left;\n  padding-top: 2px;\n  padding-right: 2px;\n  padding-bottom: 2px;\n  padding-left: 2px;\n  border-width: 1px;\n}\n.altrp-field-select2__control:hover{\n  border-width: 1px;\n}\n.altrp-field-container {\n  margin: 0;\n}\n.altrp-field::placeholder, .altrp-field-select2__placeholder {\n  font-size: 13px;\n  font-family: \"Open Sans\";\n  line-height: 1.5;\n  letter-spacing: 0;\n}\n.altrp-image-select {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n.altrp-image-select img {\n  flex-grow: 1;\n  object-fit: contain;\n}\n.altrp-field {\n  overflow: hidden;\n  cursor: pointer;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n.altrp-field.active {\n  border-color: lightcoral;\n}\n.altrp-field-label {\n  text-align: center;\n  display: block;\n}\n.altrp-pagination__select-size .altrp-field-select2__single-value {\n  font-size: 14px;\n}\n.altrp-pagination__select-size .altrp-field-select2__indicator-separator {\n  display: none;\n}\n.altrp-pagination__select-size .altrp-field-select2__indicator {\n  align-items: center;\n}\n.altrp-pagination__select-size .altrp-field-select2__control {\n  width: 100px;\n  min-height: 32px;\n  padding: 0;\n  border-radius: 0;\n  outline: none;\n  border-color: rgb(142,148,170);\n  -webkit-box-shadow: none;\n  -moz-box-shadow: none;\n  box-shadow: none;\n}\n.altrp-pagination__select-size .altrp-field-select2__control input {\n  border: none;\n}\n.altrp-field-select2 {\n  position: relative;\n  box-sizing: border-box;\n  pointer-events: none;\n}\n.altrp-field-select2__control {\n  webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  background-color: hsl(0,0%,100%);\n  border-color: hsl(0,0%,80%);\n  border-style: solid;\n  border-width: 1px;\n  cursor: default;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-wrap: wrap;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  -webkit-box-pack: justify;\n  -webkit-justify-content: space-between;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n  min-height: 38px;\n  outline: 0 !important;\n  position: relative;\n  -webkit-transition: all 100ms;\n  transition: all 100ms;\n  box-sizing: border-box;\n}\n.altrp-field-select2__value-container {\n  -webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  -webkit-flex-wrap: wrap;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  padding: 2px 8px;\n  -webkit-overflow-scrolling: touch;\n  position: relative;\n  overflow: hidden;\n  box-sizing: border-box;\n}\n.altrp-field-select2__single-value {\n  color: hsl(0,0%,20%);\n  margin-left: 2px;\n  margin-right: 2px;\n  max-width: calc(100% - 8px);\n  overflow: hidden;\n  position: absolute;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  top: 50%;\n  -webkit-transform: translateY(-50%);\n  -ms-transform: translateY(-50%);\n  transform: translateY(-50%);\n  box-sizing: border-box;\n}\n.altrp-field-select2__indicators {\n  -webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-align-self: stretch;\n  -ms-flex-item-align: stretch;\n  align-self: stretch;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-shrink: 0;\n  -ms-flex-negative: 0;\n  flex-shrink: 0;\n  box-sizing: border-box;\n}\n.altrp-field-select2__indicator-separator {\n  -webkit-align-self: stretch;\n  -ms-flex-item-align: stretch;\n  align-self: stretch;\n  background-color: hsl(0,0%,80%);\n  margin-bottom: 8px;\n  margin-top: 8px;\n  width: 1px;\n  box-sizing: border-box;\n}\n.altrp-field-select2__indicator {\n  color: hsl(0,0%,80%);\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  padding: 8px;\n  -webkit-transition: color 150ms;\n  transition: color 150ms;\n  box-sizing: border-box;\n  justify-content: center;\n  align-items: center;\n}\n.tba-placeholder {\n  display: flex;\n  justify-content: center;\n  font-size: 28px;\n  font-weight: bold;\n}\n.altrp-field-subgroup {\n  display: flex;\n  flex-wrap: wrap;\n}\n.altrp-field-option {\n  display: flex;\n  padding: 10px;\n}\n.altrp-field-option__label {\n  cursor: pointer;\n}\ntextarea.altrp-field {\n  display: block;\n}\n.altrp-table__filter-select .altrp-field-select2__placeholder {\n  white-space: nowrap;\n}\n.altrp-table__filter-select .altrp-field-select2__single-value {\n  font-size: 14px;\n}\n.altrp-table__filter-select .altrp-field-select2__indicator-separator {\n  display: none;\n}\n.altrp-table__filter-select .altrp-field-select2__indicator {\n  align-items: center;\n}\n.altrp-table__filter-select .altrp-field-select2__control {\n  width: 100%;\n  min-height: 19px;\n  padding: 0;\n  border-radius: 0;\n  outline: none;\n  border-color: rgb(142, 148, 170);\n  -webkit-box-shadow: none;\n  -moz-box-shadow: none;\n  box-shadow: none;\n}\n.altrp-table__filter-select .altrp-field-select2__control input {\n  border: none;\n}\n.altrp-table__filter-select .altrp-field-select2__value-container {\n  padding-top: 0;\n  padding-bottom: 0;\n  line-height: 13px;\n}\n.altrp-field-required {\n  color: red;\n  font-size: 18px;\n  padding-left: 10px;\n}\n.altrp-field-container-label {\n  display: flex;\n  flex-direction: row;\n}\n\n.altrp-field-label-container-left {\n  display: flex;\n  align-items: center;\n}\n\n.altrp-field-label-container {\n  display: inline-flex;\n  align-items: center;\n}\n.altrp-field-select2__indicator.altrp-field-select2__dropdown-indicator {\n  padding: 0 8px;\n  max-height: 14px;\n  overflow: hidden;\n}\n.altrp-field-select2 .altrp-field-select2__value-container {\n  padding: 0px 8px;\n}\n.altrp-field-select2 .css-b8ldur-Input {\n  padding-bottom: 0px;\n  padding-top: 0px;\n  margin: 0 2px;\n}\n.altrp-field-select2 .altrp-field-select2__control {\n  min-height: 14px;\n}\n`)\nconst AltrpFieldContainer = styled.div`\n  ${({ settings: { content_label_position_type } }) => {\n    switch (content_label_position_type) {\n      case \"left\": {\n        return \"display: flex\";\n      }\n      case \"right\": {\n        return \"display:flex;flex-direction:row-reverse;justify-content:flex-end;\";\n      }\n    }\n    return \"\";\n  }}\n`;\n\nclass InputImageSelectWidget extends Component {\n  timeInput = null;\n\n  constructor(props) {\n    super(props);\n    props.element.component = this;\n    if (window.elementDecorator) {\n      window.elementDecorator(this);\n    }\n    this.onChange = this.onChange.bind(this);\n    this.debounceDispatch = this.debounceDispatch.bind(this);\n\n    this.defaultValue =\n      this.getContent(\"content_default_value\") ||\n      (this.valueMustArray() ? [] : \"\");\n    if (this.valueMustArray() && !_.isArray(this.defaultValue)) {\n      this.defaultValue = [];\n    }\n    this.state = {\n      settings: { ...props.element.getSettings() },\n      value: this.defaultValue,\n      options: parseOptionsFromSettings(\n        props.element.getSettings(\"content_options\")\n      ),\n      paramsForUpdate: null\n    };\n    this.altrpSelectRef = React.createRef();\n    if (this.getContent(\"content_default_value\")) {\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\n    }\n  }\n\n  /**\n   * В некоторых случаях значение поля должно быть массивом\n   * @return {boolean}\n   */\n  valueMustArray() {\n    return true;\n  }\n  /**\n   * Чистит значение\n   */\n  clearValue() {\n    let value = \"\";\n    if (this.props.element.getSettings(\"select2_multiple\")) {\n      value = [];\n    }\n    this.onChange(value);\n    this.dispatchFieldValueToStore(value, true);\n  }\n  /**\n   * Метод устанавливает все опции как выбранные\n   */\n  selectAll() {\n    const optionsDynamicSetting = this.props.element.getDynamicSetting(\n      \"content_options\"\n    );\n\n    if (this.props.element.getSettings(\"select2_multiple\")) {\n      let options = [...this.state.options];\n      if (!_.isArray(options)) {\n        options = [];\n      } else {\n        if (optionsDynamicSetting) {\n          options = convertData(optionsDynamicSetting, options);\n        }\n      }\n      this.onChange(options);\n    }\n  }\n  /**\n   * Обработка нажатия клавиши\n   * @param {{}} e\n   */\n  handleEnter = e => {\n    if (e.keyCode === 13) {\n      e.preventDefault();\n      const inputs = Array.from(document.querySelectorAll(\"input,select\"));\n      const index = inputs.indexOf(e.target);\n      if (index === undefined) return;\n      inputs[index + 1] && inputs[index + 1].focus();\n      const {\n        create_allowed,\n        create_label,\n        create_url\n      } = this.props.element.getSettings();\n      if (create_allowed && create_label && create_url) {\n        this.createItem(e);\n      }\n    }\n  };\n\n  /**\n   * Загрузка виджета\n   * @param {{}} prevProps\n   * @param {{}} prevState\n   */\n  async _componentDidMount(prevProps, prevState) {\n    if (this.props.element.getSettings(\"content_options\")) {\n      let options = parseOptionsFromSettings(\n        this.props.element.getSettings(\"content_options\")\n      );\n\n      this.setState(state => ({ ...state, options }));\n    }\n    let value = this.state.value;\n    /**\n     * Если динамическое значение загрузилось,\n     * то используем this.getContent для получение этого динамического значения\n     * старые динамические данные\n     * */\n    if (\n      _.get(value, \"dynamic\") &&\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\n    ) {\n      value = this.getContent(\"content_default_value\");\n    }\n\n    /**\n     * Если модель обновилась при смене URL\n     */\n    if (\n      prevProps &&\n      !prevProps.currentModel.getProperty(\"altrpModelUpdated\") &&\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\n    ) {\n      value = this.getContent(\"content_default_value\");\n      this.setState(\n        state => ({ ...state, value, contentLoaded: true }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n      return;\n    }\n    if (\n      this.props.currentModel.getProperty(\"altrpModelUpdated\") &&\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\n      !this.state.contentLoaded\n    ) {\n      value = this.getContent(\"content_default_value\");\n      this.setState(\n        state => ({ ...state, value, contentLoaded: true }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n      return;\n    }\n    if (this.state.value !== value) {\n      this.setState(\n        state => ({ ...state, value }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n    }\n  }\n\n  /**\n   * Получить url для запросов\n   */\n  getRoute() {\n    let url = this.props.element.getSettings(\"model_for_options\");\n\n    if (url.indexOf(\"/\") === -1) {\n      return `/ajax/models/${url}_options`;\n    }\n    if (url.indexOf(\"{{\") !== -1) {\n      url = replaceContentWithData(url);\n    }\n    return url;\n  }\n  /**\n   * Обновление виджета\n   */\n  async _componentDidUpdate(prevProps, prevState) {\n    const { content_options, model_for_options } = this.state.settings;\n    if (\n      prevProps &&\n      !prevProps.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\")\n    ) {\n      let value = this.getContent(\n        \"content_default_value\",\n        this.props.element.getSettings(\"select2_multiple\")\n      );\n      this.setState(\n        state => ({ ...state, value, contentLoaded: true }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n    }\n\n    /**\n     * Если обновилась модель, то пробрасываем в стор новое значение (старый источник диамических данных)\n     */\n    if (\n      !_.isEqual(this.props.currentModel, prevProps.currentModel) &&\n      this.state.value &&\n      this.state.value.dynamic\n    ) {\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\n    }\n\n    /**\n     * Если обновилось хранилище данных формы, currentDataStorage или модель, то получаем новые опции c сервера\n     */\n    if (\n      this.props.formsStore !== prevProps.formsStore ||\n      this.props.currentModel !== prevProps.currentModel ||\n      this.props.currentDataStorage !== prevProps.currentDataStorage\n    ) {\n      this.updateOptions();\n    }\n    if (content_options && !model_for_options) {\n      let options = parseOptionsFromSettings(content_options);\n      if (!_.isEqual(options, this.state.options)) {\n        this.setState(state => ({ ...state, options }));\n      }\n    }\n    this.updateValue(prevProps);\n  }\n\n  /**\n   * Обновить значение если нужно\n   * @param {{}} prevProps\n   */\n  updateValue(prevProps) {\n    if (isEditor()) {\n      return;\n    }\n    let content_calculation = this.props.element.getSettings(\n      \"content_calculation\"\n    );\n    const altrpforms = this.props.formsStore;\n    const fieldName = this.props.element.getFieldId();\n    const formId = this.props.element.getFormId();\n    if (!content_calculation) {\n      /**\n       * Обновить значение, если formsStore изменилось из другого компонента\n       */\n      const path = `${formId}.${fieldName}`;\n      if (\n        this.props.formsStore !== prevProps.formsStore &&\n        _.get(altrpforms, path) !== this.state.value\n      ) {\n        this.setState(state => ({\n          ...state,\n          value: _.get(altrpforms, path)\n        }));\n      }\n      return;\n    }\n\n    const prevContext = {};\n\n    const altrpdata = this.props.currentDataStorage.getData();\n    const altrpmodel = this.props.currentModel.getData();\n    const altrpuser = this.props.currentUser.getData();\n    const altrppagestate = this.props.altrpPageState.getData();\n    const altrpresponses = this.props.altrpresponses.getData();\n    const altrpmeta = this.props.altrpMeta.getData();\n    const context = this.props.element.getCurrentModel().getData();\n    if (content_calculation.indexOf(\"altrpdata\") !== -1) {\n      context.altrpdata = altrpdata;\n      if (!altrpdata.currentDataStorageLoaded) {\n        prevContext.altrpdata = altrpdata;\n      } else {\n        prevContext.altrpdata = prevProps.currentDataStorage.getData();\n      }\n    }\n    if (content_calculation.indexOf(\"altrpforms\") !== -1) {\n      context.altrpforms = altrpforms;\n      /**\n       * Не производим вычисления, если изменилось текущее поле\n       */\n      if (`${formId}.${fieldName}` === altrpforms.changedField) {\n        prevContext.altrpforms = altrpforms;\n      } else {\n        prevContext.altrpforms = prevProps.formsStore;\n      }\n    }\n    if (content_calculation.indexOf(\"altrpmodel\") !== -1) {\n      context.altrpmodel = altrpmodel;\n      prevContext.altrpmodel = prevProps.currentModel.getData();\n    }\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\n      context.altrpuser = altrpuser;\n      prevContext.altrpuser = prevProps.currentUser.getData();\n    }\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\n      context.altrpuser = altrpuser;\n      prevContext.altrpuser = prevProps.currentUser.getData();\n    }\n    if (content_calculation.indexOf(\"altrppagestate\") !== -1) {\n      context.altrppagestate = altrppagestate;\n      prevContext.altrppagestate = prevProps.altrpPageState.getData();\n    }\n    if (content_calculation.indexOf(\"altrpmeta\") !== -1) {\n      context.altrpmeta = altrpmeta;\n      prevContext.altrpmeta = prevProps.altrpMeta.getData();\n    }\n    if (content_calculation.indexOf(\"altrpresponses\") !== -1) {\n      context.altrpresponses = altrpresponses;\n      prevContext.altrpresponses = prevProps.altrpresponses.getData();\n    }\n\n    if (content_calculation.indexOf(\"altrpstorage\") !== -1) {\n      context.altrpstorage = getDataFromLocalStorage(\"altrpstorage\", {});\n    }\n\n    if (\n      _.isEqual(prevProps.currentDataStorage, this.props.currentDataStorage) &&\n      _.isEqual(prevProps.currentUser, this.props.currentUser) &&\n      _.isEqual(prevProps.formsStore, this.props.formsStore) &&\n      _.isEqual(prevProps.altrpPageState, this.props.altrpPageState) &&\n      _.isEqual(prevProps.altrpMeta, this.props.altrpMeta) &&\n      _.isEqual(prevProps.altrpresponses, this.props.altrpresponses) &&\n      _.isEqual(prevProps.currentModel, this.props.currentModel)\n    ) {\n      return;\n    }\n    if (\n      !_.isEqual(prevProps.formsStore, this.props.formsStore) &&\n      `${formId}.${fieldName}` === altrpforms.changedField\n    ) {\n      return;\n    }\n    let value = \"\";\n    try {\n      content_calculation = content_calculation\n        .replace(/}}/g, \"')\")\n        .replace(/{{/g, \"_.get(context, '\");\n      value = eval(content_calculation);\n      if (value === this.state.value) {\n        return;\n      }\n      this.setState(\n        state => ({ ...state, value }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n    } catch (e) {\n      console.error(\n        \"Evaluate error in Input: '\" + e.message + \"'\",\n        this.props.element.getId()\n      );\n    }\n  }\n\n  /**\n   * Обновляет опции для селекта при обновлении данных, полей формы\n   */\n  async updateOptions() {\n    {\n      let formId = this.props.element.getFormId();\n      let paramsForUpdate = this.props.element.getSettings(\"params_for_update\");\n      let formData = _.get(this.props.formsStore, [formId], {});\n      paramsForUpdate = parseParamsFromString(\n        paramsForUpdate,\n        new AltrpModel(formData)\n      );\n      /**\n       * Сохраняем параметры запроса, и если надо обновляем опции\n       */\n      let options = [...this.state.options];\n      if (!_.isEqual(paramsForUpdate, this.state.paramsForUpdate)) {\n        if (!_.isEmpty(paramsForUpdate)) {\n          if (this.props.element.getSettings(\"params_as_filters\", false)) {\n            paramsForUpdate = JSON.stringify(paramsForUpdate);\n            options = await new Resource({\n              route: this.getRoute()\n            }).getQueried({ filters: paramsForUpdate });\n          } else {\n            options = await new Resource({ route: this.getRoute() }).getQueried(\n              paramsForUpdate\n            );\n          }\n          options = !_.isArray(options) ? options.data : options;\n          options = _.isArray(options) ? options : [];\n        } else if (this.state.paramsForUpdate) {\n          options = await new Resource({ route: this.getRoute() }).getAll();\n          options = !_.isArray(options) ? options.data : options;\n          options = _.isArray(options) ? options : [];\n        }\n\n        this.setState(state => ({\n          ...state,\n          paramsForUpdate,\n          options\n        }));\n      }\n    }\n  }\n\n  /**\n   * Изменение значения в виджете\n   * @param e\n   * @param  editor для получения изменений из CKEditor\n   */\n  onChange(e, editor = null) {\n    let value = \"\";\n    let valueToDispatch;\n    const settings = this.props.element.getSettings();\n    if (e && e.target) {\n      value = e.target.value;\n    }\n\n    if (e && e.value) {\n      value = e.value;\n    }\n    if (_.get(editor, \"getData\")) {\n      value = `<div class=\"ck ck-content\" style=\"width:100%\">${editor.getData()}</div>`;\n    }\n    if (_.isArray(e)) {\n      value = _.cloneDeep(e);\n    }\n    if (\n      this.props.element.getSettings(\"content_options_nullable\") &&\n      e &&\n      e.value === \"<null>\"\n    ) {\n      value = null;\n    }\n\n    this.setState(\n      state => ({\n        ...state,\n        value\n      }),\n      () => {\n        /**\n         * Обновляем хранилище только если не текстовое поле\n         */\n\n        const change_actions = this.props.element.getSettings(\"change_actions\");\n        const change_change_end = this.props.element.getSettings(\n          \"change_change_end\"\n        );\n        const change_change_end_delay = this.props.element.getSettings(\n          \"change_change_end_delay\"\n        );\n\n        this.dispatchFieldValueToStore(\n          valueToDispatch !== undefined ? valueToDispatch : value,\n          true\n        );\n        if (change_actions && !change_change_end && !isEditor()) {\n          this.debounceDispatch(\n            valueToDispatch !== undefined ? valueToDispatch : value\n          );\n        }\n        if (change_actions && change_change_end && !isEditor()) {\n          this.timeInput && clearTimeout(this.timeInput);\n          this.timeInput = setTimeout(() => {\n            this.debounceDispatch(\n              valueToDispatch !== undefined ? valueToDispatch : value\n            );\n          }, change_change_end_delay);\n        }\n      }\n    );\n  }\n\n  debounceDispatch = _.debounce(\n    value => this.dispatchFieldValueToStore(value, true),\n    150\n  );\n\n  /**\n   * получить опции\n   */\n  getOptions() {\n    let options = [...this.state.options];\n    const optionsDynamicSetting = this.props.element.getDynamicSetting(\n      \"content_options\"\n    );\n    if (optionsDynamicSetting) {\n      options = convertData(optionsDynamicSetting, options);\n    }\n    if (!this.props.element.getSettings(\"sort_default\")) {\n      options = _.sortBy(options, o => o && (o.label ? o.label.toString() : o));\n    }\n    return options;\n  }\n\n  /**\n   * Для действие по фокусу\n   * @param e\n   * @return {Promise<void>}\n   */\n\n  onFocus = async e => {\n    const focus_actions = this.props.element.getSettings(\"focus_actions\");\n\n    if (focus_actions && !isEditor()) {\n      const actionsManager = (\n        await import(\n          /* webpackChunkName: 'ActionsManager' */\n          \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\n        )\n      ).default;\n      await actionsManager.callAllWidgetActions(\n        this.props.element.getIdForAction(),\n        \"focus\",\n        focus_actions,\n        this.props.element\n      );\n    }\n  };\n  /**\n   * Потеря фокуса для оптимизации\n   * @param  e\n   * @param  editor для получения изменений из CKEditor\n   */\n  onBlur = async (e, editor = null) => {\n\n    if (_.get(editor, \"getData\")) {\n      this.dispatchFieldValueToStore(editor.getData(), true);\n    }\n    if (this.props.element.getSettings(\"actions\", []) && !isEditor()) {\n      const actionsManager = (\n        await import(\n          /* webpackChunkName: 'ActionsManager' */\n          \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\n        )\n      ).default;\n      await actionsManager.callAllWidgetActions(\n        this.props.element.getIdForAction(),\n        \"blur\",\n        this.props.element.getSettings(\"actions\", []),\n        this.props.element\n      );\n    }\n  };\n  /**\n   * Передадим значение в хранилище формы\n   * @param {*} value\n   * @param {boolean} userInput true - имзенилось пользователем\n   */\n  dispatchFieldValueToStore = async (value, userInput = false) => {\n    let formId = this.props.element.getFormId();\n    let fieldName = this.props.element.getFieldId();\n    if (fieldName.indexOf(\"{{\") !== -1) {\n      fieldName = replaceContentWithData(fieldName);\n    }\n    if (_.isObject(this.props.appStore) && fieldName && formId) {\n      this.props.appStore.dispatch(\n        changeFormFieldValue(fieldName, value, formId, userInput)\n      );\n      if (userInput) {\n        const change_actions = this.props.element.getSettings(\"change_actions\");\n\n        if (change_actions && !isEditor()) {\n          const actionsManager = (\n            await import(\n              /* webpackChunkName: 'ActionsManager' */\n              \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\n            )\n          ).default;\n          await actionsManager.callAllWidgetActions(\n            this.props.element.getIdForAction(),\n            \"change\",\n            change_actions,\n            this.props.element\n          );\n        }\n      }\n    }\n  };\n\n  /**\n   * Обработка добавления опции по ajax\n   * @param {SyntheticKeyboardEvent} e\n   */\n  createItem = async e => {\n    const keyCode = e.keyCode;\n    const { value: inputValue } = e.target;\n    if (keyCode !== 13 || !inputValue) {\n      return;\n    }\n    const {\n      create_url,\n      create_label,\n      create_data,\n      select2_multiple\n    } = this.props.element.getSettings();\n    if (!create_label && !create_url) {\n      return;\n    }\n    const currentModel = this.props.element.getCurrentModel();\n    let data = parseParamsFromString(create_data, currentModel, true);\n    data[create_label] = inputValue;\n    let url = parseURLTemplate(create_url, currentModel.getData());\n    this.setState(state => ({ ...state, isDisabled: true }));\n    try {\n      const resource = new Resource({\n        route: url\n      });\n      let res = await resource.post(data);\n      if (res.success && _.get(res, \"data.id\")) {\n        let newOption = {\n          label: inputValue,\n          value: _.get(res, \"data.id\")\n        };\n        this.setState(\n          state => ({ ...state, isDisabled: false }),\n          () => {\n            let options = [...this.state.options];\n            options.unshift(newOption);\n            let value = this.state.value;\n            if (select2_multiple) {\n              value = value ? [...value] : [];\n              value.push(_.get(res, \"data.id\"));\n            } else {\n              value = _.get(res, \"data.id\");\n            }\n            this.setState(\n              state => ({ ...state, options, value }),\n              () => {\n                const selectStateManager = _.get(\n                  this,\n                  \"altrpSelectRef.current.selectRef.current\"\n                );\n                if (selectStateManager) {\n                  selectStateManager.setState({\n                    menuIsOpen: false,\n                    inputValue: \"\"\n                  });\n                }\n              }\n            );\n          }\n        );\n      }\n      this.setState(state => ({ ...state, isDisabled: false }));\n    } catch (error) {\n      console.error(error);\n      this.setState(state => ({ ...state, isDisabled: false }));\n    }\n  };\n\n  /**\n   * Взовращает имя для атрибута name\n   * @return {string}\n   */\n  getName() {\n    return `${this.props.element.getFormId()}[${this.props.element.getFieldId()}]`;\n  }\n\n  render() {\n    let label = null;\n    const settings = this.props.element.getSettings();\n    const {\n      options_sorting,\n      content_readonly,\n      image_select_options,\n      select2_multiple: isMultiple,\n      label_icon\n    } = settings;  //??здесь нет таких свойств, которые мы деструктуризируем\n\n    let value = this.state.value;\n\n    if (\n      _.get(value, \"dynamic\") &&\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\n    ) {\n      value = this.getContent(\"content_default_value\");\n    }\n    /**\n     * Пока динамический контент загружается (Еесли это динамический контент),\n     * нужно вывести пустую строку\n     */\n    if (value && value.dynamic) {\n      value = \"\";\n    }\n    let classLabel = \"\";\n    let styleLabel = {};\n    const content_label_position_type = this.props.element.getResponsiveSetting(\n      \"content_label_position_type\"\n    );\n    switch (content_label_position_type) {\n      case \"top\":\n        styleLabel = {\n          marginBottom: this.state.settings.label_style_spacing\n            ? this.state.settings.label_style_spacing.size +\n            this.state.settings.label_style_spacing.unit\n            : 2 + \"px\"\n        };\n        classLabel = \"\";\n        break;\n      case \"bottom\":\n        styleLabel = {\n          marginTop: this.state.settings.label_style_spacing\n            ? this.state.settings.label_style_spacing.size +\n            this.state.settings.label_style_spacing.unit\n            : 2 + \"px\"\n        };\n        classLabel = \"\";\n        break;\n      case \"left\":\n        styleLabel = {\n          marginRight: this.state.settings.label_style_spacing\n            ? this.state.settings.label_style_spacing.size +\n            this.state.settings.label_style_spacing.unit\n            : 2 + \"px\"\n        };\n        classLabel = \"altrp-field-label-container-left\";\n\n        break;\n      case \"absolute\":\n        styleLabel = {\n          position: \"absolute\",\n          zIndex: 2\n        };\n        classLabel = \"\";\n        break;\n    }\n\n    if (this.state.settings.content_label) {\n      label = (\n        <div\n          className={\"altrp-field-label-container \" + classLabel}\n          style={styleLabel}\n        >\n          <label\n            className={`altrp-field-label ${this.state.settings.content_required\n              ? \"altrp-field-label--required\"\n              : \"\"\n              }`}\n          >\n            {this.state.settings.content_label}\n          </label>\n          {label_icon && label_icon.assetType && (\n            <span className=\"altrp-label-icon\">\n              {renderAssetIcon(label_icon)}\n            </span>\n          )}\n        </div>\n      );\n    } else {\n      label = null;\n    }\n\n    let autocomplete = \"off\";\n    if (this.state.settings.content_autocomplete) {\n      autocomplete = \"on\";\n    } else {\n      autocomplete = \"off\";\n    }\n\n    let input = (\n      <AltrpImageSelect\n        options={image_select_options}\n        value={this.state.value}\n        changeHandler={value => this.setState({ value })}\n        isMultiple={isMultiple}\n      />\n    );\n\n    return (\n      <AltrpFieldContainer\n        settings={settings}\n        className={\"\" + classLabel}\n      >\n        {content_label_position_type === \"top\" ? label : \"\"}\n        {content_label_position_type === \"left\" ? label : \"\"}\n        {content_label_position_type === \"right\" ? label : \"\"}\n        {content_label_position_type === \"absolute\" ? label : \"\"}\n        {/* .altrp-field-label-container */}\n        {input}\n        {content_label_position_type === \"bottom\" ? label : \"\"}\n      </AltrpFieldContainer>\n    );\n  }\n}\n\nexport default InputImageSelectWidget;\n"],"sourceRoot":""}