{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/classCallCheck.js","webpack:///./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/front-app/src/js/classes/modules/DatastorageUpdater.js","webpack:///./resources/modules/front-app/src/js/store/current-data-storage/actions.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","AltrpModel","data","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","value","getData","set","unset","window","altrpHelpers","Resource","isJSON","mbParseJSON","replaceContentWithData","DataStorageUpdater","onStoreUpdate","formsStore","appStore","getState","_","isEqual","getProperty","setProperty","onFormsUpdate","subscribe","dataSources","initialUpdate","map","ds","Datasource","currentUser","route","getAll","dispatch","changeCurrentUser","filter","dataSource","parameters","find","param","paramValue","toString","indexOf","params","getParams","currentRouterMatch","subscribeToFormsUpdate","required","groupedDataSources","forEach","push","currentDataStorageLoading","groupPriority","hasOwnProperty","requests","getWebUrl","defaultParams","needUpdateFromForms","each","paramName","replace","res","preloadedData","altrpPreloadedDatasources","getAlias","getType","id","getQueried","Promise","then","console","error","changeCurrentDataStorage","log","performance","now","all","currentDataStorageLoaded","unsetProperty","clearCurrentDataStorage","findIndex","sortBy","data_source","priority","updating","oldParams","undefined","pendingParameters","dataStorageUpdater","CHANGE_CURRENT_DATASOURCE","CLEAR_CURRENT_DATASOURCE","SET_CURRENT_DATASOURCE_LOADED","SET_CURRENT_DATASOURCE_LOADING","dataStorageName","type"],"mappings":"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","file":"DatastorageUpdater.a8152950992d57e46e7e.bundle.js","sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","import {\r\n  changeCurrentDataStorage,\r\n  clearCurrentDataStorage,\r\n  currentDataStorageLoaded, currentDataStorageLoading\r\n} from \"../../store/current-data-storage/actions\";\r\nimport {changeCurrentUser} from \"../../store/current-user/actions\";\r\nimport Datasource from \"../Datasource\";\r\nconst { Resource, isJSON, mbParseJSON, replaceContentWithData} = window.altrpHelpers;\r\n\r\n/**\r\n * @class DataStorageUpdater\r\n */\r\nclass DataStorageUpdater extends AltrpModel {\r\n\r\n  constructor(data) {    super(data);\r\n    this.setProperty('dataSourcesFormsDependent', []);\r\n    this.setProperty('formsStore', appStore.getState().formsStore);\r\n    appStore.subscribe(this.onStoreUpdate)\r\n  }\r\n\r\n  /**\r\n   *  обновление currentDataStorage\r\n   *  @param {Datasource[]} dataSources\r\n   *  @param {boolean} initialUpdate\r\n   */\r\n  async updateCurrent(dataSources = null, initialUpdate = true) {\r\n    dataSources = dataSources.map(ds => {\r\n      if(ds instanceof Datasource){\r\n        return ds;\r\n      }\r\n      return new Datasource(ds)\r\n    });\r\n    if(appStore.getState().currentUser.isEmpty()){\r\n      let currentUser = await new Resource({ route: \"/ajax/current-user\" }).getAll();\r\n      currentUser = currentUser.data;\r\n      appStore.dispatch(changeCurrentUser(currentUser));\r\n    }\r\n    if(!initialUpdate && !_.get(dataSources, 'length')){\r\n      dataSources = this.getProperty('currentDataSources');\r\n    }\r\n    if(! dataSources){\r\n      dataSources = [];\r\n    }\r\n    if(initialUpdate){\r\n      this.setProperty('currentDataSources', dataSources);\r\n      this.setProperty('updated', false);\r\n      dataSources = dataSources.filter(dataSource => dataSource.getProperty('autoload'));\r\n    }\r\n\r\n    /**\r\n     * Фильтруем проверяя на наличие обязательных параметров\r\n     */\r\n    dataSources = dataSources.filter(dataSource => {\r\n      let parameters = dataSource.getProperty('parameters');\r\n      if(! isJSON(parameters)){\r\n        return true;\r\n      }\r\n      parameters = mbParseJSON(parameters, []);\r\n      /**\r\n       * Находим хотя бы один обязательный параметр, который не имеет значения\r\n       */\r\n      return ! (parameters && parameters.find(param=>{\r\n        if (param.paramValue.toString().indexOf('altrpforms.') !== -1) {\r\n          let params = dataSource.getParams(window.currentRouterMatch.data.params, 'altrpforms.');\r\n          initialUpdate && this.subscribeToFormsUpdate(dataSource, params);\r\n        } else {\r\n          return false;\r\n        }\r\n        if(! param.required){\r\n          return false;\r\n        }\r\n        let value = param.paramValue || '';\r\n        if(value.indexOf('{{') !== -1){\r\n          value = replaceContentWithData(value);\r\n        }\r\n        return ! value;\r\n      }));\r\n    });\r\n    // dataSources = _.sortBy(dataSources, ['data.priority']);\r\n    /**\r\n     * @member {Datasource} dataSource\r\n     */\r\n    const groupedDataSources = {};\r\n    dataSources.forEach(dataSource => {\r\n      groupedDataSources[dataSource.getProperty('priority')] = groupedDataSources[dataSource.getProperty('priority')] || [];\r\n      groupedDataSources[dataSource.getProperty('priority')].push(dataSource);\r\n    });\r\n    initialUpdate && appStore.dispatch(currentDataStorageLoading());\r\n    for (let groupPriority in groupedDataSources){\r\n      if(! groupedDataSources.hasOwnProperty(groupPriority)){\r\n        continue;\r\n      }\r\n      initialUpdate && appStore.dispatch(currentDataStorageLoading());\r\n      let requests = groupedDataSources[groupPriority].map(async dataSource => {\r\n\r\n        if (dataSource.getWebUrl()) {\r\n          let params = dataSource.getParams(window.currentRouterMatch.params, 'altrpforms.');\r\n          let defaultParams = _.cloneDeep(params);\r\n          let needUpdateFromForms = false;\r\n          _.each(params, (paramValue, paramName) => {\r\n            if (paramValue.toString().indexOf('altrpforms.') === 0) {\r\n              params[paramName] = _.get(appStore.getState().formsStore, paramValue.toString().replace('altrpforms.', ''), '');\r\n              needUpdateFromForms = true;\r\n            }\r\n          });\r\n          /**\r\n           * Если нужно взять параметры из формы, то подписываемся на изменения полeй формы\r\n           * и сохраняем параметры, с которыми уже получили данные\r\n           */\r\n          if (needUpdateFromForms) {\r\n            initialUpdate && this.subscribeToFormsUpdate(dataSource, _.cloneDeep(defaultParams));\r\n          }\r\n          let res = {};\r\n          try {\r\n            const preloadedData = _.get(window.altrpPreloadedDatasources, dataSource.getAlias());\r\n            if(preloadedData){\r\n              res = preloadedData;\r\n              _.unset(window.altrpPreloadedDatasources, dataSource.getAlias());\r\n            } else\r\n              if (dataSource.getType() === 'show') {\r\n              let id = _.get(params, 'id', _.get(this.props, 'match.params.id'));\r\n              if (id) {\r\n                res = await (new Resource({ route: dataSource.getWebUrl() })).get(id);\r\n              }\r\n            } else if (!_.isEmpty(params)) {\r\n              res = await (new Resource({ route: dataSource.getWebUrl() })).getQueried(params);\r\n              dataSource.params = _.cloneDeep(params);\r\n            } else {\r\n              res = await (new Resource({ route: dataSource.getWebUrl() })).getAll();\r\n            }\r\n          } catch (err) {\r\n            if(err instanceof Promise){\r\n              err = await err.then();\r\n            }\r\n            console.error(err);\r\n          }\r\n          res = _.get(res, 'data', res);\r\n          dataSources = dataSources.filter(ds => ds !== dataSource);\r\n          if(! dataSources.length){\r\n            this.setProperty('updated', true);\r\n          }\r\n          appStore.dispatch(changeCurrentDataStorage(dataSource.getAlias(), res));\r\n          return res;\r\n        }\r\n      });\r\n      console.log('Update Datasource Start: ',performance.now());\r\n      let responses = await Promise.all(requests);\r\n      console.log('Update Datasource End: ',performance.now());\r\n      initialUpdate && appStore.dispatch(currentDataStorageLoaded());\r\n    }\r\n    if(! dataSources.length){\r\n      appStore.dispatch(currentDataStorageLoaded());\r\n    }\r\n\r\n  }\r\n  /**\r\n   * Обнуляем текущее хранилище dataStorage\r\n   */\r\n  clearCurrent() {\r\n    this.unsetProperty('currentDataSources');\r\n    this.setProperty('dataSourcesFormsDependent', []);\r\n    appStore.dispatch(clearCurrentDataStorage())\r\n  }\r\n  /**\r\n    * подписывает какой либо источник данных на обновление от формы\r\n   * @param {Datasource} dataSource\r\n   * @param {{}} params\r\n   */\r\n  subscribeToFormsUpdate(dataSource, params) {\r\n    let dataSources = this.getProperty('dataSourcesFormsDependent');\r\n    // if(dataSources.indexOf(dataSource) === -1){\r\n    //   dataSources.push(dataSource);\r\n    // }\r\n    if (_.findIndex(dataSources, ds => {\r\n      return ds.dataSource === dataSource;\r\n    }) === -1) {\r\n      dataSources.push({\r\n        dataSource,\r\n        params\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * Вызывается, когда обновляется redux-хранилище\r\n   */\r\n  onStoreUpdate = async () => {\r\n    /**\r\n     * Проверяем обновились ли формы\r\n     * @type {formsStore}\r\n     */\r\n    let formsStore = appStore.getState().formsStore;\r\n\r\n    if (! _.isEqual(this.getProperty('formsStore'), formsStore) && this.getProperty('updated')) {\r\n      this.setProperty('formsStore', formsStore);\r\n      await this.onFormsUpdate();\r\n    }\r\n  };\r\n  /**\r\n   * Вызывается, когда обновляется поле формы для того,\r\n   * чтобы сделать новый запрос по тем dataSource,\r\n   * которые зависят от полей формы\r\n   */\r\n  async onFormsUpdate() {\r\n    let dataSources = this.getProperty('dataSourcesFormsDependent', []);\r\n\r\n    /**\r\n     * Фильтруем, проверяя на наличие обязательных параметров\r\n     */\r\n    dataSources = dataSources.filter(ds => {\r\n      const {dataSource} = ds;\r\n      let parameters = dataSource.getProperty('parameters');\r\n      if(! isJSON(parameters)){\r\n        return true;\r\n      }\r\n      parameters = mbParseJSON(parameters, []);\r\n      /**\r\n       * Находим хотя бы один обзяательный параметр, который имеет пустое значения\r\n       */\r\n      return ! parameters.find(param=>{\r\n        if(! param.required){\r\n          return false;\r\n        }\r\n        let value = param.paramValue || '';\r\n        if(value.indexOf('{{') !== -1){\r\n          value = replaceContentWithData(value);\r\n        }\r\n        return ! value;\r\n      });\r\n    });\r\n    // console.log(dataSources);\r\n    dataSources = _.sortBy(dataSources, data_source => data_source.priority);\r\n    let formsStore = appStore.getState().formsStore;\r\n    for (let ds of dataSources) {\r\n      let { dataSource, updating } = ds;\r\n      let oldParams = _.cloneDeep(dataSource.params);\r\n      /**\r\n       * @member {Datasource} dataSource\r\n       */\r\n      let params = dataSource.getParams(window.currentRouterMatch.params, 'altrpforms.');\r\n      _.forEach(params, (paramValue, paramName) => {\r\n        if (paramValue.toString().indexOf('altrpforms.') === 0) {\r\n          params[paramName] = _.get(formsStore, paramValue.replace('altrpforms.', ''));\r\n          // if(_.isArray(params[paramName])){\r\n          //   params[paramName] = JSON.stringify(params[paramName]);\r\n          // }\r\n        }\r\n      });\r\n      if(updating){\r\n        // console.error(params);\r\n        // console.error(ds);\r\n      }\r\n      if (! _.isEqual(params, oldParams) && ! updating) {\r\n        dataSource.params = _.cloneDeep(params);\r\n        ds.updating = true;\r\n        let res = {};\r\n        try{\r\n          res = await (new Resource({ route: dataSource.getWebUrl() })).getQueried(params);\r\n          res = _.get(res, 'data', res);\r\n          appStore.dispatch(changeCurrentDataStorage(dataSource.getAlias(), res));\r\n        } catch (err) {\r\n          if(err instanceof Promise){\r\n            err = await err.then();\r\n            err = mbParseJSON(err);\r\n          }\r\n          console.error(err);\r\n        } finally {\r\n          /**\r\n           * В случае, если во время запроса возникла необходимость обновления с новыми параметрами,\r\n           * сделаем новый запрос\r\n           */\r\n          if((ds.pendingParameters !== undefined) && ! _.isEqual(ds.pendingParameters, params)){\r\n            try{\r\n              res = await (new Resource({ route: dataSource.getWebUrl() })).getQueried(ds.pendingParameters);\r\n              res = _.get(res, 'data', res);\r\n              appStore.dispatch(changeCurrentDataStorage(dataSource.getAlias(), res));\r\n              dataSource.params = _.cloneDeep(ds.pendingParameters);\r\n            } catch (err) {\r\n              if(err instanceof Promise){\r\n                err = await err.then();\r\n                err = mbParseJSON(err);\r\n              }\r\n              console.error(err);\r\n            } finally {\r\n              _.unset(ds, 'pendingParameters');\r\n            }\r\n          }\r\n          ds.updating = false;\r\n        }\r\n        /**\r\n         * В случае, если во время запроса возникла необходимость обновления с новыми параметрами,\r\n         * сохраним эти параметры\r\n         */\r\n      } else if((! _.isEqual(params, oldParams)) && updating){\r\n        ds.pendingParameters = _.cloneDeep(params);\r\n      }\r\n    }\r\n  }\r\n}\r\nwindow.dataStorageUpdater = window.dataStorageUpdater || new DataStorageUpdater();\r\nexport default window.dataStorageUpdater\r\n","export const CHANGE_CURRENT_DATASOURCE = 'CHANGE_CURRENT_DATASOURCE';\r\nexport const CLEAR_CURRENT_DATASOURCE = 'CLEAR_CURRENT_DATASOURCE';\r\nexport const SET_CURRENT_DATASOURCE_LOADED = 'SET_CURRENT_DATASOURCE_LOADED';\r\nexport const SET_CURRENT_DATASOURCE_LOADING = 'SET_CURRENT_DATASOURCE_LOADING';\r\n\r\n/**\r\n *\r\n * @param {string}dataStorageName\r\n * @param {{}} data\r\n * @return {{}} -\r\n *   {\r\n *     type: {string},\r\n *     dataStorage: {},\r\n *     dataStorageName: {string},\r\n *   }\r\n */\r\nexport function changeCurrentDataStorage(dataStorageName, data = {}) {\r\n  return {\r\n    type: CHANGE_CURRENT_DATASOURCE,\r\n    data,\r\n    dataStorageName\r\n  };\r\n}\r\n\r\n/**\r\n * Перед загрузкой новых данных, старые удаляем\r\n * @return {{}} - type: string\r\n */\r\nexport function clearCurrentDataStorage() {\r\n  return {\r\n    type: CLEAR_CURRENT_DATASOURCE,\r\n  };\r\n}\r\n\r\n/**\r\n * После загрузки сообщаем, что данный обновились, для вызовы _componentDidMount в компонентах элементов\r\n * @return {{type: string}}\r\n */\r\nexport function currentDataStorageLoaded(){\r\n  return {\r\n    type: SET_CURRENT_DATASOURCE_LOADED,\r\n  };\r\n}\r\n/**\r\n * После загрузки сообщаем, что данный обновились, для вызовы _componentDidMount в компонентах элементов\r\n * @return {{type: string}}\r\n */\r\nexport function currentDataStorageLoading(){\r\n  return {\r\n    type: SET_CURRENT_DATASOURCE_LOADING,\r\n  };\r\n}\r\n\r\n"],"sourceRoot":""}