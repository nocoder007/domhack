{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack:///./resources/modules/admin/src/components/altrp-select/AltrpSelect.js","webpack:///./resources/modules/editor/src/js/components/altrp-image-select/AltrpImageSelect.js","webpack:///./resources/modules/editor/src/js/components/ckeditor/Plugins/UploadAdapterPlugin.js","webpack:///./resources/modules/editor/src/js/components/ckeditor/CKeditor.js","webpack:///./resources/modules/editor/src/js/components/widgets/InputWidget.js","webpack:///./node_modules/react-select/async/dist/react-select.browser.esm.js"],"names":["_setPrototypeOf","o","p","Object","setPrototypeOf","__proto__","renderScrollbar","props","autoHeight","children","AltrpSelect","loadOptions","searchString","callback","options","optionsResource","search","setState","state","optionsRoute","Resource","route","selectRef","React","customStyles","control","base","boxShadow","borderColor","isFocused","menuPortal","zIndex","selectProps","onChange","this","placeholder","noOptionsMessage","styles","menuPortalTarget","document","body","menuPlacement","menuPosition","onKeyDown","components","MenusList","captureMenuScroll","isDisabled","ref","_","assign","isArray","value","map","item","_i","label","isString","isNumber","isObject","forEach","option","find","Component","AltrpImageSelect","changeHandler","isMultiple","className","key","id","includes","onClick","filter","image","src","url","width","UploadAdapter","loader","resource","Promise","resolve","reject","file","then","result","postFiles","response","default","UploadAdapterPlugin","editor","plugins","get","createUploadAdapter","defaultToolbar","window","EditorFrame","contentWindow","config","extraPlugins","toolbar","textWidget","CKEditor","InlineEditor","disabled","readOnly","data","text","onReady","console","log","isEnabled","event","changeText","getData","onBlur","moment","altrpHelpers","globalDefaults","push","AltrpFieldContainer","styled","div","settings","content_label_position_type","InputWidget","timeInput","handleEnter","e","keyCode","preventDefault","inputs","Array","from","querySelectorAll","index","indexOf","target","undefined","focus","element","getSettings","create_allowed","create_label","create_url","createItem","debounceDispatch","debounce","dispatchFieldValueToStore","onFocus","focus_actions","isEditor","actionsManager","callAllWidgetActions","getIdForAction","content_type","userInput","formId","getFormId","fieldName","getFieldId","replaceContentWithData","appStore","dispatch","changeFormFieldValue","change_actions","inputValue","create_data","select2_multiple","currentModel","getCurrentModel","parseParamsFromString","parseURLTemplate","post","res","success","newOption","unshift","selectStateManager","menuIsOpen","error","component","elementDecorator","bind","defaultValue","getContent","valueMustArray","parseOptionsFromSettings","paramsForUpdate","altrpSelectRef","createRef","optionsDynamicSetting","getDynamicSetting","convertData","prevProps","prevState","model_for_options","getRoute","getAll","getProperty","contentLoaded","currentDataStorage","content_options","isEqual","dynamic","formsStore","updateOptions","updateValue","content_calculation","altrpforms","prevContext","altrpdata","altrpmodel","altrpuser","currentUser","altrppagestate","altrpPageState","altrpresponses","altrpmeta","altrpMeta","context","currentDataStorageLoaded","changedField","altrpstorage","getDataFromLocalStorage","replace","eval","message","getId","path","formData","AltrpModel","isEmpty","JSON","stringify","getQueried","filters","valueToDispatch","getElementsByName","name","input","checked","_value","trueValue","falseValue","valueReplacement","cloneDeep","timestamp","isDate","Date","getTime","change_change_end","change_change_end_delay","clearTimeout","setTimeout","sortBy","toString","options_sorting","content_readonly","image_select_options","label_icon","classLabel","styleLabel","getResponsiveSetting","marginBottom","label_style_spacing","size","unit","marginTop","marginRight","position","content_label","style","content_required","assetType","renderAssetIcon","autocomplete","content_autocomplete","getOptions","getName","position_css_id","position_css_classes","content_options_nullable","sortOptions","renderSelect2","renderRepeatedInput","renderWysiwyg","autoComplete","content_placeholder","renderAcceptInput","isClearable","content_clearable","unix","isValid","format","type","Math","random","substr","formID","inputType","idx","altrpCompare","htmlFor","nulled_option_title","v","_v","valueItem","union","select2Props","classNamePrefix","isOptionSelected","isMulti","SelectComponent","_class","_temp","SelectState","m","S","Async","_Component","Derived","hasNativeReflectConstruct","_super","Reflect","construct","sham","Proxy","prototype","call","_isNativeReflectConstruct","Super","NewTarget","constructor","arguments","apply","_this","select","lastRequest","mounted","optionsCache","handleInputChange","newValue","actionMeta","_this$props","cacheOptions","onInputChange","loadedInputValue","loadedOptions","isLoading","passEmptyOptions","request","defaultOptions","_this2","nextProps","blur","_this3","_this$props2","isLoadingProp","_this$state","_ref","defaultProps","filterOption"],"mappings":"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","file":"InputWidget.cd45a4c6a7bbd54e44fe.bundle.js","sourcesContent":["export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import React, {Component} from \"react\";\r\nimport AsyncSelect from \"react-select/async\";\r\nimport Resource from \"../../../../editor/src/js/classes/Resource\";\r\nimport Select from \"react-select\";\r\nimport { Scrollbars } from \"react-custom-scrollbars\";\r\nimport {parseParamsFromString, parseURLTemplate} from \"../../../../front-app/src/js/helpers\";\r\n\r\nexport const renderScrollbar = (props) => {\r\n  return <Scrollbars autoHeight >{props.children}</Scrollbars>;\r\n};\r\n\r\nclass AltrpSelect extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      options: props.options || [],\r\n    };\r\n    if(props.optionsRoute){\r\n      this.optionsResource = new Resource({route: props.optionsRoute});\r\n    }\r\n    this.selectRef = React.createRef();\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  async componentDidMount(){\r\n\r\n  }\r\n  /**\r\n   * изменение значения\r\n   */\r\n  onChange(){\r\n\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  loadOptions = async (searchString, callback)=>{\r\n    let options = [];\r\n    if(this.optionsResource){\r\n      options = await this.optionsResource.search(searchString);\r\n    }\r\n    this.setState(state=>({\r\n      ...state,\r\n      options\r\n    }));\r\n    return callback(options);\r\n  };\r\n\r\n  render(){\r\n    const customStyles = {\r\n      control: (base, state) => ({\r\n        ...base,\r\n        boxShadow: \"none\",\r\n        borderColor: state.isFocused ? \"hsl(0,0%,80%)\" : \"hsl(0,0%,80%)\",\r\n        \"&:hover\": {\r\n          borderColor: \"hsl(0,0%,80%)\"\r\n        }\r\n      }),\r\n      menuPortal: base => ({ ...base, zIndex: 99999 }),\r\n      // option: (provided, state) => ({\r\n      //   ...provided,\r\n      //   backgroundColor: state.isSelected ?\r\n      //     background.selected.color :\r\n      //     state.isFocused ? background.focused.color : background.normal.color\r\n      // })\r\n    };\r\n\r\n    let selectProps = {\r\n      onChange: this.onChange,\r\n      options: this.state.options || [],\r\n      placeholder: this.props.placeholder,\r\n      loadOptions: this.loadOptions,\r\n      noOptionsMessage: this.props.noOptionsMessage || (() => \"not found\"),\r\n      styles: customStyles,\r\n      menuPortalTarget: document.body,\r\n      menuPlacement: 'auto',\r\n      menuPosition: 'absolute',\r\n      onKeyDown : this.onKeyDown,\r\n      components: { MenusList: renderScrollbar },\r\n      captureMenuScroll: false,\r\n      isDisabled: this.state.isDisabled,\r\n      ref: this.selectRef,\r\n    };\r\n\r\n    _.assign(selectProps, this.props);\r\n\r\n    if(_.isArray(selectProps.value)){\r\n      selectProps.value = selectProps.value.map(item => {\r\n        let _i = {\r\n          label: '',\r\n          value: '',\r\n        };\r\n        if(_.isString(item) || _.isNumber(item)){\r\n          _i.value = item;\r\n          _i.label = item;\r\n        } else if(_.isObject(item)) {\r\n          return item;\r\n        }\r\n        if(_.isArray(selectProps.options)){\r\n          selectProps.options.forEach(option=>{\r\n            if(option.value === _i.value){\r\n              _i = {...option,};\r\n            }\r\n          });\r\n        }\r\n        return _i;\r\n      });\r\n    }\r\n    if(selectProps.value && ! _.isObject(selectProps.value)){\r\n      selectProps.value = selectProps.options.find(o=>{\r\n        return o.value == selectProps.value;\r\n      });\r\n    }\r\n    if( this.optionsResource){\r\n      return <AsyncSelect {...selectProps} />\r\n    } else {\r\n      return <Select {...selectProps} />\r\n    }\r\n  }\r\n}\r\n\r\nexport default AltrpSelect\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\n\r\nclass AltrpImageSelect extends Component {\r\n  render() {\r\n    const { options, changeHandler, isMultiple, value } = this.props;\r\n\r\n    return <div className=\"altrp-image-select\">\r\n      {options?.map(option => <div key={option.id}\r\n        className={`altrp-field altrp-field-container \r\n          ${(isMultiple && value.includes(option.value) || value === option.value ? \"active\" : \"\")}`}\r\n        onClick={() => changeHandler(isMultiple ?\r\n          value.includes(option.value) ? value.filter(item => item !== option.value) : [...value, option.value] :\r\n          option.value)}\r\n      >\r\n        {option.image && <img src={option.image.url} width={\"100%\"} />}\r\n        <div className=\"altrp-image-select__label\">{option.label}</div>\r\n      </div>)}\r\n    </div>\r\n  }\r\n}\r\nexport default AltrpImageSelect;\r\n","import Resource from \"../../../classes/Resource\";\r\n\r\nclass UploadAdapter {\r\n  constructor(props) {\r\n    this.loader = props;\r\n    this.resource = new Resource({ route: \"/admin/ajax/media\" });\r\n  }\r\n\r\n  upload() {\r\n    return new Promise((resolve, reject) => {\r\n      this.loader.file.then(result => {\r\n        this.resource.postFiles([result]).then(response => {\r\n          resolve({\r\n            default: response[0].url\r\n          });\r\n        });\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * @param editor\r\n */\r\nexport default function UploadAdapterPlugin(editor) {\r\n  editor.plugins.get(\"FileRepository\").createUploadAdapter = loader => {\r\n    return new UploadAdapter(loader);\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\r\nimport InlineEditor from \"@ckeditor/ckeditor5-build-inline\";\r\nimport UploadAdapterPlugin from \"./Plugins/UploadAdapterPlugin\";\r\n\r\nconst defaultToolbar = [\r\n  \"heading\",\r\n  \"undo\",\r\n  \"redo\",\r\n  \"bold\",\r\n  \"italic\",\r\n  \"blockQuote\",\r\n  \"indent\",\r\n  \"outdent\",\r\n  \"link\",\r\n  \"numberedList\",\r\n  \"bulletedList\",\r\n  \"imageTextAlternative\",\r\n  \"imageUpload\",\r\n  \"mediaEmbed\",\r\n  \"insertTable\",\r\n  \"tableColumn\",\r\n  \"tableRow\",\r\n  \"mergeTableCells\"\r\n];\r\n\r\nclass CKeditor extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.body = window.EditorFrame ? window.EditorFrame.contentWindow.document.body : document.body;\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    const config = {\r\n      extraPlugins: [UploadAdapterPlugin],\r\n      body: this.body,\r\n      toolbar: defaultToolbar\r\n    };\r\n\r\n    if (this.props.textWidget) {\r\n      return (\r\n        <>\r\n          <CKEditor\r\n            config={config}\r\n            body={this.body}\r\n            editor={InlineEditor}\r\n            disabled={!this.props.readOnly}\r\n            data={this.props.text || \"Type text here\"}\r\n            onReady={editor => {\r\n              // You can store the \"editor\" and use when it is needed.\r\n              console.log(\"Editor is ready to use!\", editor);\r\n              editor.plugins.get( 'TextTransformation' ).isEnabled = false;\r\n            }}\r\n            onChange={(event, editor) =>\r\n              this.props.changeText(editor.getData())\r\n            }\r\n          />\r\n        </>\r\n      );\r\n    }\r\n    return (\r\n      <CKEditor\r\n        config={config}\r\n        body={this.body}\r\n        editor={InlineEditor}\r\n        data={this.props.text || \"Type text here\"}\r\n        disabled={this.props.readOnly}\r\n        onReady={editor => {\r\n          console.log(\"Editor is ready to use!\", editor);\r\n          editor.plugins.get( 'TextTransformation' ).isEnabled = false;\r\n\r\n        }}\r\n        onChange={(event, editor) => this.props.onChange(event, editor)}\r\n        onBlur={(event, editor) => this.props.onBlur(event, editor)}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default CKeditor;\r\n","import {\n  altrpCompare,\n  convertData,\n  isEditor,\n  parseOptionsFromSettings,\n  parseParamsFromString,\n  parseURLTemplate,\n  replaceContentWithData,\n  sortOptions,\n  renderAssetIcon,\n  valueReplacement,\n  getDataFromLocalStorage\n} from \"../../../../../front-app/src/js/helpers\";\nimport Resource from \"../../classes/Resource\";\nimport AltrpSelect from \"../../../../../admin/src/components/altrp-select/AltrpSelect\";\nimport { changeFormFieldValue } from \"../../../../../front-app/src/js/store/forms-data-storage/actions\";\nimport AltrpModel from \"../../classes/AltrpModel\";\nimport CKeditor from \"../ckeditor/CKeditor\";\nimport AltrpImageSelect from \"../altrp-image-select/AltrpImageSelect\";\nimport AltrpInput from \"../altrp-input/AltrpInput\";\nconst {moment} = window.altrpHelpers;\n\n(window.globalDefaults = window.globalDefaults || []).push(`\n.altrp-field {\n  border-style: solid;\n  width: 100%;\n}\n.altrp-field-file{\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n}\n\n.altrp-label-icon svg,\n.altrp-label-icon img {\n  width: 20px;\n}\n.altrp-label-icon svg{\n  height: 20px;\n}\n.altrp-field-file__field{\n  display: none;\n}\n.altrp-field-file__placeholder{\n  display: none;\n}\n.altrp-field-file_empty .altrp-field-file__placeholder{\n  display: block;\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n  background-color: rgb(52,59,76);\n  color: #fff;\n}\n.input-clear-btn {\n  background: transparent;\n  padding: 0;\n  position: absolute;\n  bottom: calc(50% - 7px);\n  right: 15px;\n  display: none;\n}\n.input-clear-btn:hover {\n  font-weight: bold;\n}\n.altrp-field:hover + .input-clear-btn, .input-clear-btn:hover {\n  display: block;\n}\n.altrp-input-wrapper, .altrp-field-select2 {\n  position: relative;\n  flex-grow: 1;\n}\n.altrp-field-label--required::after {\n  content: \"*\";\n  color: red;\n  font-size: inherit;\n  padding-left: 10px;\n}\n.altrp-field-label {\n  font-size: 16px;\n  font-family: \"Open Sans\";\n  line-height: 1.5;\n  letter-spacing: 0;\n}\n.altrp-field-select2__single-value, .altrp-field {\n  font-size: 16px;\n  font-family: \"Open Sans\";\n  line-height: 1.5;\n  letter-spacing: 0;\n}\n.altrp-field-select2__control, .altrp-field {\n  text-align: left;\n  padding-top: 2px;\n  padding-right: 2px;\n  padding-bottom: 2px;\n  padding-left: 2px;\n  border-width: 1px;\n}\n.altrp-field-select2__control:hover{\n  border-width: 1px;\n}\n.altrp-field-container {\n  margin: 0;\n}\n.altrp-field::placeholder, .altrp-field-select2__placeholder {\n  font-size: 13px;\n  font-family: \"Open Sans\";\n  line-height: 1.5;\n  letter-spacing: 0;\n}\n.altrp-image-select {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n.altrp-image-select img {\n  flex-grow: 1;\n  object-fit: contain;\n}\n.altrp-field {\n  overflow: hidden;\n  cursor: pointer;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n.altrp-field.active {\n  border-color: lightcoral;\n}\n.altrp-field-label {\n  text-align: center;\n  display: block;\n}\n.altrp-pagination__select-size .altrp-field-select2__single-value {\n  font-size: 14px;\n}\n.altrp-pagination__select-size .altrp-field-select2__indicator-separator {\n  display: none;\n}\n.altrp-pagination__select-size .altrp-field-select2__indicator {\n  align-items: center;\n}\n.altrp-pagination__select-size .altrp-field-select2__control {\n  width: 100px;\n  min-height: 32px;\n  padding: 0;\n  border-radius: 0;\n  outline: none;\n  border-color: rgb(142,148,170);\n  -webkit-box-shadow: none;\n  -moz-box-shadow: none;\n  box-shadow: none;\n}\n.altrp-pagination__select-size .altrp-field-select2__control input {\n  border: none;\n}\n.altrp-field-select2 {\n  position: relative;\n  box-sizing: border-box;\n  pointer-events: none;\n}\n.altrp-field-select2__control {\n  webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  background-color: hsl(0,0%,100%);\n  border-color: hsl(0,0%,80%);\n  border-style: solid;\n  border-width: 1px;\n  cursor: default;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-wrap: wrap;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  -webkit-box-pack: justify;\n  -webkit-justify-content: space-between;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n  min-height: 38px;\n  outline: 0 !important;\n  position: relative;\n  -webkit-transition: all 100ms;\n  transition: all 100ms;\n  box-sizing: border-box;\n}\n.altrp-field-select2__value-container {\n  -webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  -webkit-flex-wrap: wrap;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  padding: 2px 8px;\n  -webkit-overflow-scrolling: touch;\n  position: relative;\n  overflow: hidden;\n  box-sizing: border-box;\n}\n.altrp-field-select2__single-value {\n  color: hsl(0,0%,20%);\n  margin-left: 2px;\n  margin-right: 2px;\n  max-width: calc(100% - 8px);\n  overflow: hidden;\n  position: absolute;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  top: 50%;\n  -webkit-transform: translateY(-50%);\n  -ms-transform: translateY(-50%);\n  transform: translateY(-50%);\n  box-sizing: border-box;\n}\n.altrp-field-select2__indicators {\n  -webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-align-self: stretch;\n  -ms-flex-item-align: stretch;\n  align-self: stretch;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-shrink: 0;\n  -ms-flex-negative: 0;\n  flex-shrink: 0;\n  box-sizing: border-box;\n}\n.altrp-field-select2__indicator-separator {\n  -webkit-align-self: stretch;\n  -ms-flex-item-align: stretch;\n  align-self: stretch;\n  background-color: hsl(0,0%,80%);\n  margin-bottom: 8px;\n  margin-top: 8px;\n  width: 1px;\n  box-sizing: border-box;\n}\n.altrp-field-select2__indicator {\n  color: hsl(0,0%,80%);\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  padding: 8px;\n  -webkit-transition: color 150ms;\n  transition: color 150ms;\n  box-sizing: border-box;\n  justify-content: center;\n  align-items: center;\n}\n.tba-placeholder {\n  display: flex;\n  justify-content: center;\n  font-size: 28px;\n  font-weight: bold;\n}\n.altrp-field-subgroup {\n  display: flex;\n  flex-wrap: wrap;\n}\n.altrp-field-option {\n  display: flex;\n  padding: 10px;\n}\n.altrp-field-option__label {\n  cursor: pointer;\n}\ntextarea.altrp-field {\n  display: block;\n}\n.altrp-table__filter-select .altrp-field-select2__placeholder {\n  white-space: nowrap;\n}\n.altrp-table__filter-select .altrp-field-select2__single-value {\n  font-size: 14px;\n}\n.altrp-table__filter-select .altrp-field-select2__indicator-separator {\n  display: none;\n}\n.altrp-table__filter-select .altrp-field-select2__indicator {\n  align-items: center;\n}\n.altrp-table__filter-select .altrp-field-select2__control {\n  width: 100%;\n  min-height: 19px;\n  padding: 0;\n  border-radius: 0;\n  outline: none;\n  border-color: rgb(142, 148, 170);\n  -webkit-box-shadow: none;\n  -moz-box-shadow: none;\n  box-shadow: none;\n}\n.altrp-table__filter-select .altrp-field-select2__control input {\n  border: none;\n}\n.altrp-table__filter-select .altrp-field-select2__value-container {\n  padding-top: 0;\n  padding-bottom: 0;\n  line-height: 13px;\n}\n.altrp-field-required {\n  color: red;\n  font-size: 18px;\n  padding-left: 10px;\n}\n.altrp-field-container-label {\n  display: flex;\n  flex-direction: row;\n}\n\n.altrp-field-label-container-left {\n  display: flex;\n  align-items: center;\n}\n\n.altrp-field-label-container {\n  display: inline-flex;\n  align-items: center;\n}\n.altrp-field-select2__indicator.altrp-field-select2__dropdown-indicator {\n  padding: 0 8px;\n  max-height: 14px;\n  overflow: hidden;\n}\n.altrp-field-select2 .altrp-field-select2__value-container {\n  padding: 0px 8px;\n}\n.altrp-field-select2 .css-b8ldur-Input {\n  padding-bottom: 0px;\n  padding-top: 0px;\n  margin: 0 2px;\n}\n.altrp-field-select2 .altrp-field-select2__control {\n  min-height: 14px;\n}\n`)\n\nconst AltrpFieldContainer = styled.div`\n  ${({ settings: { content_label_position_type } }) => {\n    switch (content_label_position_type) {\n      case \"left\": {\n        return \"display: flex\";\n      }\n      case \"right\": {\n        return \"display:flex;flex-direction:row-reverse;justify-content:flex-end;\";\n      }\n    }\n    return \"\";\n  }}\n`;\n\nclass InputWidget extends Component {\n  timeInput = null;\n\n  constructor(props) {\n    super(props);\n    props.element.component = this;\n    if (window.elementDecorator) {\n      window.elementDecorator(this);\n    }\n    this.onChange = this.onChange.bind(this);\n    this.debounceDispatch = this.debounceDispatch.bind(this);\n\n    this.defaultValue =\n      this.getContent(\"content_default_value\") ||\n      (this.valueMustArray() ? [] : \"\");\n    if (this.valueMustArray() && !_.isArray(this.defaultValue)) {\n      this.defaultValue = [];\n    }\n    this.state = {\n      settings: { ...props.element.getSettings() },\n      value: this.defaultValue,\n      options: parseOptionsFromSettings(\n        props.element.getSettings(\"content_options\")\n      ),\n      paramsForUpdate: null\n    };\n    this.altrpSelectRef = React.createRef();\n    if (this.getContent(\"content_default_value\")) {\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\n    }\n  }\n\n  /**\n   * В некоторых случаях значение поля должно быть массивом\n   * @return {boolean}\n   */\n  valueMustArray() {\n    if (\n      [\"file\", \"image_select\", \"checkbox\"].indexOf(\n        this.props.element.getSettings(\"content_type\")\n      ) !== -1\n    ) {\n      return true;\n    }\n    if (\n      this.props.element.getSettings(\"content_type\") === \"select2\" &&\n      this.props.element.getSettings(\"select2_multiple\")\n    ) {\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Чистит значение\n   */\n  clearValue() {\n    let value = \"\";\n    if (\n      this.props.element.getSettings(\"content_type\") === \"checkbox\" ||\n      ([\"select2\", \"image_select\"].indexOf(\n        this.props.element.getSettings(\"content_type\")\n      ) >= 0 &&\n        this.props.element.getSettings(\"select2_multiple\"))\n    ) {\n      value = [];\n    }\n    this.onChange(value);\n    this.dispatchFieldValueToStore(value, true);\n  }\n  /**\n   * Метод устанавливает все опции как выбранные\n   */\n  selectAll() {\n    const optionsDynamicSetting = this.props.element.getDynamicSetting(\n      \"content_options\"\n    );\n    if (this.props.element.getSettings(\"content_type\") === \"checkbox\") {\n      let options = [...this.state.options];\n\n      if (optionsDynamicSetting) {\n        options = convertData(optionsDynamicSetting, options);\n      }\n      options = options.map(({ value }) => value);\n      this.onChange(options);\n    }\n    if (\n      [\"select2\", \"image_select\"].indexOf(\n        this.props.element.getSettings(\"content_type\")\n      ) >= 0 &&\n      this.props.element.getSettings(\"select2_multiple\")\n    ) {\n      let options = [...this.state.options];\n      if (!_.isArray(options)) {\n        options = [];\n      } else {\n        if (optionsDynamicSetting) {\n          options = convertData(optionsDynamicSetting, options);\n        }\n      }\n      this.onChange(options);\n    }\n  }\n  /**\n   * Обработка нажатия клавиши\n   * @param {{}} e\n   */\n  handleEnter = e => {\n    if (e.keyCode === 13) {\n      e.preventDefault();\n      const inputs = Array.from(document.querySelectorAll(\"input,select\"));\n      const index = inputs.indexOf(e.target);\n      if (index === undefined) return;\n      inputs[index + 1] && inputs[index + 1].focus();\n      const {\n        create_allowed,\n        create_label,\n        create_url\n      } = this.props.element.getSettings();\n      if (create_allowed && create_label && create_url) {\n        this.createItem(e);\n      }\n    }\n  };\n\n  /**\n   * Загрузка виджета\n   * @param {{}} prevProps\n   * @param {{}} prevState\n   */\n  async _componentDidMount(prevProps, prevState) {\n    if (this.props.element.getSettings(\"content_options\")) {\n      let options = parseOptionsFromSettings(\n        this.props.element.getSettings(\"content_options\")\n      );\n\n      this.setState(state => ({ ...state, options }));\n    } else if (\n      [\"select\", \"select2\"].indexOf(this.state.settings.content_type) >= 0 &&\n      this.state.settings.model_for_options\n    ) {\n      let options = await new Resource({ route: this.getRoute() }).getAll();\n      options = !_.isArray(options) ? options.data : options;\n      options = _.isArray(options) ? options : [];\n      this.setState(state => ({ ...state, options }));\n    }\n    let value = this.state.value;\n    /**\n     * Если динамическое значение загрузилось,\n     * то используем this.getContent для получение этого динамического значения\n     * старые динамические данные\n     * */\n    if (\n      _.get(value, \"dynamic\") &&\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\n    ) {\n      value = this.getContent(\"content_default_value\");\n    }\n    // if (!_.isObject(value)) {\n    //   value = this.getContent('content_default_value');\n    // }\n    /**\n     * Если модель обновилась при смене URL\n     */\n    if (\n      prevProps &&\n      !prevProps.currentModel.getProperty(\"altrpModelUpdated\") &&\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\n    ) {\n      value = this.getContent(\"content_default_value\");\n      this.setState(\n        state => ({ ...state, value, contentLoaded: true }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n      return;\n    }\n    if (\n      this.props.currentModel.getProperty(\"altrpModelUpdated\") &&\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\n      !this.state.contentLoaded\n    ) {\n      value = this.getContent(\"content_default_value\");\n      this.setState(\n        state => ({ ...state, value, contentLoaded: true }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n      return;\n    }\n    if (this.state.value !== value) {\n      this.setState(\n        state => ({ ...state, value }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n    }\n  }\n\n  /**\n   * Получить url для запросов\n   */\n  getRoute() {\n    let url = this.props.element.getSettings(\"model_for_options\");\n\n    if (url.indexOf(\"/\") === -1) {\n      return `/ajax/models/${url}_options`;\n    }\n    if (url.indexOf(\"{{\") !== -1) {\n      url = replaceContentWithData(url);\n    }\n    return url;\n  }\n  /**\n   * Обновление виджета\n   */\n  async _componentDidUpdate(prevProps, prevState) {\n    const { content_options, model_for_options } = this.state.settings;\n    if (\n      prevProps &&\n      !prevProps.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\")\n    ) {\n      let value = this.getContent(\n        \"content_default_value\",\n        this.props.element.getSettings(\"select2_multiple\")\n      );\n      this.setState(\n        state => ({ ...state, value, contentLoaded: true }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n    }\n    if (\n      this.props.element.getSettings(\"content_type\") === \"select\" &&\n      this.props.element.getSettings(\"model_for_options\")\n    ) {\n      if (\n        !(\n          this.state.settings.model_for_options ===\n          prevProps.element.getSettings(\"model_for_options\")\n        )\n      ) {\n        let model_for_options = prevProps.element.getSettings(\n          \"model_for_options\"\n        );\n        let options = await new Resource({ route: this.getRoute() }).getAll();\n        options = !_.isArray(options) ? options.data : options;\n        options = _.isArray(options) ? options : [];\n        this.setState(state => ({ ...state, options, model_for_options }));\n      }\n    }\n    /**\n     * Если обновилась модель, то пробрасываем в стор новое значение (старый источник диамических данных)\n     */\n    if (\n      !_.isEqual(this.props.currentModel, prevProps.currentModel) &&\n      this.state.value &&\n      this.state.value.dynamic\n    ) {\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\n    }\n\n    /**\n     * Если обновилось хранилище данных формы, currentDataStorage или модель, то получаем новые опции c сервера\n     */\n    if (\n      this.props.formsStore !== prevProps.formsStore ||\n      this.props.currentModel !== prevProps.currentModel ||\n      this.props.currentDataStorage !== prevProps.currentDataStorage\n    ) {\n      this.updateOptions();\n    }\n    if (content_options && !model_for_options) {\n      let options = parseOptionsFromSettings(content_options);\n      if (!_.isEqual(options, this.state.options)) {\n        this.setState(state => ({ ...state, options }));\n      }\n    }\n    this.updateValue(prevProps);\n  }\n\n  /**\n   * Обновить значение если нужно\n   * @param {{}} prevProps\n   */\n  updateValue(prevProps) {\n    if (isEditor()) {\n      return;\n    }\n    let content_calculation = this.props.element.getSettings(\n      \"content_calculation\"\n    );\n    const altrpforms = this.props.formsStore;\n    const fieldName = this.props.element.getFieldId();\n    const formId = this.props.element.getFormId();\n    if (!content_calculation) {\n      /**\n       * Обновить значение, если formsStore изменилось из другого компонента\n       */\n      const path = `${formId}.${fieldName}`;\n      if (\n        this.props.formsStore !== prevProps.formsStore &&\n        _.get(altrpforms, path) !== this.state.value\n      ) {\n        this.setState(state => ({\n          ...state,\n          value: _.get(altrpforms, path)\n        }));\n      }\n      return;\n    }\n\n    const prevContext = {};\n\n    const altrpdata = this.props.currentDataStorage.getData();\n    const altrpmodel = this.props.currentModel.getData();\n    const altrpuser = this.props.currentUser.getData();\n    const altrppagestate = this.props.altrpPageState.getData();\n    const altrpresponses = this.props.altrpresponses.getData();\n    const altrpmeta = this.props.altrpMeta.getData();\n    const context = this.props.element.getCurrentModel().getData();\n    if (content_calculation.indexOf(\"altrpdata\") !== -1) {\n      context.altrpdata = altrpdata;\n      if (!altrpdata.currentDataStorageLoaded) {\n        prevContext.altrpdata = altrpdata;\n      } else {\n        prevContext.altrpdata = prevProps.currentDataStorage.getData();\n      }\n    }\n    if (content_calculation.indexOf(\"altrpforms\") !== -1) {\n      context.altrpforms = altrpforms;\n      /**\n       * Не производим вычисления, если изменилось текущее поле\n       */\n      if (`${formId}.${fieldName}` === altrpforms.changedField) {\n        prevContext.altrpforms = altrpforms;\n      } else {\n        prevContext.altrpforms = prevProps.formsStore;\n      }\n    }\n    if (content_calculation.indexOf(\"altrpmodel\") !== -1) {\n      context.altrpmodel = altrpmodel;\n      prevContext.altrpmodel = prevProps.currentModel.getData();\n    }\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\n      context.altrpuser = altrpuser;\n      prevContext.altrpuser = prevProps.currentUser.getData();\n    }\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\n      context.altrpuser = altrpuser;\n      prevContext.altrpuser = prevProps.currentUser.getData();\n    }\n    if (content_calculation.indexOf(\"altrppagestate\") !== -1) {\n      context.altrppagestate = altrppagestate;\n      prevContext.altrppagestate = prevProps.altrpPageState.getData();\n    }\n    if (content_calculation.indexOf(\"altrpmeta\") !== -1) {\n      context.altrpmeta = altrpmeta;\n      prevContext.altrpmeta = prevProps.altrpMeta.getData();\n    }\n    if (content_calculation.indexOf(\"altrpresponses\") !== -1) {\n      context.altrpresponses = altrpresponses;\n      prevContext.altrpresponses = prevProps.altrpresponses.getData();\n    }\n\n    if (content_calculation.indexOf(\"altrpstorage\") !== -1) {\n      context.altrpstorage = getDataFromLocalStorage(\"altrpstorage\", {});\n    }\n\n    // if(_.isEqual(prevContext, context)){\n    //   return;\n    // }\n\n    if (\n      _.isEqual(prevProps.currentDataStorage, this.props.currentDataStorage) &&\n      _.isEqual(prevProps.currentUser, this.props.currentUser) &&\n      _.isEqual(prevProps.formsStore, this.props.formsStore) &&\n      _.isEqual(prevProps.altrpPageState, this.props.altrpPageState) &&\n      _.isEqual(prevProps.altrpMeta, this.props.altrpMeta) &&\n      _.isEqual(prevProps.altrpresponses, this.props.altrpresponses) &&\n      _.isEqual(prevProps.currentModel, this.props.currentModel)\n    ) {\n      return;\n    }\n    if (\n      !_.isEqual(prevProps.formsStore, this.props.formsStore) &&\n      `${formId}.${fieldName}` === altrpforms.changedField\n    ) {\n      return;\n    }\n    let value = \"\";\n    try {\n      content_calculation = content_calculation\n        .replace(/}}/g, \"')\")\n        .replace(/{{/g, \"_.get(context, '\");\n      value = eval(content_calculation);\n      if (value === this.state.value) {\n        return;\n      }\n      this.setState(\n        state => ({ ...state, value }),\n        () => {\n          this.dispatchFieldValueToStore(value);\n        }\n      );\n    } catch (e) {\n      console.error(\n        \"Evaluate error in Input: '\" + e.message + \"'\",\n        this.props.element.getId()\n      );\n    }\n  }\n\n  /**\n   * Обновляет опции для селекта при обновлении данных, полей формы\n   */\n  async updateOptions() {\n    {\n      let formId = this.props.element.getFormId();\n      let paramsForUpdate = this.props.element.getSettings(\"params_for_update\");\n      let formData = _.get(this.props.formsStore, [formId], {});\n      paramsForUpdate = parseParamsFromString(\n        paramsForUpdate,\n        new AltrpModel(formData)\n      );\n      /**\n       * Сохраняем параметры запроса, и если надо обновляем опции\n       */\n      let options = [...this.state.options];\n      if (!_.isEqual(paramsForUpdate, this.state.paramsForUpdate)) {\n        if (!_.isEmpty(paramsForUpdate)) {\n          if (this.props.element.getSettings(\"params_as_filters\", false)) {\n            paramsForUpdate = JSON.stringify(paramsForUpdate);\n            options = await new Resource({\n              route: this.getRoute()\n            }).getQueried({ filters: paramsForUpdate });\n          } else {\n            options = await new Resource({ route: this.getRoute() }).getQueried(\n              paramsForUpdate\n            );\n          }\n          options = !_.isArray(options) ? options.data : options;\n          options = _.isArray(options) ? options : [];\n        } else if (this.state.paramsForUpdate) {\n          options = await new Resource({ route: this.getRoute() }).getAll();\n          options = !_.isArray(options) ? options.data : options;\n          options = _.isArray(options) ? options : [];\n        }\n        // console.log(options);\n        // console.log(this.state.value);\n        this.setState(state => ({\n          ...state,\n          paramsForUpdate,\n          options\n        }));\n      }\n    }\n  }\n\n  /**\n   * Изменение значения в виджете\n   * @param e\n   * @param  editor для получения изменений из CKEditor\n   */\n  onChange(e, editor = null) {\n    let value = \"\";\n    let valueToDispatch;\n    const settings = this.props.element.getSettings();\n    if (e && e.target) {\n      if (this.props.element.getSettings(\"content_type\") === \"checkbox\") {\n        let inputs = document.getElementsByName(e.target.name);\n        value = [];\n        inputs.forEach(input => {\n          if (input.checked) {\n            value.push(input.value);\n          }\n        });\n      } else if (settings.content_type === \"accept\") {\n        let _value = e.target.checked;\n        let trueValue =\n          this.props.element.getSettings(\"accept_checked\") || true;\n        let falseValue =\n          this.props.element.getSettings(\"accept_unchecked\") || false;\n        falseValue = valueReplacement(falseValue);\n        trueValue = valueReplacement(trueValue);\n        valueToDispatch = _value ? trueValue : falseValue;\n      } else {\n        value = e.target.value;\n      }\n    }\n\n    if (e && e.value) {\n      value = e.value;\n    }\n    if (_.get(editor, \"getData\")) {\n      value = `<div class=\"ck ck-content\" style=\"width:100%\">${editor.getData()}</div>`;\n    }\n    if (_.isArray(e)) {\n      value = _.cloneDeep(e);\n    }\n    if (this.props.element.getSettings(\"content_type\") === \"select2\") {\n      if (this.props.element.getSettings(\"select2_multiple\", false) && !e) {\n        value = [];\n      }\n      if (this.props.element.getSettings(\"select2_multiple\", false)) {\n        value = value.map(item => item.value);\n      }\n    }\n    if (\n      this.props.element.getSettings(\"content_options_nullable\") &&\n      e &&\n      e.value === \"<null>\"\n    ) {\n      value = null;\n    }\n\n    let timestamp = this.props.element.getSettings(\"content_timestamp\");\n    let isDate = this.state.settings.content_type === \"date\";\n\n    if (isDate && timestamp && value != \"\") {\n      value = new Date(value).getTime(); // timestamp\n    }\n    this.setState(\n      state => ({\n        ...state,\n        value\n      }),\n      () => {\n        /**\n         * Обновляем хранилище только если не текстовое поле\n         */\n\n        const change_actions = this.props.element.getSettings(\"change_actions\");\n        const change_change_end = this.props.element.getSettings(\n          \"change_change_end\"\n        );\n        const change_change_end_delay = this.props.element.getSettings(\n          \"change_change_end_delay\"\n        );\n\n        if (\n          [\"text\", \"email\", \"phone\", \"tel\", \"number\", \"password\"].indexOf(\n            this.state.settings.content_type\n          ) === -1\n        ) {\n          this.dispatchFieldValueToStore(\n            valueToDispatch !== undefined ? valueToDispatch : value,\n            true\n          );\n        }\n        if (change_actions && !change_change_end && !isEditor()) {\n          this.debounceDispatch(\n            valueToDispatch !== undefined ? valueToDispatch : value\n          );\n        }\n        if (change_actions && change_change_end && !isEditor()) {\n          this.timeInput && clearTimeout(this.timeInput);\n          this.timeInput = setTimeout(() => {\n            this.debounceDispatch(\n              valueToDispatch !== undefined ? valueToDispatch : value\n            );\n          }, change_change_end_delay);\n        }\n      }\n    );\n  }\n\n  debounceDispatch = _.debounce(\n    value => this.dispatchFieldValueToStore(value, true),\n    150\n  );\n\n  // inputKeyBetween = setTimeout(\n  //   value => this.dispatchFieldValueToStore(value, true),\n  //   this.props.element.getSettings(\"change_change_end_delay\")\n  // );\n  /**\n   * получить опции\n   */\n  getOptions() {\n    let options = [...this.state.options];\n    const optionsDynamicSetting = this.props.element.getDynamicSetting(\n      \"content_options\"\n    );\n    if (optionsDynamicSetting) {\n      options = convertData(optionsDynamicSetting, options);\n    }\n    if (!this.props.element.getSettings(\"sort_default\")) {\n      options = _.sortBy(options, o => o && (o.label ? o.label.toString() : o));\n    }\n    return options;\n  }\n\n  /**\n   * Для действие по фокусу\n   * @param e\n   * @return {Promise<void>}\n   */\n\n  onFocus = async e => {\n    const focus_actions = this.props.element.getSettings(\"focus_actions\");\n\n    if (focus_actions && !isEditor()) {\n      const actionsManager = (\n        await import(\n          /* webpackChunkName: 'ActionsManager' */\n          \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\n        )\n      ).default;\n      await actionsManager.callAllWidgetActions(\n        this.props.element.getIdForAction(),\n        \"focus\",\n        focus_actions,\n        this.props.element\n      );\n    }\n  };\n  /**\n   * Потеря фокуса для оптимизации\n   * @param  e\n   * @param  editor для получения изменений из CKEditor\n   */\n  onBlur = async (e, editor = null) => {\n    if (\n      [\"text\", \"email\", \"phone\", \"tel\", \"number\", \"password\"].indexOf(\n        this.state.settings.content_type\n      ) !== -1\n    ) {\n      this.dispatchFieldValueToStore(e.target.value, true);\n    }\n    if (_.get(editor, \"getData\")) {\n      this.dispatchFieldValueToStore(editor.getData(), true);\n    }\n    if (this.props.element.getSettings(\"actions\", []) && !isEditor()) {\n      const actionsManager = (\n        await import(\n          /* webpackChunkName: 'ActionsManager' */\n          \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\n        )\n      ).default;\n      await actionsManager.callAllWidgetActions(\n        this.props.element.getIdForAction(),\n        \"blur\",\n        this.props.element.getSettings(\"actions\", []),\n        this.props.element\n      );\n    }\n  };\n  /**\n   * Передадим значение в хранилище формы\n   * @param {*} value\n   * @param {boolean} userInput true - имзенилось пользователем\n   */\n  dispatchFieldValueToStore = async (value, userInput = false) => {\n    let formId = this.props.element.getFormId();\n    let fieldName = this.props.element.getFieldId();\n    if (fieldName.indexOf(\"{{\") !== -1) {\n      fieldName = replaceContentWithData(fieldName);\n    }\n    if (_.isObject(this.props.appStore) && fieldName && formId) {\n      this.props.appStore.dispatch(\n        changeFormFieldValue(fieldName, value, formId, userInput)\n      );\n      if (userInput) {\n        const change_actions = this.props.element.getSettings(\"change_actions\");\n\n        if (change_actions && !isEditor()) {\n          const actionsManager = (\n            await import(\n              /* webpackChunkName: 'ActionsManager' */\n              \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\n            )\n          ).default;\n          await actionsManager.callAllWidgetActions(\n            this.props.element.getIdForAction(),\n            \"change\",\n            change_actions,\n            this.props.element\n          );\n        }\n      }\n    }\n  };\n\n  /**\n   * Обработка добавления опции по ajax\n   * @param {SyntheticKeyboardEvent} e\n   */\n  createItem = async e => {\n    const keyCode = e.keyCode;\n    const { value: inputValue } = e.target;\n    if (keyCode !== 13 || !inputValue) {\n      return;\n    }\n    const {\n      create_url,\n      create_label,\n      create_data,\n      select2_multiple\n    } = this.props.element.getSettings();\n    if (!create_label && !create_url) {\n      return;\n    }\n    const currentModel = this.props.element.getCurrentModel();\n    let data = parseParamsFromString(create_data, currentModel, true);\n    data[create_label] = inputValue;\n    let url = parseURLTemplate(create_url, currentModel.getData());\n    this.setState(state => ({ ...state, isDisabled: true }));\n    try {\n      const resource = new Resource({\n        route: url\n      });\n      let res = await resource.post(data);\n      if (res.success && _.get(res, \"data.id\")) {\n        let newOption = {\n          label: inputValue,\n          value: _.get(res, \"data.id\")\n        };\n        this.setState(\n          state => ({ ...state, isDisabled: false }),\n          () => {\n            let options = [...this.state.options];\n            options.unshift(newOption);\n            let value = this.state.value;\n            if (select2_multiple) {\n              value = value ? [...value] : [];\n              value.push(_.get(res, \"data.id\"));\n            } else {\n              value = _.get(res, \"data.id\");\n            }\n            this.setState(\n              state => ({ ...state, options, value }),\n              () => {\n                const selectStateManager = _.get(\n                  this,\n                  \"altrpSelectRef.current.selectRef.current\"\n                );\n                if (selectStateManager) {\n                  selectStateManager.setState({\n                    menuIsOpen: false,\n                    inputValue: \"\"\n                  });\n                }\n              }\n            );\n          }\n        );\n      }\n      this.setState(state => ({ ...state, isDisabled: false }));\n    } catch (error) {\n      console.error(error);\n      this.setState(state => ({ ...state, isDisabled: false }));\n    }\n  };\n  // shouldComponentUpdate(nextProps) {\n    // console.log(nextProps);\n\n    // console.log(nextProps.ElementWrapper=== this.props.ElementWrapper);\n    // console.log(nextProps.altrpMeta=== this.props.altrpMeta);\n    // console.log(nextProps.altrpPageState=== this.props.altrpPageState);\n    // console.log(nextProps.altrpresponses=== this.props.altrpresponses);\n    // console.log(nextProps.appStore=== this.props.appStore);\n    // console.log(nextProps.baseRender=== this.props.baseRender);\n    // console.log(nextProps.children=== this.props.children);\n    // console.log(nextProps.currentDataStorage=== this.props.currentDataStorage);\n    // console.log(nextProps.currentModel=== this.props.currentModel);\n    // console.log(nextProps.currentScreen=== this.props.currentScreen);\n    // console.log(nextProps.currentUser=== this.props.currentUser);\n    // console.log(nextProps.element=== this.props.element);\n    // console.log(nextProps.elementDisplay=== this.props.elementDisplay);\n    // console.log(nextProps.formsStore=== this.props.formsStore);\n    // console.log(nextProps.match=== this.props.match);\n    // console.log(nextProps.match);\n    // console.log(nextProps.rootElement=== this.props.rootElement);\n    // console.log(nextProps.rootElement);\n    // console.log(nextProps.updateToken=== this.props.updateToken);\n  //   return true;\n  // }\n  /**\n   * Взовращает имя для атрибута name\n   * @return {string}\n   */\n  getName() {\n    return `${this.props.element.getFormId()}[${this.props.element.getFieldId()}]`;\n  }\n\n  render() {\n    let label = null;\n    const settings = this.props.element.getSettings();\n    const {\n      options_sorting,\n      content_readonly,\n      image_select_options,\n      select2_multiple: isMultiple,\n      label_icon\n    } = settings;\n\n    let value = this.state.value;\n\n    if (\n      _.get(value, \"dynamic\") &&\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\n    ) {\n      value = this.getContent(\"content_default_value\");\n    }\n    /**\n     * Пока динамический контент загружается (Еесли это динамический контент),\n     * нужно вывести пустую строку\n     */\n    if (value && value.dynamic) {\n      value = \"\";\n    }\n    let classLabel = \"\";\n    let styleLabel = {};\n    const content_label_position_type = this.props.element.getResponsiveSetting(\n      \"content_label_position_type\"\n    );\n    switch (content_label_position_type) {\n      case \"top\":\n        styleLabel = {\n          marginBottom: this.state.settings.label_style_spacing\n            ? this.state.settings.label_style_spacing.size +\n              this.state.settings.label_style_spacing.unit\n            : 2 + \"px\"\n        };\n        classLabel = \"\";\n        break;\n      case \"bottom\":\n        styleLabel = {\n          marginTop: this.state.settings.label_style_spacing\n            ? this.state.settings.label_style_spacing.size +\n              this.state.settings.label_style_spacing.unit\n            : 2 + \"px\"\n        };\n        classLabel = \"\";\n        break;\n      case \"left\":\n        styleLabel = {\n          marginRight: this.state.settings.label_style_spacing\n            ? this.state.settings.label_style_spacing.size +\n              this.state.settings.label_style_spacing.unit\n            : 2 + \"px\"\n        };\n        classLabel = \"altrp-field-label-container-left\";\n        // this.label.current.classList.add(\"hello\")\n\n        break;\n      case \"absolute\":\n        styleLabel = {\n          position: \"absolute\",\n          zIndex: 2\n        };\n        classLabel = \"\";\n        break;\n    }\n\n    if (this.state.settings.content_label) {\n      label = (\n        <div\n          className={\"altrp-field-label-container \" + classLabel}\n          style={styleLabel}\n        >\n          <label\n            className={`altrp-field-label ${\n              this.state.settings.content_required\n                ? \"altrp-field-label--required\"\n                : \"\"\n            }`}\n          >\n            {this.state.settings.content_label}\n          </label>\n          {label_icon && label_icon.assetType && (\n            <span className=\"altrp-label-icon\">\n              {renderAssetIcon(label_icon)}\n            </span>\n          )}\n        </div>\n      );\n    } else {\n      label = null;\n    }\n\n    let autocomplete = \"off\";\n    if (this.state.settings.content_autocomplete) {\n      autocomplete = \"on\";\n    } else {\n      autocomplete = \"off\";\n    }\n\n    let input = null;\n    switch (this.state.settings.content_type) {\n      case \"select\":\n        {\n          let options = this.getOptions();\n          input = (\n            <select\n              value={value || \"\"}\n              onFocus={this.onFocus}\n              name={this.getName()}\n              onChange={this.onChange}\n              onBlur={this.onBlur}\n              onKeyDown={this.handleEnter}\n              id={this.state.settings.position_css_id}\n              className={\n                \"altrp-field \" + this.state.settings.position_css_classes\n              }\n            >\n              {this.state.settings.content_options_nullable ? (\n                <option value=\"\" />\n              ) : (\n                \"\"\n              )}\n\n              {(options_sorting\n                ? sortOptions(options, options_sorting)\n                : options\n              ).map(option => (\n                <option value={option.value} key={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n          );\n        }\n        break;\n      case \"select2\":\n        {\n          input = this.renderSelect2();\n        }\n        break;\n      case \"radio\":\n      case \"checkbox\":\n        {\n          input = this.renderRepeatedInput();\n        }\n        break;\n      case \"wysiwyg\":\n        {\n          input = this.renderWysiwyg();\n        }\n        break;\n      case \"textarea\":\n        input = (\n          <textarea\n            value={value || \"\"}\n            readOnly={content_readonly}\n            autoComplete={autocomplete}\n            placeholder={this.state.settings.content_placeholder}\n            className={\n              \"altrp-field \" + this.state.settings.position_css_classes\n            }\n            onChange={this.onChange}\n            onBlur={this.onBlur}\n            id={this.state.settings.position_css_id}\n          />\n        );\n        break;\n      case \"image_select\":\n        input = (\n          <AltrpImageSelect\n            options={image_select_options}\n            value={this.state.value}\n            changeHandler={value => this.setState({ value })}\n            isMultiple={isMultiple}\n          />\n        );\n        break;\n      case \"accept\":\n        input = this.renderAcceptInput();\n        break;\n      default: {\n        const isClearable = this.state.settings.content_clearable;\n        const isDate = this.state.settings.content_type === \"date\";\n        const timestamp = this.props.element.getSettings(\"content_timestamp\");\n        if (isDate && timestamp) {\n          const isValid = moment.unix(value).isValid();\n          if (isValid) {\n            try {\n              value = moment.unix(value / 1000).format(\"YYYY-MM-DD\");\n            } catch (error) {\n              console.log(error);\n            }\n          }\n        }\n        input = (\n          <div className=\"altrp-input-wrapper\">\n            <AltrpInput\n              type={this.state.settings.content_type}\n              name={this.getName()}\n              value={value || \"\"}\n              element={this.props.element}\n              readOnly={content_readonly}\n              autoComplete={autocomplete}\n              placeholder={this.state.settings.content_placeholder}\n              className={\n                \"altrp-field \" + this.state.settings.position_css_classes\n              }\n              settings={this.props.element.getSettings()}\n              onKeyDown={this.handleEnter}\n              onChange={this.onChange}\n              onBlur={this.onBlur}\n              onFocus={this.onFocus}\n              id={this.state.settings.position_css_id}\n            />\n            {isClearable && (\n              <button\n                className=\"input-clear-btn\"\n                onClick={() => this.setState({ value: this.defaultValue })}\n              >\n                ✖\n              </button>\n            )}\n          </div>\n        );\n      }\n    }\n    return (\n      <AltrpFieldContainer\n        settings={settings}\n        className={\n          this.state.settings.content_type !== \"image_select\"\n            ? \"altrp-field-container \"\n            : \"\" + classLabel\n        }\n      >\n        {content_label_position_type === \"top\" ? label : \"\"}\n        {content_label_position_type === \"left\" ? label : \"\"}\n        {content_label_position_type === \"right\" ? label : \"\"}\n        {content_label_position_type === \"absolute\" ? label : \"\"}\n        {/* .altrp-field-label-container */}\n        {input}\n        {content_label_position_type === \"bottom\" ? label : \"\"}\n      </AltrpFieldContainer>\n    );\n  }\n  /**\n   * Выводит input type=accept\n   */\n  renderAcceptInput() {\n    const settings = this.props.element.getSettings();\n    let value = this.state.value;\n    let trueValue = this.props.element.getSettings(\"accept_checked\") || true;\n    let falseValue =\n      this.props.element.getSettings(\"accept_unchecked\") || false;\n    if (value === trueValue) {\n      value = true;\n    } else if (value === falseValue) {\n      value = false;\n    }\n    return (\n      <div className={`altrp-field-option ${value ? \"active\" : \"\"}`}>\n        <span className=\"altrp-field-option-span\">\n          <input\n            type=\"checkbox\"\n            name={`${this.props.element.getFormId()}[${this.props.element.getFieldId()}]`}\n            className={`altrp-field-option__input ${value ? \"active\" : \"\"}`}\n            onChange={this.onChange}\n            checked={!!value}\n            id={`${this.props.element.getFormId()}[${this.props.element.getFieldId()}]`}\n          />\n        </span>\n      </div>\n    );\n  }\n  /**\n   * Выводит input type=checkbox|radio\n   */\n  renderRepeatedInput() {\n    const { options = [] } = this.state;\n    let { value = \"\" } = this.state;\n    const fieldName =\n      this.props.element.getFieldId() ||\n      Math.random()\n        .toString(36)\n        .substr(2, 9);\n    const formID =\n      this.props.element.getFormId() ||\n      Math.random()\n        .toString(36)\n        .substr(2, 9);\n    const inputType = this.props.element.getSettings(\"content_type\", \"radio\");\n    return (\n      <div className=\"altrp-field-subgroup\">\n        {options.map((option, idx) => {\n          let checked = false;\n          /**\n           * Если значение или опция число, то приведем к числу перед сравнением\n           */\n          if (inputType === \"radio\") {\n            checked = altrpCompare(value, option.value, \"==\");\n          } else {\n            value = _.isArray(value) ? value : value ? [value] : [];\n            checked = altrpCompare(option.value, value, \"in\");\n          }\n          return (\n            <div\n              className={`altrp-field-option ${checked ? \"active\" : \"\"}`}\n              key={`${fieldName}-${idx}`}\n            >\n              <span className=\"altrp-field-option-span\">\n                <input\n                  type={inputType}\n                  value={option.value}\n                  name={`${formID}-${fieldName}`}\n                  className={`altrp-field-option__input ${\n                    checked ? \"active\" : \"\"\n                  }`}\n                  onChange={this.onChange}\n                  checked={checked}\n                  id={`${formID}-${fieldName}-${idx}`}\n                />\n              </span>\n              <label\n                htmlFor={`${formID}-${fieldName}-${idx}`}\n                className=\"altrp-field-option__label\"\n              >\n                {option.label}\n              </label>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  /**\n   * Выводит инпут-select2, используя компонент AltrpSelect\n   */\n  renderSelect2() {\n    const {\n      content_options_nullable,\n      nulled_option_title,\n      content_placeholder\n    } = this.props.element.getSettings();\n\n    let options = this.getOptions();\n    let value = this.state.value;\n    if (\n      _.get(value, \"dynamic\") &&\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\n    ) {\n      value = this.getContent(\"content_default_value\", true);\n    }\n    /**\n     * Пока динамический контент загружается, нужно вывести пустую строку\n     */\n    if (value && value.dynamic) {\n      value = \"\";\n    }\n    if (!this.props.element.getSettings(\"select2_multiple\", false)) {\n      options.forEach(option => {\n        if (!option) {\n          return;\n        }\n        if (option.value === value) {\n          value = { ...option };\n        }\n        if (_.isArray(option.options)) {\n          option.options.forEach(option => {\n            if (option.value == value) {\n              value = { ...option };\n            }\n          });\n        }\n      });\n    } else {\n      /**\n       * Если включен мультиселект\n       */\n      value = value ? (_.isArray(value) ? value : [value]) : [];\n      value = value.map(v => {\n        let _v = v;\n        options.forEach(option => {\n          if (option.value && option.value.toString() === _v.toString()) {\n            _v = { ...option };\n          }\n          if (_.isArray(option.options)) {\n            option.options.forEach(option => {\n              if (option.value && option.value.toString() === _v.toString()) {\n                _v = { ...option };\n              }\n            });\n          }\n        });\n        return _v;\n      });\n      /**\n       * Добавим опцию, если для какого-то значения ее нет\n       */\n      value.forEach(valueItem => {\n        if (!_.isObject(valueItem)) {\n          options.push({\n            value: valueItem,\n            label: valueItem\n          });\n        }\n      });\n    }\n    /**\n     * Сортируем опции\n     * @type {Array|*}\n     */\n    if (\n      content_options_nullable &&\n      (this.props.element.getSettings(\"content_type\") !== \"select2\" ||\n        this.props.element.getSettings(\"select2_multiple\") !== true)\n    ) {\n      options = _.union(\n        [{ label: nulled_option_title, value: \"<null>\" }],\n        options\n      );\n    }\n    const select2Props = {\n      className: \"altrp-field-select2\",\n      onFocus: this.onFocus,\n      element: this.props.element,\n      classNamePrefix: this.props.element.getId() + \" altrp-field-select2\",\n      options,\n      name: this.props.element.getFieldId(),\n      ref: this.altrpSelectRef,\n      settings: this.props.element.getSettings(),\n      onChange: this.onChange,\n      onBlur: this.onBlur,\n      value: value || _.find(options, o => o && o.value == this.state.value),\n      isOptionSelected: option => {\n        if (_.isNumber(this.state.value) || _.isString(this.state.value)) {\n          return this.state.value == option.value;\n        }\n        return this.state.value && this.state.value.includes(option.value);\n      },\n      placeholder: content_placeholder,\n      isMulti: this.props.element.getSettings(\"select2_multiple\", false),\n      onKeyDown: this.handleEnter\n      // menuIsOpen: true,\n    };\n    return (\n      <div className=\"altrp-input-wrapper\">\n        <AltrpSelect {...select2Props} />\n      </div>\n    );\n  }\n\n  renderWysiwyg() {\n    return (\n      <CKeditor\n        onChange={this.onChange}\n        onBlur={this.onBlur}\n        changeText={this.dispatchFieldValueToStore}\n        text={this.getContent(\"content_default_value\")}\n        name={this.getName()}\n        readOnly={this.getContent(\"read_only\")}\n      />\n    );\n  }\n}\n\nexport default InputWidget;\n","import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport '@babel/runtime/helpers/slicedToArray';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '@babel/runtime/helpers/defineProperty';\nimport _classCallCheck from '@babel/runtime/helpers/esm/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/esm/createClass';\nimport '@babel/runtime/helpers/assertThisInitialized';\nimport _inherits from '@babel/runtime/helpers/esm/inherits';\nimport _possibleConstructorReturn from '@babel/runtime/helpers/esm/possibleConstructorReturn';\nimport _getPrototypeOf from '@babel/runtime/helpers/esm/getPrototypeOf';\nimport React, { Component } from 'react';\nimport 'memoize-one';\nimport '@emotion/core';\nimport 'react-dom';\nimport '@babel/runtime/helpers/typeof';\nimport { G as handleInputChange } from '../../dist/index-75b02bac.browser.esm.js';\nimport { S as Select } from '../../dist/Select-e1cf49ae.browser.esm.js';\nimport '@emotion/css';\nimport '@babel/runtime/helpers/taggedTemplateLiteral';\nimport 'react-input-autosize';\nimport { m as manageState } from '../../dist/stateManager-2f2b6f5b.browser.esm.js';\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\nvar defaultProps = {\n  cacheOptions: false,\n  defaultOptions: false,\n  filterOption: null,\n  isLoading: false\n};\nvar makeAsyncSelect = function makeAsyncSelect(SelectComponent) {\n  var _class, _temp;\n\n  return _temp = _class = /*#__PURE__*/function (_Component) {\n    _inherits(Async, _Component);\n\n    var _super = _createSuper(Async);\n\n    function Async(props) {\n      var _this;\n\n      _classCallCheck(this, Async);\n\n      _this = _super.call(this);\n      _this.select = void 0;\n      _this.lastRequest = void 0;\n      _this.mounted = false;\n      _this.optionsCache = {};\n\n      _this.handleInputChange = function (newValue, actionMeta) {\n        var _this$props = _this.props,\n            cacheOptions = _this$props.cacheOptions,\n            onInputChange = _this$props.onInputChange; // TODO\n\n        var inputValue = handleInputChange(newValue, actionMeta, onInputChange);\n\n        if (!inputValue) {\n          delete _this.lastRequest;\n\n          _this.setState({\n            inputValue: '',\n            loadedInputValue: '',\n            loadedOptions: [],\n            isLoading: false,\n            passEmptyOptions: false\n          });\n\n          return;\n        }\n\n        if (cacheOptions && _this.optionsCache[inputValue]) {\n          _this.setState({\n            inputValue: inputValue,\n            loadedInputValue: inputValue,\n            loadedOptions: _this.optionsCache[inputValue],\n            isLoading: false,\n            passEmptyOptions: false\n          });\n        } else {\n          var request = _this.lastRequest = {};\n\n          _this.setState({\n            inputValue: inputValue,\n            isLoading: true,\n            passEmptyOptions: !_this.state.loadedInputValue\n          }, function () {\n            _this.loadOptions(inputValue, function (options) {\n              if (!_this.mounted) return;\n\n              if (options) {\n                _this.optionsCache[inputValue] = options;\n              }\n\n              if (request !== _this.lastRequest) return;\n              delete _this.lastRequest;\n\n              _this.setState({\n                isLoading: false,\n                loadedInputValue: inputValue,\n                loadedOptions: options || [],\n                passEmptyOptions: false\n              });\n            });\n          });\n        }\n\n        return inputValue;\n      };\n\n      _this.state = {\n        defaultOptions: Array.isArray(props.defaultOptions) ? props.defaultOptions : undefined,\n        inputValue: typeof props.inputValue !== 'undefined' ? props.inputValue : '',\n        isLoading: props.defaultOptions === true,\n        loadedOptions: [],\n        passEmptyOptions: false\n      };\n      return _this;\n    }\n\n    _createClass(Async, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n\n        this.mounted = true;\n        var defaultOptions = this.props.defaultOptions;\n        var inputValue = this.state.inputValue;\n\n        if (defaultOptions === true) {\n          this.loadOptions(inputValue, function (options) {\n            if (!_this2.mounted) return;\n            var isLoading = !!_this2.lastRequest;\n\n            _this2.setState({\n              defaultOptions: options || [],\n              isLoading: isLoading\n            });\n          });\n        }\n      }\n    }, {\n      key: \"UNSAFE_componentWillReceiveProps\",\n      value: function UNSAFE_componentWillReceiveProps(nextProps) {\n        // if the cacheOptions prop changes, clear the cache\n        if (nextProps.cacheOptions !== this.props.cacheOptions) {\n          this.optionsCache = {};\n        }\n\n        if (nextProps.defaultOptions !== this.props.defaultOptions) {\n          this.setState({\n            defaultOptions: Array.isArray(nextProps.defaultOptions) ? nextProps.defaultOptions : undefined\n          });\n        }\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this.mounted = false;\n      }\n    }, {\n      key: \"focus\",\n      value: function focus() {\n        this.select.focus();\n      }\n    }, {\n      key: \"blur\",\n      value: function blur() {\n        this.select.blur();\n      }\n    }, {\n      key: \"loadOptions\",\n      value: function loadOptions(inputValue, callback) {\n        var loadOptions = this.props.loadOptions;\n        if (!loadOptions) return callback();\n        var loader = loadOptions(inputValue, callback);\n\n        if (loader && typeof loader.then === 'function') {\n          loader.then(callback, function () {\n            return callback();\n          });\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this3 = this;\n\n        var _this$props2 = this.props,\n            loadOptions = _this$props2.loadOptions,\n            isLoadingProp = _this$props2.isLoading,\n            props = _objectWithoutProperties(_this$props2, [\"loadOptions\", \"isLoading\"]);\n\n        var _this$state = this.state,\n            defaultOptions = _this$state.defaultOptions,\n            inputValue = _this$state.inputValue,\n            isLoading = _this$state.isLoading,\n            loadedInputValue = _this$state.loadedInputValue,\n            loadedOptions = _this$state.loadedOptions,\n            passEmptyOptions = _this$state.passEmptyOptions;\n        var options = passEmptyOptions ? [] : inputValue && loadedInputValue ? loadedOptions : defaultOptions || [];\n        return /*#__PURE__*/React.createElement(SelectComponent, _extends({}, props, {\n          ref: function ref(_ref) {\n            _this3.select = _ref;\n          },\n          options: options,\n          isLoading: isLoading || isLoadingProp,\n          onInputChange: this.handleInputChange\n        }));\n      }\n    }]);\n\n    return Async;\n  }(Component), _class.defaultProps = defaultProps, _temp;\n};\nvar SelectState = manageState(Select);\nvar Async = makeAsyncSelect(SelectState);\n\nexport default Async;\nexport { defaultProps, makeAsyncSelect };\n"],"sourceRoot":""}